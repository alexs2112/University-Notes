commit a2d523a672e92b9778e74e6b19e76a2b603d35ae
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Wed Nov 1 19:40:17 2023 -0600

    Update README with usage instructions

diff --git a/README.md b/README.md
index 6778e41..abe8462 100644
--- a/README.md
+++ b/README.md
@@ -15,3 +15,10 @@ This project uses the `AsciiPanel` library for user input in a text-based interf
  - `Primitive Array`: Contains an array of arbitrary length of primitives
  - `Reference Array`: Contains an array of arbitrary length of other objects that have been created by the user
  - `ArrayList`: Contains a `java.util.ArrayList` that refers to other objects created by the user
+
+### Usage
+ - Open two separate instances of the program through the command line (`java application.Main`)
+ - With one instance, create one or more objects through the `Object Creator` terminal
+ - The other instance will open the `Receive Object` terminal and enter `Receive Object` mode
+ - The first instance can then open the `Serialize` terminal, serialize the object that they wish to use and send it to the receiving instance.
+ - Once the receiving instance gets the object it will automatically deserialize it. The deserialized object can then be viewed in the `Object Inspector`

commit 11b4e5db4aeaaafb725c7f2171d6da3a400373e9
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Wed Nov 1 19:23:56 2023 -0600

    Serialize/Deserialize all types of Collections, not just ArrayLists

diff --git a/build.bat b/build.bat
index 058abb4..a8d1969 100644
--- a/build.bat
+++ b/build.bat
@@ -5,7 +5,7 @@ javac ^
     object_creator/handlers/*.java ^
     object_creator/helpers/*.java ^
     serializer/*.java ^
-    serializer/helpers/*.java ^
+    helpers/*.java ^
     network/*.java ^
     visualizer/*.java ^
     unit_tests/*.java
diff --git a/deserializer/Deserializer.java b/deserializer/Deserializer.java
index 10a5c48..08492de 100644
--- a/deserializer/Deserializer.java
+++ b/deserializer/Deserializer.java
@@ -5,10 +5,10 @@ import org.jdom2.Document;
 import org.jdom2.Element;
 import java.util.HashMap;
 import java.util.List;
-import java.util.ArrayList;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Array;
 import java.lang.reflect.Field;
+import helpers.CollectionHelper;
 
 @SuppressWarnings("rawtypes")
 public class Deserializer {
@@ -22,10 +22,21 @@ public class Deserializer {
         for (Element e : document.getRootElement().getChildren()) {
             if (e.getAttribute("length") != null) {
                 deserializeArray(e);
-            } else if (e.getAttribute("size") != null) {
-                deserializeArrayList(e);
             } else {
-                deserializeNormalObject(e);
+                int id;
+                try {
+                    id = e.getAttribute("id").getIntValue();
+                } catch(DataConversionException err) {
+                    System.out.println(err);
+                    continue;
+                }
+                o = objects.get(id);
+
+                if (CollectionHelper.isCollection(objects.get(id).getClass())) {
+                    deserializeCollection(e, o);
+                } else {
+                    deserializeNormalObject(e, o);
+                }
             }
         }
 
@@ -65,15 +76,7 @@ public class Deserializer {
         }
     }
 
-    private void deserializeNormalObject(Element e) {
-        int id;
-        try {
-            id = e.getAttribute("id").getIntValue();
-        } catch(DataConversionException err) {
-            System.out.println(err);
-            return;
-        }
-
+    private void deserializeNormalObject(Element e, Object o) {
         for (Element field : e.getChildren("field")) {
             // Read name and class from attributes
             String fieldName = field.getAttributeValue("name");
@@ -102,7 +105,7 @@ public class Deserializer {
                 String text = field.getChildren("value").get(0).getText();
                 Object value = wrapObject(text, f.getType());
                 try {
-                    f.set(objects.get(id), value);
+                    f.set(o, value);
                 } catch(IllegalAccessException err) {
                     System.out.println(err);
                     continue;
@@ -111,7 +114,7 @@ public class Deserializer {
                 String value = field.getChildren("reference").get(0).getTextTrim();
                 try {
                     int objId = Integer.valueOf(value);
-                    f.set(objects.get(id), objects.get(objId));
+                    f.set(o, objects.get(objId));
                 } catch(NumberFormatException err) {
                     System.out.println(err);
                     continue;
@@ -164,27 +167,14 @@ public class Deserializer {
         }
     }
 
-    @SuppressWarnings("unchecked")
-    private void deserializeArrayList(Element e) {
-        int id;
-        int size;
-        ArrayList o;
-        try {
-            id = e.getAttribute("id").getIntValue();
-            size = e.getAttribute("size").getIntValue();
-            o = (ArrayList)objects.get(id);
-        } catch(DataConversionException err) {
-            System.out.println(err);
-            return;
-        }
-
+    private void deserializeCollection(Element e, Object o) {
         if (e.getChildren("value").size() > 0) {
             List<Element> children = e.getChildren("value");
-            for (int i = 0; i < size; i++) {
-                String text = children.get(i).getText();
-                Object value = wrapObject(text, objects.get(id).getClass().getComponentType());
+            for (Element child : children) {
+                String text = child.getText();
+                Object value = wrapObject(text, o.getClass());
                 try {
-                    o.add(value);
+                    CollectionHelper.add(o, value);
                 } catch(IllegalArgumentException err) {
                     System.out.println(err);
                     continue;
@@ -192,11 +182,11 @@ public class Deserializer {
             }
         } else if (e.getChildren("reference").size() > 0) {
             List<Element> children = e.getChildren("reference");
-            for (int i = 0; i < size; i++) {
-                String text = children.get(i).getTextTrim();
+            for (Element child : children) {
+                String text = child.getTextTrim();
                 try {
                     int objId = Integer.valueOf(text);
-                    o.add(objects.get(objId));
+                    CollectionHelper.add(o, objects.get(objId));
                 } catch(NumberFormatException err) {
                     System.out.println(err);
                     continue;
@@ -209,8 +199,12 @@ public class Deserializer {
     }
 
     private Object wrapObject(String value, Class c) {
+        if (c == null) { System.out.println(value); }
         if (c.getName().equals("boolean")) { return Boolean.valueOf(value); }
-        else if (c.getName().equals("char")) { return value.toCharArray()[0]; }
+        else if (c.getName().equals("char")) { 
+            if (value.toCharArray().length == 0) { return ' '; }
+            return value.toCharArray()[0];
+        }
         else if (c.getName().equals("byte")) { return Byte.valueOf(value); }
         else if (c.getName().equals("short")) { return Short.valueOf(value); }
         else if (c.getName().equals("int")) { return Integer.valueOf(value); }
diff --git a/helpers/CollectionHelper.java b/helpers/CollectionHelper.java
new file mode 100644
index 0000000..4d52f6c
--- /dev/null
+++ b/helpers/CollectionHelper.java
@@ -0,0 +1,68 @@
+package helpers;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.Collection;
+import java.util.Iterator;
+
+@SuppressWarnings("rawtypes")
+public class CollectionHelper {
+    public static boolean isCollection(Class c) {
+        for (Class i : c.getInterfaces()) {
+            if (i == Collection.class) { return true; }
+            if (isCollection(i)) { return true; }
+        }
+        Class s = c.getSuperclass();
+        if (s != null) {
+            if (s == Collection.class) { return true; }
+            if (isCollection(s)) { return true; }
+        }
+        return false;
+    }
+
+    @SuppressWarnings("unchecked")
+    public static Iterator<Object> getIterator(Object obj) {
+        try {
+            Method m = Collection.class.getMethod("iterator", new Class[0]);
+            return (Iterator<Object>)m.invoke(obj, new Object[0]);
+        } catch(NoSuchMethodException err) {
+            System.out.println(err);
+            return null;
+        } catch(IllegalAccessException err) {
+            System.out.println(err);
+            return null;
+        } catch(InvocationTargetException err) {
+            System.out.println(err);
+            return null;
+        }
+    }
+
+    public static int getSize(Object obj) {
+        try {
+            Method m = Collection.class.getMethod("size", new Class[0]);
+            return (int)m.invoke(obj, new Object[0]);
+        } catch(NoSuchMethodException err) {
+            System.out.println(err);
+            return 0;
+        } catch(IllegalAccessException err) {
+            System.out.println(err);
+            return 0;
+        } catch(InvocationTargetException err) {
+            System.out.println(err);
+            return 0;
+        }
+    }
+
+    public static void add(Object host, Object o) {
+        try {
+            Method m = Collection.class.getMethod("add", Object.class );
+            m.invoke(host, o);
+        } catch(NoSuchMethodException err) {
+            System.out.println(err);
+        } catch(IllegalAccessException err) {
+            System.out.println(err);
+        } catch(InvocationTargetException err) {
+            System.out.println(err);
+        }
+    }
+}
diff --git a/serializer/helpers/FieldHelper.java b/helpers/FieldHelper.java
similarity index 98%
rename from serializer/helpers/FieldHelper.java
rename to helpers/FieldHelper.java
index 82b97b9..64f9f1f 100644
--- a/serializer/helpers/FieldHelper.java
+++ b/helpers/FieldHelper.java
@@ -1,4 +1,4 @@
-package serializer.helpers;
+package helpers;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
diff --git a/serializer/ObjectMap.java b/serializer/ObjectMap.java
index 8701fd5..e19a7b7 100644
--- a/serializer/ObjectMap.java
+++ b/serializer/ObjectMap.java
@@ -1,10 +1,10 @@
 package serializer;
 
 import java.util.HashMap;
+import helpers.FieldHelper;
 import java.util.ArrayList;
 import java.lang.reflect.Field;
 import java.lang.reflect.Array;
-import serializer.helpers.FieldHelper;
 
 @SuppressWarnings("rawtypes")
 public class ObjectMap {
diff --git a/serializer/Serializer.java b/serializer/Serializer.java
index 479de2e..ff69441 100644
--- a/serializer/Serializer.java
+++ b/serializer/Serializer.java
@@ -3,10 +3,11 @@ package serializer;
 import java.lang.reflect.Array;
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
-import java.util.ArrayList;
+import java.util.Iterator;
 import org.jdom2.Document;
 import org.jdom2.Element;
-import serializer.helpers.FieldHelper;
+import helpers.FieldHelper;
+import helpers.CollectionHelper;
 
 @SuppressWarnings("rawtypes")
 public class Serializer {
@@ -39,9 +40,8 @@ public class Serializer {
         if (obj.getClass().isArray()) {
             e.setAttribute("length", Integer.toString(Array.getLength(obj)));
             serializeArray(obj, e);
-        } else if (obj.getClass() == ArrayList.class) {
-            e.setAttribute("size", Integer.toString(((ArrayList)obj).size()));
-            serializeArrayList(obj, e);
+        } else if (CollectionHelper.isCollection(obj.getClass())) {
+            serializeCollection(obj, e);
         } else {
             serializeNormalObject(obj, e);
         }
@@ -87,10 +87,10 @@ public class Serializer {
         }
     }
 
-    private void serializeArrayList(Object obj, Element element) {
-        ArrayList list = (ArrayList)obj;
-        for (int i = 0; i < list.size(); i++) {
-            Object o = list.get(i);
+    private void serializeCollection(Object obj, Element element) {
+        Iterator<Object> iterator = CollectionHelper.getIterator(obj);
+        while (iterator.hasNext()) {
+            Object o = iterator.next();
             Element value = serializeValue(o);
             element.addContent(value);
         }
diff --git a/unit_tests/TestDeserializer.java b/unit_tests/TestDeserializer.java
index d2c69a0..adc2167 100644
--- a/unit_tests/TestDeserializer.java
+++ b/unit_tests/TestDeserializer.java
@@ -5,6 +5,7 @@ import org.junit.Before;
 import static org.junit.Assert.assertEquals;
 import org.jdom2.Document;
 import java.util.ArrayList;
+import java.util.Stack;
 import serializer.Serializer;
 import deserializer.Deserializer;
 import object_creator.classes.*;
@@ -223,4 +224,15 @@ public class TestDeserializer {
         assertEquals("java.lang.String", r.getClass().getName());
         assertEquals(s, (String)r);
     }
+
+    @Test @SuppressWarnings("unchecked")
+    public void TestStack() {
+        Stack<Integer> s = new Stack<Integer>();
+        s.add(1);
+        s.add(2);
+        Document doc = serializer.serialize(s);
+        Stack<Integer> r = (Stack<Integer>)deserializer.deserialize(doc);
+        assertEquals(s.get(0).toString(), r.get(0));
+        assertEquals(s.get(1).toString(), r.get(1));
+    }
 }
diff --git a/unit_tests/TestSerializer.java b/unit_tests/TestSerializer.java
index c6b0a10..b035451 100644
--- a/unit_tests/TestSerializer.java
+++ b/unit_tests/TestSerializer.java
@@ -5,6 +5,8 @@ import org.junit.Before;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 import java.util.ArrayList;
+import java.util.Vector;
+import java.util.List;
 import org.jdom2.Document;
 import org.jdom2.Element;
 import serializer.Serializer;
@@ -66,7 +68,6 @@ public class TestSerializer {
         Element A = root.getChildren().get(0);
         assertEquals("java.util.ArrayList", A.getAttributeValue("class"));
         assertEquals(Integer.toString(o.hashCode()), A.getAttributeValue("id"));
-        assertEquals("2", A.getAttributeValue("size"));
     }
 
     @Test
@@ -236,4 +237,21 @@ public class TestSerializer {
             }
         }
     }
+
+    @Test
+    public void TestVector() {
+        Vector<Integer> v = new Vector<Integer>(3);
+        v.add(0);
+        v.add(1);
+        v.add(2);
+        Document d = serializer.serialize(v);
+
+        Element root = d.getRootElement();
+        Element vec = root.getChildren().get(0);
+        List<Element> children = vec.getChildren("value");
+        for (int i = 0; i < children.size(); i++) {
+            Element e = children.get(i);
+            assertEquals(Integer.toString(v.get(i)), e.getTextNormalize());
+        }
+    }
 }
diff --git a/visualizer/Visualizer.java b/visualizer/Visualizer.java
index 91a9a1d..699d65e 100644
--- a/visualizer/Visualizer.java
+++ b/visualizer/Visualizer.java
@@ -5,7 +5,7 @@ import java.awt.event.KeyEvent;
 import java.util.ArrayList;
 import application.Screen;
 import asciiPanel.AsciiPanel;
-import serializer.helpers.FieldHelper;
+import helpers.FieldHelper;
 
 public abstract class Visualizer extends Screen {
     private Screen homeScreen;
diff --git a/visualizer/VisualizerArray.java b/visualizer/VisualizerArray.java
index 06df0d3..f876b1b 100644
--- a/visualizer/VisualizerArray.java
+++ b/visualizer/VisualizerArray.java
@@ -5,8 +5,8 @@ import java.util.ArrayList;
 import application.Screen;
 import java.awt.Color;
 import java.awt.event.KeyEvent;
-import serializer.helpers.FieldHelper;
 import asciiPanel.AsciiPanel;
+import helpers.FieldHelper;
 
 public class VisualizerArray extends Visualizer {
     private ArrayList<Object> values;
diff --git a/visualizer/VisualizerNormal.java b/visualizer/VisualizerNormal.java
index 796c2e0..3f6acee 100644
--- a/visualizer/VisualizerNormal.java
+++ b/visualizer/VisualizerNormal.java
@@ -5,8 +5,8 @@ import java.util.ArrayList;
 import java.awt.event.KeyEvent;
 import java.awt.Color;
 import asciiPanel.AsciiPanel;
+import helpers.FieldHelper;
 import application.Screen;
-import serializer.helpers.FieldHelper;
 
 public class VisualizerNormal extends Visualizer {
     private ArrayList<Field> fields;

commit 02229565772999f69235f103d3d65a6ddde278de
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Wed Nov 1 15:24:27 2023 -0600

    Add visualizer for arrays and arraylists

diff --git a/visualizer/Visualizer.java b/visualizer/Visualizer.java
index f9789e4..91a9a1d 100644
--- a/visualizer/Visualizer.java
+++ b/visualizer/Visualizer.java
@@ -97,16 +97,16 @@ public abstract class Visualizer extends Screen {
     protected Screen getNextScreen(Object o) {
         if (o.getClass().getName().equals("java.lang.String")) { return new VisualizerNormal(o, this, homeScreen, breadcrumb); }
         else if (FieldHelper.isPrimitive(o)) { return this; }
-        else if (o.getClass().isArray()) { return this; /* Handle Array Here */ }
-        else if (o.getClass() == ArrayList.class) { return this; /* Handle ArrayList Here */ }
+        else if (o.getClass().isArray()) { return new VisualizerArray(o, this, homeScreen, breadcrumb); }
+        else if (o.getClass() == ArrayList.class) { return new VisualizerArray(o, this, homeScreen, breadcrumb); }
         else { return new VisualizerNormal(o, this, homeScreen, breadcrumb); }
     }
 
     public static Screen getVisualizer(Object o, Screen homeScreen) {
         if (o.getClass().getName().equals("java.lang.String")) { return new VisualizerNormal(o, homeScreen, homeScreen); }
         else if (FieldHelper.isPrimitive(o)) { return homeScreen; } // This should never happen
-        else if (o.getClass().isArray()) { return homeScreen; /* Handle Array Here */ }
-        else if (o.getClass() == ArrayList.class) { return homeScreen; /* Handle ArrayList Here */ }
+        else if (o.getClass().isArray()) { return new VisualizerArray(o, homeScreen, homeScreen); }
+        else if (o.getClass() == ArrayList.class) { return new VisualizerNormal(o, homeScreen, homeScreen); }
         else { return new VisualizerNormal(o, homeScreen, homeScreen); }
     }
 }
diff --git a/visualizer/VisualizerArray.java b/visualizer/VisualizerArray.java
new file mode 100644
index 0000000..06df0d3
--- /dev/null
+++ b/visualizer/VisualizerArray.java
@@ -0,0 +1,83 @@
+package visualizer;
+
+import java.lang.reflect.Array;
+import java.util.ArrayList;
+import application.Screen;
+import java.awt.Color;
+import java.awt.event.KeyEvent;
+import serializer.helpers.FieldHelper;
+import asciiPanel.AsciiPanel;
+
+public class VisualizerArray extends Visualizer {
+    private ArrayList<Object> values;
+
+    public VisualizerArray(Object obj, Screen lastScreen, Screen homeScreen) {
+        super(obj, lastScreen, homeScreen);
+    }
+    public VisualizerArray(Object obj, Screen lastScreen, Screen homeScreen, ArrayList<Object> breadcrumb) {
+        super(obj, lastScreen, homeScreen, breadcrumb);
+    }
+
+    @Override @SuppressWarnings("unchecked")
+    protected void setupObject(Object obj) {
+        this.obj = obj;
+        values = new ArrayList<Object>();
+        if (obj.getClass().isArray()) {
+            for (int i = 0; i < Array.getLength(obj); i++) {
+                Object o = Array.get(obj, i);
+                values.add(o);
+            }
+        } else {
+            // Assume it is an arraylist
+            ArrayList<Object> arr = (ArrayList<Object>)obj;
+            for (int i = 0; i < arr.size(); i++) {
+                Object o = arr.get(i);
+                values.add(o);
+            }
+        }
+    }
+
+    @Override
+    protected int optionNum() {
+        return values.size();
+    }
+
+    @Override
+    public void print(AsciiPanel terminal) {
+        super.print(terminal);
+        int x = 4;
+        int y = 3;
+        terminal.write(objectName(obj), x, y++, Color.WHITE);
+
+        for (int i = 0; i < values.size(); i++) {
+            Object value = values.get(i);
+            String valueText;
+            if (value == null) {
+                valueText = "null";
+            } else if (FieldHelper.isPrimitive(value)) {
+                valueText = value.toString();
+            } else {
+                valueText = objectName(value);
+            }
+
+            Color c = (i == selection) ? Color.GREEN : Color.WHITE;
+
+            String s = "[" + Integer.toString(i) + "] = " + valueText;
+            if (s.length() > terminal.getWidthInCharacters() - 16) {
+                s = s.substring(0, terminal.getWidthInCharacters() - 16);
+            }
+            terminal.write(s, x, y++, c);
+        }
+    }
+
+    @Override
+    public Screen input(KeyEvent key) {
+        if (key.getKeyCode() == KeyEvent.VK_ENTER) {
+            if (selection < values.size()) {
+                Object v = values.get(selection);
+                return getNextScreen(v);
+            }
+        }
+        return super.input(key);
+    }
+}

commit 87814a70ead6e0fbedc035c4663ede475846ff22
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Wed Nov 1 14:47:22 2023 -0600

    Add visualizer for normal objects

diff --git a/build.bat b/build.bat
index 0d5ff19..058abb4 100644
--- a/build.bat
+++ b/build.bat
@@ -7,4 +7,5 @@ javac ^
     serializer/*.java ^
     serializer/helpers/*.java ^
     network/*.java ^
+    visualizer/*.java ^
     unit_tests/*.java
diff --git a/network/ReceivingScreen.java b/network/ReceivingScreen.java
index 6ec96b2..b85c0df 100644
--- a/network/ReceivingScreen.java
+++ b/network/ReceivingScreen.java
@@ -4,13 +4,14 @@ import java.awt.event.KeyEvent;
 import java.awt.Color;
 import application.Screen;
 import asciiPanel.AsciiPanel;
+import visualizer.Visualizer;
 
 public class ReceivingScreen extends Screen {
     private Screen returnScreen;
     private int selection;
     private Receiver receiver;
     private Object object;
-    private String docName;
+    private String objString;
     private String errorString = null;
     private String[] options = new String[] {
         "Receive Object",
@@ -33,7 +34,7 @@ public class ReceivingScreen extends Screen {
         int x = 4;
         int y = 3;
         if (object != null) {
-            terminal.write("Received Object: " + docName, x, y++, Color.WHITE);
+            terminal.write("Received Object: " + objString, x, y++, Color.WHITE);
         } else {
             terminal.write("No received object", x, y++, Color.RED);
         }
@@ -67,11 +68,12 @@ public class ReceivingScreen extends Screen {
             if (selection == 0) {
                 receiver.start();
                 object = receiver.deserialize();
+                objString = object.getClass().getName();
             } else if (selection == 1) {
                 if (object == null) {
                     errorString = "No objects to inspect.";
                 } else {
-                    // Return an object inspector here
+                    return Visualizer.getVisualizer(object, this);
                 }
                 return this;
             } else if (selection == 2) {
diff --git a/visualizer/Visualizer.java b/visualizer/Visualizer.java
new file mode 100644
index 0000000..f9789e4
--- /dev/null
+++ b/visualizer/Visualizer.java
@@ -0,0 +1,112 @@
+package visualizer;
+
+import java.awt.Color;
+import java.awt.event.KeyEvent;
+import java.util.ArrayList;
+import application.Screen;
+import asciiPanel.AsciiPanel;
+import serializer.helpers.FieldHelper;
+
+public abstract class Visualizer extends Screen {
+    private Screen homeScreen;
+    private Screen lastScreen;
+    private ArrayList<Object> breadcrumb;
+    protected Object obj;
+    protected int selection;
+
+    public Visualizer(Object obj, Screen lastScreen, Screen homeScreen) {
+        this.lastScreen = lastScreen;
+        this.homeScreen = homeScreen;
+        this.breadcrumb = new ArrayList<Object>();
+        setupObject(obj);
+        breadcrumb.add(obj);
+    }
+
+    public Visualizer(Object obj, Screen lastScreen, Screen homeScreen, ArrayList<Object> breadcrumb) {
+        this.lastScreen = lastScreen;
+        this.homeScreen = homeScreen;
+        this.breadcrumb = breadcrumb;
+        setupObject(obj);
+        updateBreadcrumb(obj);
+    }
+
+    protected abstract void setupObject(Object obj);
+    protected abstract int optionNum();
+
+    private void updateBreadcrumb(Object obj) {
+        ArrayList<Object> newBread = new ArrayList<Object>();
+        for (Object o : breadcrumb) {
+            if (o == obj) { break; }
+            newBread.add(o);
+        }
+        newBread.add(obj);
+        breadcrumb = newBread;
+    }
+
+    @Override
+    public String title() { return "Object Visualizer"; }
+
+    @Override
+    public void print(AsciiPanel terminal) {
+        drawBorder(terminal);
+        drawBreadcrumb(terminal);
+
+        int x = 4;
+        int y = 5 + optionNum();
+        
+        Color c = (selection == optionNum()) ? Color.GREEN : Color.WHITE;
+        terminal.write("Back", x, y++, c);
+
+        c = (selection == optionNum() + 1) ? Color.GREEN : Color.WHITE;
+        terminal.write("Home", x, y++, c);
+    }
+
+    private void drawBreadcrumb(AsciiPanel terminal) {
+        int y = terminal.getHeightInCharacters() - 2;
+        for (int i = 0; i < breadcrumb.size(); i++) {
+            Object o = breadcrumb.get(i);
+            String s = objectName(o);
+
+            Color c = (i == breadcrumb.size() - 1) ? Color.WHITE : Color.LIGHT_GRAY;
+            terminal.write(s, terminal.getWidthInCharacters() - s.length() - 3, y, c);
+            y--;
+        }
+    }
+
+    protected String objectName(Object obj) {
+        return obj.getClass().getName() + "@" + Integer.toString(obj.hashCode());
+    }
+
+    @Override
+    public Screen input(KeyEvent key) {
+        if (key.getKeyCode() == KeyEvent.VK_DOWN) {
+            selection++;
+            if (selection >= optionNum() + 2) { selection = 0; }
+        } else if (key.getKeyCode() == KeyEvent.VK_UP) {
+            selection--;
+            if (selection < 0) { selection = optionNum() + 1; }
+        } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
+            if (selection == optionNum()) { return lastScreen; }
+            if (selection == optionNum() + 1) { return homeScreen; }
+        } else if (key.getKeyCode() == KeyEvent.VK_ESCAPE) {
+            return lastScreen;
+        }
+        return this;
+    }
+
+    protected Screen getNextScreen(Object o) {
+        if (o.getClass().getName().equals("java.lang.String")) { return new VisualizerNormal(o, this, homeScreen, breadcrumb); }
+        else if (FieldHelper.isPrimitive(o)) { return this; }
+        else if (o.getClass().isArray()) { return this; /* Handle Array Here */ }
+        else if (o.getClass() == ArrayList.class) { return this; /* Handle ArrayList Here */ }
+        else { return new VisualizerNormal(o, this, homeScreen, breadcrumb); }
+    }
+
+    public static Screen getVisualizer(Object o, Screen homeScreen) {
+        if (o.getClass().getName().equals("java.lang.String")) { return new VisualizerNormal(o, homeScreen, homeScreen); }
+        else if (FieldHelper.isPrimitive(o)) { return homeScreen; } // This should never happen
+        else if (o.getClass().isArray()) { return homeScreen; /* Handle Array Here */ }
+        else if (o.getClass() == ArrayList.class) { return homeScreen; /* Handle ArrayList Here */ }
+        else { return new VisualizerNormal(o, homeScreen, homeScreen); }
+    }
+}
diff --git a/visualizer/VisualizerNormal.java b/visualizer/VisualizerNormal.java
new file mode 100644
index 0000000..796c2e0
--- /dev/null
+++ b/visualizer/VisualizerNormal.java
@@ -0,0 +1,75 @@
+package visualizer;
+
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.awt.event.KeyEvent;
+import java.awt.Color;
+import asciiPanel.AsciiPanel;
+import application.Screen;
+import serializer.helpers.FieldHelper;
+
+public class VisualizerNormal extends Visualizer {
+    private ArrayList<Field> fields;
+    private ArrayList<Object> values;
+
+    public VisualizerNormal(Object obj, Screen lastScreen, Screen homeScreen) {
+        super(obj, lastScreen, homeScreen);
+    }
+    public VisualizerNormal(Object obj, Screen lastScreen, Screen homeScreen, ArrayList<Object> breadcrumb) {
+        super(obj, lastScreen, homeScreen, breadcrumb);
+    }
+
+    public int optionNum() { return fields.size(); }
+
+    public void setupObject(Object obj) {
+        this.obj = obj;
+        fields = new ArrayList<Field>();
+        values = new ArrayList<Object>();
+        for (Field f : FieldHelper.findFields(obj.getClass())) {
+            try {
+                fields.add(f);
+                values.add(f.get(obj));
+            } catch(IllegalAccessException e) { continue; }
+        }
+    }
+
+    @Override
+    public void print(AsciiPanel terminal) {
+        super.print(terminal);
+        int x = 4;
+        int y = 3;
+        terminal.write(objectName(obj), x, y++, Color.WHITE);
+
+        for (int i = 0; i < fields.size(); i++) {
+            String name = fields.get(i).getName();
+            Object value = values.get(i);
+            String valueText;
+            if (value == null) {
+                valueText = "null";
+            } else if (FieldHelper.isPrimitive(value)) {
+                valueText = value.toString();
+            } else {
+                valueText = objectName(value);
+            }
+
+            Color c = (i == selection) ? Color.GREEN : Color.WHITE;
+
+            String s = name + " = " + valueText;
+            if (s.length() > terminal.getWidthInCharacters() - 16) {
+                s = s.substring(0, terminal.getWidthInCharacters() - 16);
+            }
+            terminal.write(s, x, y++, c);
+        }
+    }
+
+    @Override
+    public Screen input(KeyEvent key) {
+        if (key.getKeyCode() == KeyEvent.VK_ENTER) {
+            if (selection < fields.size()) {
+                Object v = values.get(selection);
+                return getNextScreen(v);
+            }
+        }
+        return super.input(key);
+    }
+}

commit 211fc393217cb80db4be4fcf6f4e405886b79ac9
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Wed Nov 1 12:45:12 2023 -0600

    Implement deserialization

diff --git a/.gitignore b/.gitignore
index 6b468b6..314856e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1 +1,2 @@
 *.class
+.VSCodeCounter/
diff --git a/application/MainScreen.java b/application/MainScreen.java
index 71d36d2..3e8f5e3 100644
--- a/application/MainScreen.java
+++ b/application/MainScreen.java
@@ -4,6 +4,7 @@ import java.awt.Color;
 import java.awt.event.KeyEvent;
 import asciiPanel.AsciiPanel;
 import object_creator.ObjectCreator;
+import network.ReceivingScreen;
 import network.SendingScreen;
 
 public class MainScreen extends Screen {
@@ -62,11 +63,11 @@ public class MainScreen extends Screen {
                 case 1:
                     return new SendingScreen(this, objectCreator.getObjects());
                 case 2:
+                    return new ReceivingScreen(this);
                 case 3:
                     System.exit(0);
             }
         }
         return this;
     }
-    
 }
diff --git a/deserializer/Deserializer.java b/deserializer/Deserializer.java
new file mode 100644
index 0000000..10a5c48
--- /dev/null
+++ b/deserializer/Deserializer.java
@@ -0,0 +1,223 @@
+package deserializer;
+
+import org.jdom2.DataConversionException;
+import org.jdom2.Document;
+import org.jdom2.Element;
+import java.util.HashMap;
+import java.util.List;
+import java.util.ArrayList;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Array;
+import java.lang.reflect.Field;
+
+@SuppressWarnings("rawtypes")
+public class Deserializer {
+    public HashMap<Integer, Object> objects;
+
+    public Object deserialize(Document document) {
+        Object o = null;
+        objects = new HashMap<Integer, Object>();
+        mapElements(document);
+
+        for (Element e : document.getRootElement().getChildren()) {
+            if (e.getAttribute("length") != null) {
+                deserializeArray(e);
+            } else if (e.getAttribute("size") != null) {
+                deserializeArrayList(e);
+            } else {
+                deserializeNormalObject(e);
+            }
+        }
+
+        try {
+            int id = document.getRootElement().getChildren().get(0).getAttribute("id").getIntValue();
+            o = objects.get(id);
+        } catch(DataConversionException err) {
+            System.out.println(err);
+        } catch(IndexOutOfBoundsException err) { }
+        return o;
+    }
+
+    @SuppressWarnings("unchecked")
+    private void mapElements(Document document) {
+        for (Element e : document.getRootElement().getChildren()) {
+            String classString = e.getAttribute("class").getValue();
+            try {
+                Class c = Class.forName(classString);
+                int id = e.getAttribute("id").getIntValue();
+                if (c.isArray()) {
+                    // Add an array of correct length full of default values to objects
+                    int length = e.getAttribute("length").getIntValue();
+                    Class type = c.getComponentType();
+                    Object o = Array.newInstance(type, length);
+                    objects.put(id, o);
+                } else {
+                    // Add the object by default constructor to objects
+                    Constructor con = c.getDeclaredConstructor(new Class[0]);
+                    con.setAccessible(true);
+                    Object o = con.newInstance();
+                    objects.put(id, o);
+                }
+            } catch(Exception err) {
+                System.out.println(err);
+                return;
+            }
+        }
+    }
+
+    private void deserializeNormalObject(Element e) {
+        int id;
+        try {
+            id = e.getAttribute("id").getIntValue();
+        } catch(DataConversionException err) {
+            System.out.println(err);
+            return;
+        }
+
+        for (Element field : e.getChildren("field")) {
+            // Read name and class from attributes
+            String fieldName = field.getAttributeValue("name");
+            String declaringClass = field.getAttributeValue("declaringclass");
+
+            // Get a copy of the Class and Field
+            Class c = null;
+            try {
+                c = Class.forName(declaringClass);
+            } catch (ClassNotFoundException err) {
+                System.out.println(err);
+                continue;
+            }
+
+            Field f = null;
+            try {
+                f = c.getDeclaredField(fieldName);
+                f.setAccessible(true);
+            } catch(NoSuchFieldException err) {
+                System.out.println(err);
+                continue;
+            }
+
+            // Set the value of the field if primitive, otherwise point it to the object reference by ID
+            if (field.getChildren("value").size() > 0) {
+                String text = field.getChildren("value").get(0).getText();
+                Object value = wrapObject(text, f.getType());
+                try {
+                    f.set(objects.get(id), value);
+                } catch(IllegalAccessException err) {
+                    System.out.println(err);
+                    continue;
+                }
+            } else if (field.getChildren("reference").size() > 0) {
+                String value = field.getChildren("reference").get(0).getTextTrim();
+                try {
+                    int objId = Integer.valueOf(value);
+                    f.set(objects.get(id), objects.get(objId));
+                } catch(NumberFormatException err) {
+                    System.out.println(err);
+                    continue;
+                } catch(IllegalAccessException err) {
+                    System.out.println(err);
+                    continue;
+                }
+            }
+        }
+    }
+
+    private void deserializeArray(Element e) {
+        int id;
+        int length;
+        try {
+            id = e.getAttribute("id").getIntValue();
+            length = e.getAttribute("length").getIntValue();
+        } catch(DataConversionException err) {
+            System.out.println(err);
+            return;
+        }
+
+        if (e.getChildren("value").size() > 0) {
+            List<Element> children = e.getChildren("value");
+            for (int i = 0; i < length; i++) {
+                String text = children.get(i).getText();
+                Object value = wrapObject(text, objects.get(id).getClass().getComponentType());
+                try {
+                    Array.set(objects.get(id), i, value);
+                } catch(IllegalArgumentException err) {
+                    System.out.println(err);
+                    continue;
+                }
+            }
+        } else if (e.getChildren("reference").size() > 0) {
+            List<Element> children = e.getChildren("reference");
+            for (int i = 0; i < length; i++) {
+                String text = children.get(i).getTextTrim();
+                try {
+                    int objId = Integer.valueOf(text);
+                    Array.set(objects.get(id), i, objects.get(objId));
+                } catch(NumberFormatException err) {
+                    System.out.println(err);
+                    continue;
+                } catch(IllegalArgumentException err) {
+                    System.out.println(err);
+                    continue;
+                }
+            }
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    private void deserializeArrayList(Element e) {
+        int id;
+        int size;
+        ArrayList o;
+        try {
+            id = e.getAttribute("id").getIntValue();
+            size = e.getAttribute("size").getIntValue();
+            o = (ArrayList)objects.get(id);
+        } catch(DataConversionException err) {
+            System.out.println(err);
+            return;
+        }
+
+        if (e.getChildren("value").size() > 0) {
+            List<Element> children = e.getChildren("value");
+            for (int i = 0; i < size; i++) {
+                String text = children.get(i).getText();
+                Object value = wrapObject(text, objects.get(id).getClass().getComponentType());
+                try {
+                    o.add(value);
+                } catch(IllegalArgumentException err) {
+                    System.out.println(err);
+                    continue;
+                }
+            }
+        } else if (e.getChildren("reference").size() > 0) {
+            List<Element> children = e.getChildren("reference");
+            for (int i = 0; i < size; i++) {
+                String text = children.get(i).getTextTrim();
+                try {
+                    int objId = Integer.valueOf(text);
+                    o.add(objects.get(objId));
+                } catch(NumberFormatException err) {
+                    System.out.println(err);
+                    continue;
+                } catch(IllegalArgumentException err) {
+                    System.out.println(err);
+                    continue;
+                }
+            }
+        }
+    }
+
+    private Object wrapObject(String value, Class c) {
+        if (c.getName().equals("boolean")) { return Boolean.valueOf(value); }
+        else if (c.getName().equals("char")) { return value.toCharArray()[0]; }
+        else if (c.getName().equals("byte")) { return Byte.valueOf(value); }
+        else if (c.getName().equals("short")) { return Short.valueOf(value); }
+        else if (c.getName().equals("int")) { return Integer.valueOf(value); }
+        else if (c.getName().equals("long")) { return Long.valueOf(value); }
+        else if (c.getName().equals("float")) { return Float.valueOf(value); }
+        else if (c.getName().equals("double")) { return Double.valueOf(value); }
+        else if (value.equals("null")) { return null; }
+        else { return value; }
+    }
+}
diff --git a/network/Receiver.java b/network/Receiver.java
index ee74e39..b841f25 100644
--- a/network/Receiver.java
+++ b/network/Receiver.java
@@ -11,21 +11,26 @@ import org.jdom2.JDOMException;
 import org.jdom2.input.SAXBuilder;
 import org.jdom2.output.XMLOutputter;
 import org.jdom2.output.Format;
+import deserializer.Deserializer;
 
 public class Receiver {
     private static final int port = 6666;
     private ServerSocket server;
+    private Document document;
+    public boolean print;
     public ArrayList<String> messages;
 
     public Receiver() {
         messages = new ArrayList<String>();
     }
 
-    public static void main(String[] args) {
-        new Receiver().start();
+    public Receiver(boolean printOutput) {
+        messages = new ArrayList<String>();
+        print = printOutput;
     }
 
     public void start() {
+        // Start the socket
         try {
             server = new ServerSocket(port);
         } catch(IOException e) {
@@ -44,12 +49,12 @@ public class Receiver {
             return;
         }
 
+        // Receive the serialized document
         BufferedReader in;
-        Document doc;
         try {
             in = new BufferedReader(new InputStreamReader(sender.getInputStream()));
             SAXBuilder saxBuilder = new SAXBuilder();
-            doc = saxBuilder.build(in);
+            document = saxBuilder.build(in);
             messages.add("Document received!");
         } catch(IOException e) {
             System.out.println(e);
@@ -61,6 +66,7 @@ public class Receiver {
             return;
         }
 
+        // Close the sockets
         try {
             server.close();
             sender.close();
@@ -70,10 +76,15 @@ public class Receiver {
             messages.add("Warning: Failed to close sockets.");
         }
 
-        XMLOutputter xmlOutputter = new XMLOutputter(Format.getPrettyFormat());
-        String xmlString = xmlOutputter.outputString(doc);
-        System.out.println(xmlString);
+        if (print) {
+            XMLOutputter xmlOutputter = new XMLOutputter(Format.getPrettyFormat());
+            String xmlString = xmlOutputter.outputString(document);
+            System.out.println(xmlString);
+        }
+    }
 
-        // Deserialize here
+    public Object deserialize() {
+        Object o = new Deserializer().deserialize(document);
+        return o;
     }
 }
diff --git a/network/ReceivingScreen.java b/network/ReceivingScreen.java
new file mode 100644
index 0000000..6ec96b2
--- /dev/null
+++ b/network/ReceivingScreen.java
@@ -0,0 +1,96 @@
+package network;
+
+import java.awt.event.KeyEvent;
+import java.awt.Color;
+import application.Screen;
+import asciiPanel.AsciiPanel;
+
+public class ReceivingScreen extends Screen {
+    private Screen returnScreen;
+    private int selection;
+    private Receiver receiver;
+    private Object object;
+    private String docName;
+    private String errorString = null;
+    private String[] options = new String[] {
+        "Receive Object",
+        "Object Inspector",
+        "Back to Main Menu"
+    };
+
+    public ReceivingScreen(Screen returnScreen) {
+        this.returnScreen = returnScreen;
+        this.receiver = new Receiver();
+    }
+
+    @Override
+    public String title() { return "Receiving"; }
+
+    @Override
+    public void print(AsciiPanel terminal) {
+        drawBorder(terminal);
+
+        int x = 4;
+        int y = 3;
+        if (object != null) {
+            terminal.write("Received Object: " + docName, x, y++, Color.WHITE);
+        } else {
+            terminal.write("No received object", x, y++, Color.RED);
+        }
+
+        terminal.write("Hostname: localhost", x, y++);
+        terminal.write("Port: 6666", x, y++);
+        y++;
+
+        for (int i = 0; i < options.length; i++) {
+            Color c = (i == selection) ? Color.GREEN : Color.WHITE;
+            terminal.write(options[i], x, y++, c);
+        }
+
+        printMessages(terminal, x, y + 2);
+
+        if (errorString != null) {
+            terminal.write("Error: " + errorString, 4, terminal.getHeightInCharacters() - 3, Color.RED);
+        }
+    }
+
+    @Override
+    public Screen input(KeyEvent key) {
+        if (key.getKeyCode() == KeyEvent.VK_DOWN) {
+            selection++;
+            if (selection >= options.length) { selection = 0; }
+        } else if (key.getKeyCode() == KeyEvent.VK_UP) {
+            selection--;
+            if (selection < 0) { selection = options.length-1; }
+        } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
+            errorString = null;
+            if (selection == 0) {
+                receiver.start();
+                object = receiver.deserialize();
+            } else if (selection == 1) {
+                if (object == null) {
+                    errorString = "No objects to inspect.";
+                } else {
+                    // Return an object inspector here
+                }
+                return this;
+            } else if (selection == 2) {
+                return returnScreen;
+            }
+        }
+        return this;
+    }
+
+    private void printMessages(AsciiPanel terminal, int x, int y) {
+        while (receiver.messages.size() > 8) {
+            receiver.messages.remove(1);
+        }
+        for (int i = 0; i < receiver.messages.size(); i++) {
+            String m = receiver.messages.get(i);
+            Color c = Color.LIGHT_GRAY;
+            if (m.startsWith("Error")) { c = Color.RED; }
+            else if (m.startsWith("Warning")) { c = Color.YELLOW; }
+            terminal.write(m, x, y + i, c);
+        }
+    }
+}
diff --git a/network/SendingScreen.java b/network/SendingScreen.java
index 184bc76..e180e52 100644
--- a/network/SendingScreen.java
+++ b/network/SendingScreen.java
@@ -3,13 +3,12 @@ package network;
 import java.util.ArrayList;
 import java.awt.Color;
 import java.awt.event.KeyEvent;
-import org.jdom2.Document;
 import asciiPanel.AsciiPanel;
 import application.Screen;
 import serializer.Serializer;
 import object_creator.classes.ObjectType;
 import object_creator.helpers.ObjectSelectorSender;
-
+import org.jdom2.Document;
 import org.jdom2.output.Format;
 import org.jdom2.output.XMLOutputter;
 
diff --git a/serializer/Serializer.java b/serializer/Serializer.java
index e51712e..479de2e 100644
--- a/serializer/Serializer.java
+++ b/serializer/Serializer.java
@@ -2,6 +2,7 @@ package serializer;
 
 import java.lang.reflect.Array;
 import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import org.jdom2.Document;
 import org.jdom2.Element;
@@ -17,8 +18,14 @@ public class Serializer {
 
         objects = new ObjectMap();
         objects.populate(obj);
+
+        // Ensure that the given object is always the first one serialized
+        Element e = serializeObject(obj);
+        root.addContent(e);
+
         for (Integer i : objects.getObjects().keySet()) {
-            Element e = serializeObject(objects.get(i));
+            if (i == obj.hashCode()) { continue; }
+            e = serializeObject(objects.get(i));
             root.addContent(e);
         }
 
@@ -46,6 +53,7 @@ public class Serializer {
         Field[] fields = FieldHelper.findFields(obj.getClass());
         if (fields.length == 0) { return; }
         for(Field f : fields) {
+            if (Modifier.toString(f.getModifiers()).contains("static")) { continue; }
             Object value;
             try {
                 value = f.get(obj);
diff --git a/serializer/helpers/FieldHelper.java b/serializer/helpers/FieldHelper.java
index 4d53d34..82b97b9 100644
--- a/serializer/helpers/FieldHelper.java
+++ b/serializer/helpers/FieldHelper.java
@@ -5,7 +5,7 @@ import java.lang.reflect.Modifier;
 
 @SuppressWarnings("rawtypes")
 public class FieldHelper {
-    private static final Class[] wrapperClasses = new Class[] {
+    public static final Class[] wrapperClasses = new Class[] {
         Boolean.class,
         Character.class,
         Byte.class,
diff --git a/unit_tests/TestAll.java b/unit_tests/TestAll.java
index f5d518b..c6e5254 100644
--- a/unit_tests/TestAll.java
+++ b/unit_tests/TestAll.java
@@ -8,5 +8,7 @@ import org.junit.runners.Suite.SuiteClasses;
 @SuiteClasses({
     TestMap.class,
     TestSerializer.class,
+    TestNetwork.class,
+    TestDeserializer.class
 })
 public class TestAll { }
diff --git a/unit_tests/TestDeserializer.java b/unit_tests/TestDeserializer.java
new file mode 100644
index 0000000..d2c69a0
--- /dev/null
+++ b/unit_tests/TestDeserializer.java
@@ -0,0 +1,226 @@
+package unit_tests;
+
+import org.junit.Test;
+import org.junit.Before;
+import static org.junit.Assert.assertEquals;
+import org.jdom2.Document;
+import java.util.ArrayList;
+import serializer.Serializer;
+import deserializer.Deserializer;
+import object_creator.classes.*;
+
+public class TestDeserializer {
+    private Serializer serializer;
+    private Deserializer deserializer;
+    
+    @Before
+    public void setup() {
+        this.serializer = new Serializer();
+        this.deserializer = new Deserializer();
+    }
+
+    private void assertSamePrimitives(PrimitiveObject o, PrimitiveObject p) {
+        assertEquals(o.name, p.name);
+        assertEquals(o.b, p.b);
+        assertEquals(o.c, p.c);
+        assert(o.d == p.d);
+        assert(o.f == p.f);
+        assertEquals(o.i, p.i);
+        assertEquals(o.j, p.j);
+        assertEquals(o.s, p.s);
+        assertEquals(o.z, p.z);
+    }
+
+    @Test
+    public void TestPrimitive() {
+        PrimitiveObject o = new PrimitiveObject();
+        o.name = "Test";
+        o.b = 49;
+        o.c = '2';
+        o.d = 3.0;
+        o.f = 4.0f;
+        o.i = 5;
+        o.j = 6;
+        o.s = 7;
+        o.z = true;
+
+        Document d = serializer.serialize(o);
+        Object r = deserializer.deserialize(d);
+
+        assertEquals(PrimitiveObject.class, r.getClass());
+        PrimitiveObject p = (PrimitiveObject)r;
+
+        assertSamePrimitives(o, p);
+    }
+
+    @Test
+    public void TestReference() {
+        PrimitiveObject a = new PrimitiveObject();
+        a.name = "Test";
+        a.b = 49;
+        a.c = '2';
+        a.d = 3.0;
+        a.f = 4.0f;
+        a.i = 5;
+        a.j = 6;
+        a.s = 7;
+        a.z = true;
+        PrimitiveObject b = new PrimitiveObject();
+        b.c = ' ';
+        PrimitiveObject c = new PrimitiveObject();
+        c.c = ' ';
+        ReferenceObject o = new ReferenceObject();
+        o.A = a;
+        o.B = b;
+        o.C = c;
+
+        Document d = serializer.serialize(o);
+        Object r = deserializer.deserialize(d);
+
+        assertEquals(ReferenceObject.class, r.getClass());
+        ReferenceObject ro = (ReferenceObject)r;
+        assertSamePrimitives(a, (PrimitiveObject)ro.A);
+        assertSamePrimitives(b, (PrimitiveObject)ro.B);
+        assertSamePrimitives(c, (PrimitiveObject)ro.C);
+    }
+
+    @Test
+    public void TestPrimitiveArray() {
+        PrimitiveArray o = new PrimitiveArray();
+        int[] newInts = new int[] { 0, 1, 2 };
+        o.ints = newInts;
+        double[] newDoubles = new double[] { 3.3, 4.4, 5.5 };
+        o.doubles = newDoubles;
+        boolean[] newBools = new boolean[] { true, false };
+        o.bools = newBools;
+
+        Document d = serializer.serialize(o);
+        Object r = deserializer.deserialize(d);
+
+        assertEquals(PrimitiveArray.class, r.getClass());
+        PrimitiveArray a = (PrimitiveArray)r;
+        assert(newInts.equals(a.ints));
+        assert(newDoubles.equals(a.doubles));
+        assert(newBools.equals(a.bools));
+    }
+
+    @Test
+    public void TestReferenceArray() {
+        PrimitiveObject a = new PrimitiveObject();
+        a.name = "Test";
+        a.b = 49;
+        a.c = '2';
+        a.d = 3.0;
+        a.f = 4.0f;
+        a.i = 5;
+        a.j = 6;
+        a.s = 7;
+        a.z = true;
+        PrimitiveObject b = new PrimitiveObject();
+        b.c = ' ';
+        PrimitiveObject c = new PrimitiveObject();
+        c.c = ' ';
+
+        ObjectType[] objs = new ObjectType[] { b, a, c };
+        ReferenceArray o = new ReferenceArray();
+        o.objects = objs;
+
+        Document d = serializer.serialize(o);
+        Object r = deserializer.deserialize(d);
+
+        assertEquals(ReferenceArray.class, r.getClass());
+        ReferenceArray arr = (ReferenceArray)r;
+
+        for (int i = 0; i < objs.length; i++) {
+            assertSamePrimitives((PrimitiveObject)objs[i], (PrimitiveObject)arr.objects[i]);
+        }
+    }
+
+    @Test
+    public void TestReferenceList() {
+        PrimitiveObject a = new PrimitiveObject();
+        a.name = "Test";
+        a.b = 49;
+        a.c = '2';
+        a.d = 3.0;
+        a.f = 4.0f;
+        a.i = 5;
+        a.j = 6;
+        a.s = 7;
+        a.z = true;
+        PrimitiveObject b = new PrimitiveObject();
+        b.c = ' ';
+        PrimitiveObject c = new PrimitiveObject();
+        c.c = ' ';
+
+        ArrayList<ObjectType> objs = new ArrayList<ObjectType>();
+        objs.add(b);
+        objs.add(c);
+        objs.add(a);
+        ReferenceList o = new ReferenceList();
+        o.objects = objs;
+
+        Document d = serializer.serialize(o);
+        Object r = deserializer.deserialize(d);
+
+        assertEquals(ReferenceList.class, r.getClass());
+        ReferenceList arr = (ReferenceList)r;
+
+        for (int i = 0; i < objs.size(); i++) {
+            assertSamePrimitives((PrimitiveObject)objs.get(i), (PrimitiveObject)arr.objects.get(i));
+        }
+    }
+
+    @Test
+    public void TestDeserialization() {
+        PrimitiveObject a = new PrimitiveObject();
+        a.name = "Test";
+        a.b = 49;
+        a.c = '2';
+        a.d = 3.0;
+        a.f = 4.0f;
+        a.i = 5;
+        a.j = 6;
+        a.s = 7;
+        a.z = true;
+
+        ReferenceObject b = new ReferenceObject();
+        b.A = a;
+        b.B = a;
+        b.C = null;
+
+        PrimitiveArray c = new PrimitiveArray();
+        int[] newInts = new int[] { 0, 1, 2 };
+        c.ints = newInts;
+        double[] newDoubles = new double[] { 3.3, 4.4, 5.5 };
+        c.doubles = newDoubles;
+        boolean[] newBools = new boolean[] { true, false };
+        c.bools = newBools;
+
+        ReferenceArray d = new ReferenceArray();
+        ObjectType[] objArray = new ObjectType[] { a, b, c };
+        d.objects = objArray;
+
+        ReferenceList e = new ReferenceList();
+        ArrayList<ObjectType> objList = new ArrayList<ObjectType>();
+        objList.add(a);
+        objList.add(b);
+        objList.add(c);
+        objList.add(d);
+        objList.add(e);
+        e.objects = objList;
+
+        Document doc = serializer.serialize(e);
+        Object r = deserializer.deserialize(doc);
+        assertEquals(ReferenceList.class, r.getClass());
+    }
+
+    @Test
+    public void TestString() {
+        String s = "Hello, World!";
+        Document doc = serializer.serialize(s);
+        Object r = deserializer.deserialize(doc);
+        assertEquals("java.lang.String", r.getClass().getName());
+        assertEquals(s, (String)r);
+    }
+}
diff --git a/unit_tests/TestNetwork.java b/unit_tests/TestNetwork.java
new file mode 100644
index 0000000..322a04b
--- /dev/null
+++ b/unit_tests/TestNetwork.java
@@ -0,0 +1,68 @@
+package unit_tests;
+
+import org.junit.Test;
+import org.junit.Before;
+import static org.junit.Assert.fail;
+import org.jdom2.Document;
+import org.jdom2.Element;
+import network.Receiver;
+import network.Sender;
+
+public class TestNetwork {
+    private clientThread sender;
+    private serverThread receiver;
+
+    @Before
+    public void setup() {
+        this.sender = new clientThread();
+        this.receiver = new serverThread();
+    }
+
+    private Document blankDoc() {
+        Element root = new Element("serialized");
+        return new Document(root);
+    }
+
+    @Test
+    public void testConection() {
+        sender.toSend = blankDoc();
+        Thread client = new Thread(sender);
+        Thread server = new Thread(receiver);
+        server.start();
+        client.start();
+        try {
+            client.join();
+            server.join();
+        } catch(InterruptedException e) {
+            fail();
+        }
+    }
+
+    private class serverThread extends Thread {
+        private Receiver receiver;
+
+        public serverThread() {
+            receiver = new Receiver(false);
+        }
+
+        @Override
+        public void run() {
+            receiver.start();
+            receiver.deserialize();
+        }
+    }
+
+    private class clientThread extends Thread {
+        private Sender sender;
+        public Document toSend;
+
+        public clientThread() {
+            sender = new Sender();
+        }
+
+        @Override
+        public void run() {
+            sender.sendDocument(toSend);
+        }
+    }
+}
diff --git a/unit_tests/TestSerializer.java b/unit_tests/TestSerializer.java
index f4458c5..c6b0a10 100644
--- a/unit_tests/TestSerializer.java
+++ b/unit_tests/TestSerializer.java
@@ -7,9 +7,6 @@ import static org.junit.Assert.fail;
 import java.util.ArrayList;
 import org.jdom2.Document;
 import org.jdom2.Element;
-import org.jdom2.output.XMLOutputter;
-import org.jdom2.output.Format;
-import java.io.IOException;
 import serializer.Serializer;
 import object_creator.classes.*;
 
@@ -36,17 +33,6 @@ public class TestSerializer {
         return "";
     }
 
-    /* For testing, delete before final commit */
-    private void printDocument(Document doc) {
-        try {
-            XMLOutputter xmlOutput = new XMLOutputter();
-            xmlOutput.setFormat(Format.getPrettyFormat());
-            xmlOutput.output(doc, System.out); 
-        } catch(IOException e) {
-            e.printStackTrace();
-        }
-    }
-
     @Test
     public void TestHeader() {
         PrimitiveObject a = new PrimitiveObject();

commit 1560d405e2e81a8dde572fe6ad322d29a716e082
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Mon Oct 30 13:41:53 2023 -0600

    Add screen to serialize objects and send them to receiver

diff --git a/application/MainScreen.java b/application/MainScreen.java
index dba4044..71d36d2 100644
--- a/application/MainScreen.java
+++ b/application/MainScreen.java
@@ -4,6 +4,7 @@ import java.awt.Color;
 import java.awt.event.KeyEvent;
 import asciiPanel.AsciiPanel;
 import object_creator.ObjectCreator;
+import network.SendingScreen;
 
 public class MainScreen extends Screen {
     private ObjectCreator objectCreator;
@@ -59,6 +60,7 @@ public class MainScreen extends Screen {
                 case 0:
                     return objectCreator;
                 case 1:
+                    return new SendingScreen(this, objectCreator.getObjects());
                 case 2:
                 case 3:
                     System.exit(0);
diff --git a/network/Sender.java b/network/Sender.java
index 9bb7f88..68e692e 100644
--- a/network/Sender.java
+++ b/network/Sender.java
@@ -22,6 +22,7 @@ public class Sender {
         Socket socket = null;
         try {
             socket = new Socket(host, port);
+            messages.add("Opened socket at " + host + ":" + Integer.toString(port));
         } catch (IOException e) {
             System.out.println(e);
             messages.add("Error: Could not open socket.");
diff --git a/network/SendingScreen.java b/network/SendingScreen.java
new file mode 100644
index 0000000..184bc76
--- /dev/null
+++ b/network/SendingScreen.java
@@ -0,0 +1,114 @@
+package network;
+
+import java.util.ArrayList;
+import java.awt.Color;
+import java.awt.event.KeyEvent;
+import org.jdom2.Document;
+import asciiPanel.AsciiPanel;
+import application.Screen;
+import serializer.Serializer;
+import object_creator.classes.ObjectType;
+import object_creator.helpers.ObjectSelectorSender;
+
+import org.jdom2.output.Format;
+import org.jdom2.output.XMLOutputter;
+
+public class SendingScreen extends Screen {
+    private Screen returnScreen;
+    private int selection;
+    private ArrayList<ObjectType> objects;
+    private Sender sender;
+    private String errorString = null;
+    private Document doc;
+    private String docName;
+    private String[] options = new String[] {
+        "Serialize Object",
+        "Send Object to Receiver",
+        "Back to Main Menu"
+    };
+
+    public SendingScreen(Screen returnScreen, ArrayList<ObjectType> objects) {
+        this.returnScreen = returnScreen;
+        this.sender = new Sender();
+        this.objects = objects;
+    }
+
+    @Override
+    public String title() { return "Serialization"; }
+
+    @Override
+    public void print(AsciiPanel terminal) {
+        super.drawBorder(terminal);
+
+        int x = 4;
+        int y = 3;
+        if (doc != null) {
+            terminal.write("Serialized Object: " + docName, x, y++, Color.WHITE);
+        } else {
+            terminal.write("No serialized object", x, y++, Color.RED);
+        }
+
+        terminal.write("Hostname: localhost", x, y++);
+        terminal.write("Port: 6666", x, y++);
+        y++;
+
+        for (int i = 0; i < options.length; i++) {
+            Color c = (i == selection) ? Color.GREEN : Color.WHITE;
+            terminal.write(options[i], x, y++, c);
+        }
+
+        printMessages(terminal, x, y + 2);
+
+        if (errorString != null) {
+            terminal.write("Error: " + errorString, 4, terminal.getHeightInCharacters() - 3, Color.RED);
+        }
+    }
+
+    @Override
+    public Screen input(KeyEvent key) {
+        if (key.getKeyCode() == KeyEvent.VK_DOWN) {
+            selection++;
+            if (selection >= options.length) { selection = 0; }
+        } else if (key.getKeyCode() == KeyEvent.VK_UP) {
+            selection--;
+            if (selection < 0) { selection = options.length-1; }
+        } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
+            errorString = null;
+            if (selection == 0) {
+                return new ObjectSelectorSender(this, objects);
+            } else if (selection == 1) {
+                if (doc == null) {
+                    errorString = "Cannot send an object without serializing it first.";
+                } else {
+                    sender.sendDocument(doc);
+                }
+                return this;
+            } else if (selection == 2) {
+                return returnScreen;
+            }
+        }
+        return this;
+    }
+
+    public void serializeObject(ObjectType o) {
+        docName = o.name;
+        doc = new Serializer().serialize(o);
+
+        XMLOutputter xmlOutputter = new XMLOutputter(Format.getPrettyFormat());
+        String xmlString = xmlOutputter.outputString(doc);
+        System.out.println(xmlString);
+    }
+
+    private void printMessages(AsciiPanel terminal, int x, int y) {
+        while (sender.messages.size() > 8) {
+            sender.messages.remove(1);
+        }
+        for (int i = 0; i < sender.messages.size(); i++) {
+            String m = sender.messages.get(i);
+            Color c = Color.LIGHT_GRAY;
+            if (m.startsWith("Error")) { c = Color.RED; }
+            else if (m.startsWith("Warning")) { c = Color.YELLOW; }
+            terminal.write(m, x, y + i, c);
+        }
+    }
+}
diff --git a/object_creator/helpers/ObjectSelectorSender.java b/object_creator/helpers/ObjectSelectorSender.java
new file mode 100644
index 0000000..91a65b4
--- /dev/null
+++ b/object_creator/helpers/ObjectSelectorSender.java
@@ -0,0 +1,26 @@
+package object_creator.helpers;
+
+import java.util.ArrayList;
+import java.awt.event.KeyEvent;
+import application.Screen;
+import network.SendingScreen;
+import object_creator.classes.ObjectType;
+
+public class ObjectSelectorSender extends ObjectSelector {
+    private SendingScreen sender;
+
+    public ObjectSelectorSender(SendingScreen sender, ArrayList<ObjectType> objects) {
+        super(null, sender, objects);
+        this.sender = sender;
+    }
+
+    @Override
+    public Screen input(KeyEvent key) {
+        if (key.getKeyCode() == KeyEvent.VK_ENTER) {
+            if (objects.size() > 0)
+            sender.serializeObject(objects.get(selection));
+            return prevScreen;
+        }
+        return super.input(key);
+    }
+}

commit 5b60ef1a759f3de57fe2c0317d7c3173dce975cc
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Mon Oct 30 12:38:45 2023 -0600

    New main menu

diff --git a/application/Main.java b/application/Main.java
index d70f300..7d5b43d 100644
--- a/application/Main.java
+++ b/application/Main.java
@@ -1,6 +1,5 @@
 package application;
 
-import object_creator.ObjectCreator;
 import java.awt.event.KeyEvent;
 import java.awt.event.KeyListener;
 import javax.swing.JFrame;
@@ -17,7 +16,7 @@ public class Main extends JFrame implements KeyListener {
         pack();
         addKeyListener(this);
 
-        screen = new ObjectCreator();
+        screen = new MainScreen();
         repaint();
     }
 
diff --git a/application/MainScreen.java b/application/MainScreen.java
new file mode 100644
index 0000000..dba4044
--- /dev/null
+++ b/application/MainScreen.java
@@ -0,0 +1,70 @@
+package application;
+
+import java.awt.Color;
+import java.awt.event.KeyEvent;
+import asciiPanel.AsciiPanel;
+import object_creator.ObjectCreator;
+
+public class MainScreen extends Screen {
+    private ObjectCreator objectCreator;
+    private int selection;
+    private String[] options = new String[] {
+        "Object Creator",
+        "Serialize",
+        "Receive Object",
+        "Exit"
+    };
+    private String[] descriptions = new String[] {
+        "Library of objects that can be created and edited",
+        "Select an object to serialize and send it to another Serializer",
+        "Receive a serialized object and deserialize it",
+        ""
+    };
+
+    public MainScreen() {
+        objectCreator = new ObjectCreator(this);
+    }
+
+    @Override
+    public String title() { return "CPSC 501 - Serializer"; }
+
+    @Override
+    public void print(AsciiPanel terminal) {
+        super.drawBorder(terminal);
+
+        int x = 4;
+        int y = 3;
+        for (int i = 0; i < options.length; i++) {
+            Color c = Color.WHITE;
+            if (i == selection) {
+                c = Color.GREEN;
+                terminal.writeCenter(descriptions[i], terminal.getHeightInCharacters() - 8);
+            }
+            terminal.write(options[i], x, y + i, c);
+        }
+
+        terminal.writeCenter("Alex Stevenson - 30073617", terminal.getHeightInCharacters() - 2);
+    }
+
+    @Override
+    public Screen input(KeyEvent key) {
+        if (key.getKeyCode() == KeyEvent.VK_DOWN) {
+            selection++;
+            if (selection >= options.length) { selection = 0; }
+        } else if (key.getKeyCode() == KeyEvent.VK_UP) {
+            selection--;
+            if (selection < 0) { selection = options.length-1; }
+        } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
+            switch(selection) {
+                case 0:
+                    return objectCreator;
+                case 1:
+                case 2:
+                case 3:
+                    System.exit(0);
+            }
+        }
+        return this;
+    }
+    
+}
diff --git a/object_creator/ObjectCreator.java b/object_creator/ObjectCreator.java
index 80e82a2..743e209 100644
--- a/object_creator/ObjectCreator.java
+++ b/object_creator/ObjectCreator.java
@@ -10,6 +10,7 @@ import java.awt.event.KeyEvent;
 import java.util.ArrayList;
 
 public class ObjectCreator extends Screen {
+    private Screen returnScreen;
     private int selection;
     private ArrayList<ObjectType> objects;
     public ArrayList<ObjectType> getObjects() { return objects; }
@@ -17,7 +18,8 @@ public class ObjectCreator extends Screen {
     public void addObject(int index, ObjectType newObject) { objects.add(index, newObject); }
     public void remObject(int index) { objects.remove(index); }
 
-    public ObjectCreator() {
+    public ObjectCreator(Screen returnScreen) {
+        this.returnScreen = returnScreen;
         objects = new ArrayList<ObjectType>();
     }
 
@@ -54,16 +56,20 @@ public class ObjectCreator extends Screen {
         x -= 4;
         Color c = (i == selection) ? Color.GREEN : Color.WHITE;
         terminal.write("Create New Object", x, y++, c);
+
+        i++;
+        c = (i == selection) ? Color.GREEN : Color.WHITE;
+        terminal.write("Back to Main Menu", x, y++, c);
     }
 
     @Override
     public Screen input(KeyEvent key) {
         if (key.getKeyCode() == KeyEvent.VK_DOWN) {
             selection++;
-            if (selection >= objects.size() + 1) { selection = 0; }
+            if (selection > objects.size() + 1) { selection = 0; }
         } else if (key.getKeyCode() == KeyEvent.VK_UP) {
             selection--;
-            if (selection < 0) { selection = objects.size() - 1 + 1; }
+            if (selection < 0) { selection = objects.size() - 1 + 2; }
         } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
             int i;
             int len = objects.size();
@@ -75,6 +81,11 @@ public class ObjectCreator extends Screen {
             if (selection == len) {
                 return new CreateObject(this);
             }
+            if (selection == len + 1) {
+                return returnScreen;
+            }
+        } else if (key.getKeyCode() == KeyEvent.VK_ESCAPE) {
+            return returnScreen;
         }
         return this;
     }

commit 683db6558d3c6f8a0bae5a53dea0667ea4116502
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Mon Oct 30 12:24:12 2023 -0600

    Add basic networking functionality

diff --git a/build.bat b/build.bat
index 4808d80..0d5ff19 100644
--- a/build.bat
+++ b/build.bat
@@ -6,4 +6,5 @@ javac ^
     object_creator/helpers/*.java ^
     serializer/*.java ^
     serializer/helpers/*.java ^
+    network/*.java ^
     unit_tests/*.java
diff --git a/network/Receiver.java b/network/Receiver.java
new file mode 100644
index 0000000..ee74e39
--- /dev/null
+++ b/network/Receiver.java
@@ -0,0 +1,79 @@
+package network;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.Socket;
+import java.net.ServerSocket;
+import java.util.ArrayList;
+import org.jdom2.Document;
+import org.jdom2.JDOMException;
+import org.jdom2.input.SAXBuilder;
+import org.jdom2.output.XMLOutputter;
+import org.jdom2.output.Format;
+
+public class Receiver {
+    private static final int port = 6666;
+    private ServerSocket server;
+    public ArrayList<String> messages;
+
+    public Receiver() {
+        messages = new ArrayList<String>();
+    }
+
+    public static void main(String[] args) {
+        new Receiver().start();
+    }
+
+    public void start() {
+        try {
+            server = new ServerSocket(port);
+        } catch(IOException e) {
+            System.out.println(e);
+            messages.add("Error: Receiver failed to start.");
+            return;
+        }
+
+        messages.add("Receiver started on port " + Integer.toString(port) + ". Waiting for connection.");
+        Socket sender;
+        try {
+            sender = server.accept();
+        } catch(IOException e) {
+            System.out.println(e);
+            messages.add("Error: Receiver failed to connect to sender.");
+            return;
+        }
+
+        BufferedReader in;
+        Document doc;
+        try {
+            in = new BufferedReader(new InputStreamReader(sender.getInputStream()));
+            SAXBuilder saxBuilder = new SAXBuilder();
+            doc = saxBuilder.build(in);
+            messages.add("Document received!");
+        } catch(IOException e) {
+            System.out.println(e);
+            messages.add("Error: Unable to receive document.");
+            return;
+        } catch(JDOMException e) {
+            System.out.println(e);
+            messages.add("Error: Failed to construct document.");
+            return;
+        }
+
+        try {
+            server.close();
+            sender.close();
+            in.close();
+        } catch(IOException e) {
+            System.out.println(e);
+            messages.add("Warning: Failed to close sockets.");
+        }
+
+        XMLOutputter xmlOutputter = new XMLOutputter(Format.getPrettyFormat());
+        String xmlString = xmlOutputter.outputString(doc);
+        System.out.println(xmlString);
+
+        // Deserialize here
+    }
+}
diff --git a/network/Sender.java b/network/Sender.java
new file mode 100644
index 0000000..9bb7f88
--- /dev/null
+++ b/network/Sender.java
@@ -0,0 +1,73 @@
+package network;
+
+import org.jdom2.Document;
+import org.jdom2.output.XMLOutputter;
+import org.jdom2.output.Format;
+import java.io.BufferedOutputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.net.Socket;
+import java.util.ArrayList;
+
+public class Sender {
+    private static final String host = "localhost";
+    private static final int port = 6666;
+    public ArrayList<String> messages;
+
+    public Sender() {
+        messages = new ArrayList<String>();
+    }
+
+    public void sendDocument(Document doc) {
+        Socket socket = null;
+        try {
+            socket = new Socket(host, port);
+        } catch (IOException e) {
+            System.out.println(e);
+            messages.add("Error: Could not open socket.");
+            close(socket, null, null);
+            return;
+        }
+
+        BufferedOutputStream bufferedStream = null;
+        try {
+            bufferedStream = new BufferedOutputStream(socket.getOutputStream());
+        } catch(IOException e) {
+            System.out.println(e);
+            messages.add("Error: Failed to construct output stream.");
+            close(socket, bufferedStream, null);
+            return;
+        }
+
+        XMLOutputter out = new XMLOutputter(Format.getPrettyFormat());
+        ByteArrayOutputStream byteOutputStream = new ByteArrayOutputStream();
+        try {
+            out.output(doc, byteOutputStream);
+            byte[] byteList = byteOutputStream.toByteArray();
+            bufferedStream.write(byteList);
+            bufferedStream.flush();
+            messages.add("Document successfully sent.");
+        } catch(IOException e) {
+            System.out.println(e);
+            messages.add("Error: Failed to construct document.");
+        }
+
+        close(socket, bufferedStream, byteOutputStream);
+    }
+
+    private void close(Socket socket, BufferedOutputStream bufferedStream, ByteArrayOutputStream byteOutputStream) {
+        try {
+            if (bufferedStream != null)
+                bufferedStream.close();
+
+            if (byteOutputStream != null)
+                byteOutputStream.close();
+
+            if (socket != null)
+                socket.close();
+        } catch(IOException e) {
+            System.out.println(e);
+            messages.add("Warning: Failed to close socket.");
+        }
+    }
+}

commit 435981f00e4c4e013940644031876efa6369e6d1
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Sun Oct 29 19:33:24 2023 -0600

    Fix bug with declared classes of fields

diff --git a/serializer/Serializer.java b/serializer/Serializer.java
index 2e822fa..e51712e 100644
--- a/serializer/Serializer.java
+++ b/serializer/Serializer.java
@@ -63,7 +63,7 @@ public class Serializer {
     private Element serializeField(Object obj, Field f, Object value) {
         Element e = new Element("field");
         e.setAttribute("name", f.getName());
-        e.setAttribute("declaringclass", obj.getClass().getName());
+        e.setAttribute("declaringclass", getDeclaringClass(obj.getClass(), f));
 
         Element v = serializeValue(value);
         e.addContent(v);
@@ -110,4 +110,12 @@ public class Serializer {
             return r;
         }
     }
+
+    private String getDeclaringClass(Class c, Field f) {
+        if (c == null) { return ""; }
+        for (Field f2 : c.getDeclaredFields()) {
+            if (f.equals(f2)) { return c.getName(); }
+        }
+        return getDeclaringClass(c.getSuperclass(), f);
+    }
 }

commit 48adbbf8a4320d9865e0b90e09da6e225f587577
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Sun Oct 29 17:47:14 2023 -0600

    Serialize arraylist objects

diff --git a/serializer/Serializer.java b/serializer/Serializer.java
index c31da49..2e822fa 100644
--- a/serializer/Serializer.java
+++ b/serializer/Serializer.java
@@ -34,6 +34,7 @@ public class Serializer {
             serializeArray(obj, e);
         } else if (obj.getClass() == ArrayList.class) {
             e.setAttribute("size", Integer.toString(((ArrayList)obj).size()));
+            serializeArrayList(obj, e);
         } else {
             serializeNormalObject(obj, e);
         }
@@ -78,6 +79,15 @@ public class Serializer {
         }
     }
 
+    private void serializeArrayList(Object obj, Element element) {
+        ArrayList list = (ArrayList)obj;
+        for (int i = 0; i < list.size(); i++) {
+            Object o = list.get(i);
+            Element value = serializeValue(o);
+            element.addContent(value);
+        }
+    }
+
     private Element serializeValue(Object o) {
         if (o == null) {
             Element f = new Element("value");
diff --git a/unit_tests/TestSerializer.java b/unit_tests/TestSerializer.java
index 377d456..f4458c5 100644
--- a/unit_tests/TestSerializer.java
+++ b/unit_tests/TestSerializer.java
@@ -229,4 +229,25 @@ public class TestSerializer {
             }
         }
     }
+
+    @Test
+    public void TestReferenceList() {
+        ReferenceList o = new ReferenceList();
+        PrimitiveObject a = new PrimitiveObject();
+        PrimitiveObject b = new PrimitiveObject();
+        o.objects.add(a);
+        o.objects.add(b);
+
+        Document d = serializer.serialize(o);
+        Element root = d.getRootElement();
+        for (Element e : root.getChildren()) {
+            if (e.getAttributeValue("id").equals(Integer.toString(o.objects.hashCode()))) {
+                Element c = e.getChildren().get(0);
+                assertEquals(Integer.toString(a.hashCode()), c.getTextNormalize());
+                
+                c = e.getChildren().get(1);
+                assertEquals(Integer.toString(b.hashCode()), c.getTextNormalize());
+            }
+        }
+    }
 }

commit 47d7682f569cc42f7d8e37bba756333e5a2252c1
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Sun Oct 29 17:42:28 2023 -0600

    Extract serializeValue method to remove duplicated code

diff --git a/serializer/Serializer.java b/serializer/Serializer.java
index c86b76b..c31da49 100644
--- a/serializer/Serializer.java
+++ b/serializer/Serializer.java
@@ -63,29 +63,9 @@ public class Serializer {
         Element e = new Element("field");
         e.setAttribute("name", f.getName());
         e.setAttribute("declaringclass", obj.getClass().getName());
-        
-        if (value == null) {
-            Element v = new Element("value");
-            v.addContent("null");
-            e.addContent(v);
-        } else if (FieldHelper.isPrimitive(value)) {
-            Element v = new Element("value");
 
-            // Special handling for chars because the null char breaks jdom
-            if (value.getClass() == Character.class) {
-                if ((char)value == '\0') {
-                    char c = ' ';
-                    value = c;
-                }
-            }
-
-            v.addContent(value.toString());
-            e.addContent(v);
-        } else {
-            Element r = new Element("reference");
-            r.addContent(Integer.toString(value.hashCode()));
-            e.addContent(r);
-        }
+        Element v = serializeValue(value);
+        e.addContent(v);
         return e;
     }
 
@@ -93,27 +73,31 @@ public class Serializer {
         int length = Array.getLength(obj);
         for (int i = 0; i < length; i++) {
             Object o = Array.get(obj, i);
-            
-            if (o == null) {
-                Element f = new Element("value");
-                f.addContent("null");
-                element.addContent(f);
-            } else if (FieldHelper.isPrimitive(o)) {
-                // Special handling for chars because the null char breaks jdom
-                if (o.getClass() == Character.class) {
-                    if ((char)o == '\0') {
-                        char c = ' ';
-                        o = c;
-                    }
+            Element value = serializeValue(o);
+            element.addContent(value);
+        }
+    }
+
+    private Element serializeValue(Object o) {
+        if (o == null) {
+            Element f = new Element("value");
+            f.addContent("null");
+            return f;
+        } else if (FieldHelper.isPrimitive(o)) {
+            // Special handling for chars because the null char breaks jdom
+            if (o.getClass() == Character.class) {
+                if ((char)o == '\0') {
+                    char c = ' ';
+                    o = c;
                 }
-                Element f = new Element("value");
-                f.addContent(o.toString());
-                element.addContent(f);
-            } else {
-                Element r = new Element("reference");
-                r.addContent(Integer.toString(o.hashCode()));
-                element.addContent(r);
             }
+            Element f = new Element("value");
+            f.addContent(o.toString());
+            return f;
+        } else {
+            Element r = new Element("reference");
+            r.addContent(Integer.toString(o.hashCode()));
+            return r;
         }
     }
 }

commit cd5efe663619113ebb5129ccfdec4539f25ba5b0
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Sun Oct 29 17:39:30 2023 -0600

    Serialize array objects

diff --git a/serializer/Serializer.java b/serializer/Serializer.java
index 617170a..c86b76b 100644
--- a/serializer/Serializer.java
+++ b/serializer/Serializer.java
@@ -31,6 +31,7 @@ public class Serializer {
         e.setAttribute("id", Integer.toString(obj.hashCode()));
         if (obj.getClass().isArray()) {
             e.setAttribute("length", Integer.toString(Array.getLength(obj)));
+            serializeArray(obj, e);
         } else if (obj.getClass() == ArrayList.class) {
             e.setAttribute("size", Integer.toString(((ArrayList)obj).size()));
         } else {
@@ -87,4 +88,32 @@ public class Serializer {
         }
         return e;
     }
+
+    private void serializeArray(Object obj, Element element) {
+        int length = Array.getLength(obj);
+        for (int i = 0; i < length; i++) {
+            Object o = Array.get(obj, i);
+            
+            if (o == null) {
+                Element f = new Element("value");
+                f.addContent("null");
+                element.addContent(f);
+            } else if (FieldHelper.isPrimitive(o)) {
+                // Special handling for chars because the null char breaks jdom
+                if (o.getClass() == Character.class) {
+                    if ((char)o == '\0') {
+                        char c = ' ';
+                        o = c;
+                    }
+                }
+                Element f = new Element("value");
+                f.addContent(o.toString());
+                element.addContent(f);
+            } else {
+                Element r = new Element("reference");
+                r.addContent(Integer.toString(o.hashCode()));
+                element.addContent(r);
+            }
+        }
+    }
 }
diff --git a/unit_tests/TestSerializer.java b/unit_tests/TestSerializer.java
index aa131d4..377d456 100644
--- a/unit_tests/TestSerializer.java
+++ b/unit_tests/TestSerializer.java
@@ -7,6 +7,9 @@ import static org.junit.Assert.fail;
 import java.util.ArrayList;
 import org.jdom2.Document;
 import org.jdom2.Element;
+import org.jdom2.output.XMLOutputter;
+import org.jdom2.output.Format;
+import java.io.IOException;
 import serializer.Serializer;
 import object_creator.classes.*;
 
@@ -33,6 +36,17 @@ public class TestSerializer {
         return "";
     }
 
+    /* For testing, delete before final commit */
+    private void printDocument(Document doc) {
+        try {
+            XMLOutputter xmlOutput = new XMLOutputter();
+            xmlOutput.setFormat(Format.getPrettyFormat());
+            xmlOutput.output(doc, System.out); 
+        } catch(IOException e) {
+            e.printStackTrace();
+        }
+    }
+
     @Test
     public void TestHeader() {
         PrimitiveObject a = new PrimitiveObject();
@@ -153,4 +167,66 @@ public class TestSerializer {
         assertEquals(Integer.toString(o.objects.hashCode()), getFieldReference(ref, "objects"));
         assertEquals(2, root.getChildren().size());
     }
+
+    @Test
+    public void TestPrimitiveArray() {
+        PrimitiveArray o = new PrimitiveArray();
+        o.ints = new int[] { 0, 1 };
+        o.doubles = new double[] { 2.2, 3.3 };
+        o.bools = new boolean[] { true, false };
+
+        Document d = serializer.serialize(o);
+        Element root = d.getRootElement();
+        for (Element e : root.getChildren()) {
+            /* Test ints */
+            if (e.getAttributeValue("id").equals(Integer.toString(o.ints.hashCode()))) {
+                int[] check = new int[2];
+                for (int i = 0; i < 2; i++) {
+                    Element c = e.getChildren().get(i);
+                    check[i] = Integer.valueOf(c.getTextNormalize());
+                }
+                assert(o.ints.equals(check));
+            }
+
+            /* Test doubles */
+            if (e.getAttributeValue("id").equals(Integer.toString(o.doubles.hashCode()))) {
+                double[] check = new double[2];
+                for (int i = 0; i < 2; i++) {
+                    Element c = e.getChildren().get(i);
+                    check[i] = Double.valueOf(c.getTextNormalize());
+                }
+                assert(o.doubles.equals(check));
+            }
+
+            /* Test bools */
+            if (e.getAttributeValue("id").equals(Integer.toString(o.bools.hashCode()))) {
+                boolean[] check = new boolean[2];
+                for (int i = 0; i < 2; i++) {
+                    Element c = e.getChildren().get(i);
+                    check[i] = Boolean.valueOf(c.getTextNormalize());
+                }
+                assert(o.bools.equals(check));
+            }
+        }
+    }
+
+    @Test
+    public void TestReferenceArray() {
+        ReferenceArray o = new ReferenceArray();
+        PrimitiveObject a = new PrimitiveObject();
+        PrimitiveObject b = new PrimitiveObject();
+        o.objects = new ObjectType[] { a, b };
+
+        Document d = serializer.serialize(o);
+        Element root = d.getRootElement();
+        for (Element e : root.getChildren()) {
+            if (e.getAttributeValue("id").equals(Integer.toString(o.objects.hashCode()))) {
+                Element c = e.getChildren().get(0);
+                assertEquals(Integer.toString(a.hashCode()), c.getTextNormalize());
+                
+                c = e.getChildren().get(1);
+                assertEquals(Integer.toString(b.hashCode()), c.getTextNormalize());
+            }
+        }
+    }
 }

commit ab1d68ea01760ee6a3806b6b2f8d985af380fb27
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Sun Oct 29 16:51:55 2023 -0600

    Map arrays and arraylists as their own objects

diff --git a/serializer/ObjectMap.java b/serializer/ObjectMap.java
index c891160..8701fd5 100644
--- a/serializer/ObjectMap.java
+++ b/serializer/ObjectMap.java
@@ -34,6 +34,7 @@ public class ObjectMap {
             if (value == null) { continue; }
             if (f.getType().isArray()) {
                 // Handle array
+                objects.put(value.hashCode(), value);
                 int length = Array.getLength(value);
                 for (int i = 0; i < length; i++) {
                     Object o = Array.get(value, i);
@@ -43,6 +44,7 @@ public class ObjectMap {
                 }
             } else if (value.getClass() == ArrayList.class) {
                 // Handle ArrayList from java.util.Collections
+                objects.put(value.hashCode(), value);
                 ArrayList l = (ArrayList)value;
                 int length = l.size();
                 for (int i = 0; i < length; i++) {
diff --git a/serializer/Serializer.java b/serializer/Serializer.java
index e2ffaaf..617170a 100644
--- a/serializer/Serializer.java
+++ b/serializer/Serializer.java
@@ -2,10 +2,12 @@ package serializer;
 
 import java.lang.reflect.Array;
 import java.lang.reflect.Field;
+import java.util.ArrayList;
 import org.jdom2.Document;
 import org.jdom2.Element;
 import serializer.helpers.FieldHelper;
 
+@SuppressWarnings("rawtypes")
 public class Serializer {
     ObjectMap objects;
 
@@ -29,14 +31,16 @@ public class Serializer {
         e.setAttribute("id", Integer.toString(obj.hashCode()));
         if (obj.getClass().isArray()) {
             e.setAttribute("length", Integer.toString(Array.getLength(obj)));
+        } else if (obj.getClass() == ArrayList.class) {
+            e.setAttribute("size", Integer.toString(((ArrayList)obj).size()));
         } else {
-            serializeFields(obj, e);
+            serializeNormalObject(obj, e);
         }
 
         return e;
     }
 
-    private void serializeFields(Object obj, Element element) {
+    private void serializeNormalObject(Object obj, Element element) {
         Field[] fields = FieldHelper.findFields(obj.getClass());
         if (fields.length == 0) { return; }
         for(Field f : fields) {
@@ -49,16 +53,12 @@ public class Serializer {
                 continue;
             }
 
-            if (f.getType().isArray()) {
-                // Parse array fields
-            } else {
-                Element e = serializeNormalField(obj, f, value);
-                element.addContent(e);
-            }
+            Element e = serializeField(obj, f, value);
+            element.addContent(e);
         }
     }
 
-    private Element serializeNormalField(Object obj, Field f, Object value) {
+    private Element serializeField(Object obj, Field f, Object value) {
         Element e = new Element("field");
         e.setAttribute("name", f.getName());
         e.setAttribute("declaringclass", obj.getClass().getName());
diff --git a/unit_tests/TestMap.java b/unit_tests/TestMap.java
index 5a90d06..860f3a5 100644
--- a/unit_tests/TestMap.java
+++ b/unit_tests/TestMap.java
@@ -103,7 +103,7 @@ public class TestMap {
             a, b, c
         };
         objects.populate(o);
-        assertEquals(4, mapSize());
+        assertEquals(5, mapSize());
     }
 
     @Test
@@ -113,7 +113,7 @@ public class TestMap {
         o.doubles = new double[] { 0.0, 1.1, 2.2 };
         o.bools = new boolean[] { true, false, true };
         objects.populate(o);
-        assertEquals(1, mapSize());
+        assertEquals(4, mapSize());
     }
 
     @Test
@@ -124,7 +124,7 @@ public class TestMap {
             a, a, a, a, a
         };
         objects.populate(o);
-        assertEquals(2, mapSize());
+        assertEquals(3, mapSize());
     }
 
     @Test
@@ -145,7 +145,7 @@ public class TestMap {
             arr1, arr2
         };
         objects.populate(o);
-        assertEquals(6, mapSize());
+        assertEquals(9, mapSize());
     }
 
     @Test
@@ -161,7 +161,7 @@ public class TestMap {
             r, c
         };
         objects.populate(o);
-        assertEquals(5, mapSize());
+        assertEquals(6, mapSize());
     }
 
     @Test
@@ -172,7 +172,7 @@ public class TestMap {
         o.objects.add(a);
         o.objects.add(b);
         objects.populate(o);
-        assertEquals(3, mapSize());
+        assertEquals(4, mapSize());
     }
 
     @Test
@@ -185,7 +185,7 @@ public class TestMap {
         o.objects.add(a);
         o.objects.add(b);
         objects.populate(o);
-        assertEquals(3, mapSize());
+        assertEquals(4, mapSize());
     }
 
     @Test
@@ -207,6 +207,6 @@ public class TestMap {
         o.objects.add(arr2);
 
         objects.populate(o);
-        assertEquals(6, mapSize());
+        assertEquals(9, mapSize());
     }
 }
diff --git a/unit_tests/TestSerializer.java b/unit_tests/TestSerializer.java
index 315353e..aa131d4 100644
--- a/unit_tests/TestSerializer.java
+++ b/unit_tests/TestSerializer.java
@@ -4,6 +4,7 @@ import org.junit.Test;
 import org.junit.Before;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
+import java.util.ArrayList;
 import org.jdom2.Document;
 import org.jdom2.Element;
 import serializer.Serializer;
@@ -43,6 +44,31 @@ public class TestSerializer {
         assertEquals(Integer.toString(a.hashCode()), A.getAttributeValue("id"));
     }
 
+    @Test
+    public void TestHeaderArray() {
+        int[] a = new int[] { 1, 2, 3, 4 };
+        Document d = serializer.serialize(a);
+        Element root = d.getRootElement();
+        Element A = root.getChildren().get(0);
+        assertEquals("[I", A.getAttributeValue("class"));
+        assertEquals(Integer.toString(a.hashCode()), A.getAttributeValue("id"));
+        assertEquals("4", A.getAttributeValue("length"));
+    }
+
+    @Test
+    public void TestHeaderList() {
+        ArrayList<Object> o = new ArrayList<Object>();
+        o.add(null);
+        o.add(null);
+
+        Document d = serializer.serialize(o);
+        Element root = d.getRootElement();
+        Element A = root.getChildren().get(0);
+        assertEquals("java.util.ArrayList", A.getAttributeValue("class"));
+        assertEquals(Integer.toString(o.hashCode()), A.getAttributeValue("id"));
+        assertEquals("2", A.getAttributeValue("size"));
+    }
+
     @Test
     public void TestNormalFields() {
         PrimitiveObject a = new PrimitiveObject();
@@ -87,4 +113,44 @@ public class TestSerializer {
 
         assertEquals(Integer.toString(a.hashCode()), getFieldReference(ref, "A"));
     }
+
+    @Test
+    public void TestArrayReferences() {
+        PrimitiveArray a = new PrimitiveArray();
+        a.ints = new int[] { 0 };
+        a.doubles = new double[] { 1.0 };
+        a.bools = new boolean[] { true };
+
+        Document d = serializer.serialize(a);
+        Element root = d.getRootElement();
+        Element ref = null;
+        for (Element e : root.getChildren()) {
+            if (e.getAttributeValue("id").equals(Integer.toString(a.hashCode())))
+                ref = e;
+        }
+        if (ref == null) { fail("Could not find object with expected id."); }
+
+        assertEquals(Integer.toString(a.ints.hashCode()), getFieldReference(ref, "ints"));
+        assertEquals(Integer.toString(a.doubles.hashCode()), getFieldReference(ref, "doubles"));
+        assertEquals(Integer.toString(a.bools.hashCode()), getFieldReference(ref, "bools"));
+        assertEquals(4, root.getChildren().size());
+    }
+
+    @Test
+    public void TestListReferences() {
+        ReferenceList o = new ReferenceList();
+        // Constructor instantiates o.objects
+
+        Document d = serializer.serialize(o);
+        Element root = d.getRootElement();
+        Element ref = null;
+        for (Element e : root.getChildren()) {
+            if (e.getAttributeValue("id").equals(Integer.toString(o.hashCode())))
+                ref = e;
+        }
+        if (ref == null) { fail("Could not find object with expected id."); }
+
+        assertEquals(Integer.toString(o.objects.hashCode()), getFieldReference(ref, "objects"));
+        assertEquals(2, root.getChildren().size());
+    }
 }

commit 39a3be35c68da24ef0b379179fcb22613739a39c
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Sun Oct 29 16:23:20 2023 -0600

    Extract FieldHelper class from ObjectMap

diff --git a/build.bat b/build.bat
index 967d793..4808d80 100644
--- a/build.bat
+++ b/build.bat
@@ -5,4 +5,5 @@ javac ^
     object_creator/handlers/*.java ^
     object_creator/helpers/*.java ^
     serializer/*.java ^
+    serializer/helpers/*.java ^
     unit_tests/*.java
diff --git a/serializer/ObjectMap.java b/serializer/ObjectMap.java
index 264c6ba..c891160 100644
--- a/serializer/ObjectMap.java
+++ b/serializer/ObjectMap.java
@@ -3,26 +3,14 @@ package serializer;
 import java.util.HashMap;
 import java.util.ArrayList;
 import java.lang.reflect.Field;
-import java.lang.reflect.Modifier;
 import java.lang.reflect.Array;
+import serializer.helpers.FieldHelper;
 
 @SuppressWarnings("rawtypes")
 public class ObjectMap {
     private HashMap<Integer, Object> objects;
     public HashMap<Integer, Object> getObjects() { return objects; }
     public Object get(int i) { return objects.get(i); }
-    private static final Class[] wrapperClasses = new Class[] {
-        Boolean.class,
-        Character.class,
-        Byte.class,
-        Short.class,
-        Integer.class,
-        Long.class,
-        Float.class,
-        Double.class,
-        Void.class,
-        java.lang.String.class
-    };
 
     public ObjectMap() {
         objects = new HashMap<Integer, Object>();
@@ -32,7 +20,7 @@ public class ObjectMap {
     public void populate(Object obj) {
         objects.put(obj.hashCode(), obj);
 
-        Field[] fields = findFields(obj.getClass());
+        Field[] fields = FieldHelper.findFields(obj.getClass());
         for (Field f : fields) {
             Object value;
             try {
@@ -73,58 +61,8 @@ public class ObjectMap {
 
     private boolean isValidObject(Object o) {
         if (o == null) { return false; }
-        if (isPrimitive(o)) { return false; }
+        if (FieldHelper.isPrimitive(o)) { return false; }
         if (objects.containsKey(o.hashCode())) { return false; }
         return true;
     }
-
-    /* Recursively get all public and protected fields of the object (including superclass) */
-    /* Method copied from Assignment 2 */
-    public static Field[] findFields(Class c) { return findFields(c, false); }
-    private static Field[] findFields(Class c, boolean isSuperclass) {
-        Field[] fs = c.getDeclaredFields();
-
-        for (int i = 0; i < fs.length; i++) {
-            Field f = fs[i];
-            if (Modifier.isProtected(f.getModifiers())) {
-                f.setAccessible(true);
-            }
-            if (!isSuperclass && Modifier.isPrivate(f.getModifiers())) {
-                f.setAccessible(true);
-            }
-        }
-
-        if (c.getSuperclass() == null) { return fs; }
-
-        return concat(fs, findFields(c.getSuperclass(), true));
-    }
-
-    /* Concatenate two arrays of fields as this isn't just default java implementation */
-    /* Method copied from Assignment 2 */
-    private static Field[] concat(Field[] a, Field[] b) {
-        int alen = a.length;
-        if (alen == 0) { return b; }
-        
-        int blen = b.length;
-        if (blen == 0) { return a; }
-
-        int len = alen + blen;
-        Field[] f = new Field[len];
-        for (int i = 0; i < alen; i++) {
-            f[i] = a[i];
-        }
-        for (int i = 0; i < blen; i++) {
-            f[i+alen] = b[i];
-        }
-        return f;
-    }
-
-    /* Check if an object is a wrapper object (eg. Integer instead of int) */
-    /* Method copied from Assignment 2 */
-    public static boolean isPrimitive(Object o) {
-        for (Class c : wrapperClasses) {
-            if (o.getClass() == c) { return true; }
-        }
-        return false;
-    }
 }
diff --git a/serializer/Serializer.java b/serializer/Serializer.java
index 8d2a033..e2ffaaf 100644
--- a/serializer/Serializer.java
+++ b/serializer/Serializer.java
@@ -4,6 +4,7 @@ import java.lang.reflect.Array;
 import java.lang.reflect.Field;
 import org.jdom2.Document;
 import org.jdom2.Element;
+import serializer.helpers.FieldHelper;
 
 public class Serializer {
     ObjectMap objects;
@@ -36,7 +37,7 @@ public class Serializer {
     }
 
     private void serializeFields(Object obj, Element element) {
-        Field[] fields = ObjectMap.findFields(obj.getClass());
+        Field[] fields = FieldHelper.findFields(obj.getClass());
         if (fields.length == 0) { return; }
         for(Field f : fields) {
             Object value;
@@ -66,7 +67,7 @@ public class Serializer {
             Element v = new Element("value");
             v.addContent("null");
             e.addContent(v);
-        } else if (ObjectMap.isPrimitive(value)) {
+        } else if (FieldHelper.isPrimitive(value)) {
             Element v = new Element("value");
 
             // Special handling for chars because the null char breaks jdom
diff --git a/serializer/helpers/FieldHelper.java b/serializer/helpers/FieldHelper.java
new file mode 100644
index 0000000..4d53d34
--- /dev/null
+++ b/serializer/helpers/FieldHelper.java
@@ -0,0 +1,70 @@
+package serializer.helpers;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+
+@SuppressWarnings("rawtypes")
+public class FieldHelper {
+    private static final Class[] wrapperClasses = new Class[] {
+        Boolean.class,
+        Character.class,
+        Byte.class,
+        Short.class,
+        Integer.class,
+        Long.class,
+        Float.class,
+        Double.class,
+        Void.class,
+        java.lang.String.class
+    };
+
+    /* Recursively get all public and protected fields of the object (including superclass) */
+    /* Method copied from Assignment 2 */
+    public static Field[] findFields(Class c) { return findFields(c, false); }
+    private static Field[] findFields(Class c, boolean isSuperclass) {
+        Field[] fs = c.getDeclaredFields();
+
+        for (int i = 0; i < fs.length; i++) {
+            Field f = fs[i];
+            if (Modifier.isProtected(f.getModifiers())) {
+                f.setAccessible(true);
+            }
+            if (!isSuperclass && Modifier.isPrivate(f.getModifiers())) {
+                f.setAccessible(true);
+            }
+        }
+
+        if (c.getSuperclass() == null) { return fs; }
+
+        return concat(fs, findFields(c.getSuperclass(), true));
+    }
+
+    /* Concatenate two arrays of fields as this isn't just default java implementation */
+    /* Method copied from Assignment 2 */
+    private static Field[] concat(Field[] a, Field[] b) {
+        int alen = a.length;
+        if (alen == 0) { return b; }
+        
+        int blen = b.length;
+        if (blen == 0) { return a; }
+
+        int len = alen + blen;
+        Field[] f = new Field[len];
+        for (int i = 0; i < alen; i++) {
+            f[i] = a[i];
+        }
+        for (int i = 0; i < blen; i++) {
+            f[i+alen] = b[i];
+        }
+        return f;
+    }
+
+    /* Check if an object is a wrapper object (eg. Integer instead of int) */
+    /* Method copied from Assignment 2 */
+    public static boolean isPrimitive(Object o) {
+        for (Class c : wrapperClasses) {
+            if (o.getClass() == c) { return true; }
+        }
+        return false;
+    }
+}

commit a2e3b9f4bd27e4299c253af4ac42de78375877fb
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Sun Oct 29 16:19:48 2023 -0600

    Serialize normal fields of an object

diff --git a/build.bat b/build.bat
index 1405df9..967d793 100644
--- a/build.bat
+++ b/build.bat
@@ -1,7 +1,8 @@
-javac application/*.java
-javac object_creator/*.java
-javac object_creator/classes/*.java
-javac object_creator/handlers/*.java
-javac object_creator/helpers/*.java
-javac serializer/*.java
-javac unit_tests/*.java
+javac ^
+    application/*.java ^
+    object_creator/*.java ^
+    object_creator/classes/*.java ^
+    object_creator/handlers/*.java ^
+    object_creator/helpers/*.java ^
+    serializer/*.java ^
+    unit_tests/*.java
diff --git a/serializer/ObjectMap.java b/serializer/ObjectMap.java
index 92de927..264c6ba 100644
--- a/serializer/ObjectMap.java
+++ b/serializer/ObjectMap.java
@@ -10,6 +10,7 @@ import java.lang.reflect.Array;
 public class ObjectMap {
     private HashMap<Integer, Object> objects;
     public HashMap<Integer, Object> getObjects() { return objects; }
+    public Object get(int i) { return objects.get(i); }
     private static final Class[] wrapperClasses = new Class[] {
         Boolean.class,
         Character.class,
@@ -79,8 +80,8 @@ public class ObjectMap {
 
     /* Recursively get all public and protected fields of the object (including superclass) */
     /* Method copied from Assignment 2 */
-    private Field[] findFields(Class c) { return findFields(c, false); }
-    private Field[] findFields(Class c, boolean isSuperclass) {
+    public static Field[] findFields(Class c) { return findFields(c, false); }
+    private static Field[] findFields(Class c, boolean isSuperclass) {
         Field[] fs = c.getDeclaredFields();
 
         for (int i = 0; i < fs.length; i++) {
@@ -100,7 +101,7 @@ public class ObjectMap {
 
     /* Concatenate two arrays of fields as this isn't just default java implementation */
     /* Method copied from Assignment 2 */
-    private Field[] concat(Field[] a, Field[] b) {
+    private static Field[] concat(Field[] a, Field[] b) {
         int alen = a.length;
         if (alen == 0) { return b; }
         
@@ -120,7 +121,7 @@ public class ObjectMap {
 
     /* Check if an object is a wrapper object (eg. Integer instead of int) */
     /* Method copied from Assignment 2 */
-    private boolean isPrimitive(Object o) {
+    public static boolean isPrimitive(Object o) {
         for (Class c : wrapperClasses) {
             if (o.getClass() == c) { return true; }
         }
diff --git a/serializer/Serializer.java b/serializer/Serializer.java
index 5d30427..8d2a033 100644
--- a/serializer/Serializer.java
+++ b/serializer/Serializer.java
@@ -1,5 +1,7 @@
 package serializer;
 
+import java.lang.reflect.Array;
+import java.lang.reflect.Field;
 import org.jdom2.Document;
 import org.jdom2.Element;
 
@@ -7,13 +9,81 @@ public class Serializer {
     ObjectMap objects;
 
     public Document serialize(Object obj) {
-        objects = new ObjectMap();
-        objects.populate(obj);
-
         Element root = new Element("serialized");
         Document doc = new Document(root);
 
+        objects = new ObjectMap();
+        objects.populate(obj);
+        for (Integer i : objects.getObjects().keySet()) {
+            Element e = serializeObject(objects.get(i));
+            root.addContent(e);
+        }
+
         return doc;
     }
 
-}
\ No newline at end of file
+    private Element serializeObject(Object obj) {
+        Element e = new Element("object");
+        e.setAttribute("class", obj.getClass().getName());
+        e.setAttribute("id", Integer.toString(obj.hashCode()));
+        if (obj.getClass().isArray()) {
+            e.setAttribute("length", Integer.toString(Array.getLength(obj)));
+        } else {
+            serializeFields(obj, e);
+        }
+
+        return e;
+    }
+
+    private void serializeFields(Object obj, Element element) {
+        Field[] fields = ObjectMap.findFields(obj.getClass());
+        if (fields.length == 0) { return; }
+        for(Field f : fields) {
+            Object value;
+            try {
+                value = f.get(obj);
+            } catch (NullPointerException except) {
+                value = null;
+            } catch (IllegalAccessException except) {
+                continue;
+            }
+
+            if (f.getType().isArray()) {
+                // Parse array fields
+            } else {
+                Element e = serializeNormalField(obj, f, value);
+                element.addContent(e);
+            }
+        }
+    }
+
+    private Element serializeNormalField(Object obj, Field f, Object value) {
+        Element e = new Element("field");
+        e.setAttribute("name", f.getName());
+        e.setAttribute("declaringclass", obj.getClass().getName());
+        
+        if (value == null) {
+            Element v = new Element("value");
+            v.addContent("null");
+            e.addContent(v);
+        } else if (ObjectMap.isPrimitive(value)) {
+            Element v = new Element("value");
+
+            // Special handling for chars because the null char breaks jdom
+            if (value.getClass() == Character.class) {
+                if ((char)value == '\0') {
+                    char c = ' ';
+                    value = c;
+                }
+            }
+
+            v.addContent(value.toString());
+            e.addContent(v);
+        } else {
+            Element r = new Element("reference");
+            r.addContent(Integer.toString(value.hashCode()));
+            e.addContent(r);
+        }
+        return e;
+    }
+}
diff --git a/unit_tests/TestAll.java b/unit_tests/TestAll.java
index b5ff20a..f5d518b 100644
--- a/unit_tests/TestAll.java
+++ b/unit_tests/TestAll.java
@@ -7,5 +7,6 @@ import org.junit.runners.Suite.SuiteClasses;
 @RunWith(Suite.class)
 @SuiteClasses({
     TestMap.class,
+    TestSerializer.class,
 })
 public class TestAll { }
diff --git a/unit_tests/TestSerializer.java b/unit_tests/TestSerializer.java
new file mode 100644
index 0000000..315353e
--- /dev/null
+++ b/unit_tests/TestSerializer.java
@@ -0,0 +1,90 @@
+package unit_tests;
+
+import org.junit.Test;
+import org.junit.Before;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+import org.jdom2.Document;
+import org.jdom2.Element;
+import serializer.Serializer;
+import object_creator.classes.*;
+
+public class TestSerializer {
+    private Serializer serializer;
+
+    @Before
+    public void setup() {
+        serializer = new Serializer();
+    }
+
+    private String getFieldValue(Element element, String fieldName) {
+        for (Element f : element.getChildren()) {
+            if (f.getAttributeValue("name").equals(fieldName))
+                return f.getChildTextNormalize("value");
+        }
+        return "";
+    }
+    private String getFieldReference(Element element, String fieldName) {
+        for (Element f : element.getChildren()) {
+            if (f.getAttributeValue("name").equals(fieldName))
+                return f.getChildTextNormalize("reference");
+        }
+        return "";
+    }
+
+    @Test
+    public void TestHeader() {
+        PrimitiveObject a = new PrimitiveObject();
+        
+        Document d = serializer.serialize(a);
+        Element root = d.getRootElement();
+        Element A = root.getChildren().get(0);
+        assertEquals("object_creator.classes.PrimitiveObject", A.getAttributeValue("class"));
+        assertEquals(Integer.toString(a.hashCode()), A.getAttributeValue("id"));
+    }
+
+    @Test
+    public void TestNormalFields() {
+        PrimitiveObject a = new PrimitiveObject();
+        a.name = "Test";
+        a.b = (byte)49;
+        a.c = '2';
+        a.d = 3.0;
+        a.f = 4.0f;
+        a.i = 5;
+        a.j = 6;
+        a.s = 7;
+        a.z = true;
+
+        Document d = serializer.serialize(a);
+        Element root = d.getRootElement();
+        Element A = root.getChildren().get(0);
+        assertEquals("Test", getFieldValue(A, "name"));
+        assertEquals("49", getFieldValue(A, "b"));
+        assertEquals("2", getFieldValue(A, "c"));
+        assertEquals("3.0", getFieldValue(A, "d"));
+        assertEquals("4.0", getFieldValue(A, "f"));
+        assertEquals("5", getFieldValue(A, "i"));
+        assertEquals("6", getFieldValue(A, "j"));
+        assertEquals("7", getFieldValue(A, "s"));
+        assertEquals("true", getFieldValue(A, "z"));
+    }
+
+    @Test
+    public void TestReferencedFields() {
+        PrimitiveObject a = new PrimitiveObject();
+        ReferenceObject o = new ReferenceObject();
+        o.A = a;
+
+        Document d = serializer.serialize(o);
+        Element root = d.getRootElement();
+        Element ref = null;
+        for (Element e : root.getChildren()) {
+            if (e.getAttributeValue("id").equals(Integer.toString(o.hashCode())))
+                ref = e;
+        }
+        if (ref == null) { fail("Could not find object with expected id."); }
+
+        assertEquals(Integer.toString(a.hashCode()), getFieldReference(ref, "A"));
+    }
+}

commit ad801973f2b6e3d9f7f7ef3725f35c65cd41c786
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Sun Oct 29 14:45:01 2023 -0600

    Extract ObjectMap class

diff --git a/serializer/ObjectMap.java b/serializer/ObjectMap.java
new file mode 100644
index 0000000..92de927
--- /dev/null
+++ b/serializer/ObjectMap.java
@@ -0,0 +1,129 @@
+package serializer;
+
+import java.util.HashMap;
+import java.util.ArrayList;
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.lang.reflect.Array;
+
+@SuppressWarnings("rawtypes")
+public class ObjectMap {
+    private HashMap<Integer, Object> objects;
+    public HashMap<Integer, Object> getObjects() { return objects; }
+    private static final Class[] wrapperClasses = new Class[] {
+        Boolean.class,
+        Character.class,
+        Byte.class,
+        Short.class,
+        Integer.class,
+        Long.class,
+        Float.class,
+        Double.class,
+        Void.class,
+        java.lang.String.class
+    };
+
+    public ObjectMap() {
+        objects = new HashMap<Integer, Object>();
+    }
+
+    /* Recursively get all objects associated with obj */
+    public void populate(Object obj) {
+        objects.put(obj.hashCode(), obj);
+
+        Field[] fields = findFields(obj.getClass());
+        for (Field f : fields) {
+            Object value;
+            try {
+                value = f.get(obj);
+            } catch (NullPointerException e) {
+                continue;
+            } catch (IllegalAccessException e) {
+                continue;
+            }
+
+            if (value == null) { continue; }
+            if (f.getType().isArray()) {
+                // Handle array
+                int length = Array.getLength(value);
+                for (int i = 0; i < length; i++) {
+                    Object o = Array.get(value, i);
+                    if (!isValidObject(o)) { continue; }
+
+                    populate(o);
+                }
+            } else if (value.getClass() == ArrayList.class) {
+                // Handle ArrayList from java.util.Collections
+                ArrayList l = (ArrayList)value;
+                int length = l.size();
+                for (int i = 0; i < length; i++) {
+                    Object o = l.get(i);
+                    if (!isValidObject(o)) { continue; }
+
+                    populate(o);
+                }
+            } else {
+                // If it isn't a primitive object, populate it if it isn't already in the list
+                if (!isValidObject(value)) { continue; }
+                populate(value);
+            }
+        }
+    }
+
+    private boolean isValidObject(Object o) {
+        if (o == null) { return false; }
+        if (isPrimitive(o)) { return false; }
+        if (objects.containsKey(o.hashCode())) { return false; }
+        return true;
+    }
+
+    /* Recursively get all public and protected fields of the object (including superclass) */
+    /* Method copied from Assignment 2 */
+    private Field[] findFields(Class c) { return findFields(c, false); }
+    private Field[] findFields(Class c, boolean isSuperclass) {
+        Field[] fs = c.getDeclaredFields();
+
+        for (int i = 0; i < fs.length; i++) {
+            Field f = fs[i];
+            if (Modifier.isProtected(f.getModifiers())) {
+                f.setAccessible(true);
+            }
+            if (!isSuperclass && Modifier.isPrivate(f.getModifiers())) {
+                f.setAccessible(true);
+            }
+        }
+
+        if (c.getSuperclass() == null) { return fs; }
+
+        return concat(fs, findFields(c.getSuperclass(), true));
+    }
+
+    /* Concatenate two arrays of fields as this isn't just default java implementation */
+    /* Method copied from Assignment 2 */
+    private Field[] concat(Field[] a, Field[] b) {
+        int alen = a.length;
+        if (alen == 0) { return b; }
+        
+        int blen = b.length;
+        if (blen == 0) { return a; }
+
+        int len = alen + blen;
+        Field[] f = new Field[len];
+        for (int i = 0; i < alen; i++) {
+            f[i] = a[i];
+        }
+        for (int i = 0; i < blen; i++) {
+            f[i+alen] = b[i];
+        }
+        return f;
+    }
+
+    /* Check if an object is a wrapper object (eg. Integer instead of int) */
+    /* Method copied from Assignment 2 */
+    private boolean isPrimitive(Object o) {
+        for (Class c : wrapperClasses) {
+            if (o.getClass() == c) { return true; }
+        }
+        return false;
+    }
+}
diff --git a/serializer/Serializer.java b/serializer/Serializer.java
index 32b8856..5d30427 100644
--- a/serializer/Serializer.java
+++ b/serializer/Serializer.java
@@ -2,32 +2,13 @@ package serializer;
 
 import org.jdom2.Document;
 import org.jdom2.Element;
-import java.util.HashMap;
-import java.util.ArrayList;
-import java.lang.reflect.Field;
-import java.lang.reflect.Modifier;
-import java.lang.reflect.Array;
 
-@SuppressWarnings("rawtypes")
 public class Serializer {
-    private HashMap<Integer, Object> objects;
-    public HashMap<Integer, Object> getObjects() { return objects; }
-    private static final Class[] wrapperClasses = new Class[] {
-        Boolean.class,
-        Character.class,
-        Byte.class,
-        Short.class,
-        Integer.class,
-        Long.class,
-        Float.class,
-        Double.class,
-        Void.class,
-        java.lang.String.class
-    };
+    ObjectMap objects;
 
     public Document serialize(Object obj) {
-        objects = new HashMap<Integer, Object>();
-        populateMap(obj);
+        objects = new ObjectMap();
+        objects.populate(obj);
 
         Element root = new Element("serialized");
         Document doc = new Document(root);
@@ -35,103 +16,4 @@ public class Serializer {
         return doc;
     }
 
-    /* Recursively get all objects associated with obj */
-    public void populateMap(Object obj) {
-        objects.put(obj.hashCode(), obj);
-
-        Field[] fields = findFields(obj.getClass());
-        for (Field f : fields) {
-            Object value;
-            try {
-                value = f.get(obj);
-            } catch (NullPointerException e) {
-                continue;
-            } catch (IllegalAccessException e) {
-                continue;
-            }
-
-            if (value == null) { continue; }
-            if (f.getType().isArray()) {
-                // Handle array
-                int length = Array.getLength(value);
-                for (int i = 0; i < length; i++) {
-                    Object o = Array.get(value, i);
-                    if (!isValidObject(o)) { continue; }
-
-                    populateMap(o);
-                }
-            } else if (value.getClass() == ArrayList.class) {
-                // Handle ArrayList from java.util.Collections
-                ArrayList l = (ArrayList)value;
-                int length = l.size();
-                for (int i = 0; i < length; i++) {
-                    Object o = l.get(i);
-                    if (!isValidObject(o)) { continue; }
-
-                    populateMap(o);
-                }
-            } else {
-                // If it isn't a primitive object, populate it if it isn't already in the list
-                if (!isValidObject(value)) { continue; }
-                populateMap(value);
-            }
-        }
-    }
-
-    private boolean isValidObject(Object o) {
-        if (o == null) { return false; }
-        if (isPrimitive(o)) { return false; }
-        if (objects.containsKey(o.hashCode())) { return false; }
-        return true;
-    }
-
-    /* Recursively get all public and protected fields of the object (including superclass) */
-    /* Method copied from Assignment 2 */
-    private Field[] findFields(Class c) { return findFields(c, false); }
-    private Field[] findFields(Class c, boolean isSuperclass) {
-        Field[] fs = c.getDeclaredFields();
-
-        for (int i = 0; i < fs.length; i++) {
-            Field f = fs[i];
-            if (Modifier.isProtected(f.getModifiers())) {
-                f.setAccessible(true);
-            }
-            if (!isSuperclass && Modifier.isPrivate(f.getModifiers())) {
-                f.setAccessible(true);
-            }
-        }
-
-        if (c.getSuperclass() == null) { return fs; }
-
-        return concat(fs, findFields(c.getSuperclass(), true));
-    }
-
-    /* Concatenate two arrays of fields as this isn't just default java implementation */
-    /* Method copied from Assignment 2 */
-    private Field[] concat(Field[] a, Field[] b) {
-        int alen = a.length;
-        if (alen == 0) { return b; }
-        
-        int blen = b.length;
-        if (blen == 0) { return a; }
-
-        int len = alen + blen;
-        Field[] f = new Field[len];
-        for (int i = 0; i < alen; i++) {
-            f[i] = a[i];
-        }
-        for (int i = 0; i < blen; i++) {
-            f[i+alen] = b[i];
-        }
-        return f;
-    }
-
-    /* Check if an object is a wrapper object (eg. Integer instead of int) */
-    /* Method copied from Assignment 2 */
-    private boolean isPrimitive(Object o) {
-        for (Class c : wrapperClasses) {
-            if (o.getClass() == c) { return true; }
-        }
-        return false;
-    }
-}
+}
\ No newline at end of file
diff --git a/unit_tests/TestMap.java b/unit_tests/TestMap.java
index 7bc7da5..5a90d06 100644
--- a/unit_tests/TestMap.java
+++ b/unit_tests/TestMap.java
@@ -4,32 +4,32 @@ import org.junit.Test;
 import org.junit.Before;
 import static org.junit.Assert.assertEquals;
 
-import serializer.Serializer;
+import serializer.ObjectMap;
 import object_creator.classes.*;
 
 public class TestMap {
-    private Serializer serializer;
+    private ObjectMap objects;
 
     @Before
     public void setup() {
-        serializer = new Serializer();
+        objects = new ObjectMap();
     }
 
     private int mapSize() {
-        return serializer.getObjects().keySet().size();
+        return objects.getObjects().keySet().size();
     }
     
     @Test
     public void TestBasic() {
         PrimitiveObject o = new PrimitiveObject();
-        serializer.serialize(o);
+        objects.populate(o);
         assertEquals(1, mapSize());
     }
 
     @Test
     public void TestNullFields() {
         ReferenceObject o = new ReferenceObject();
-        serializer.serialize(o);
+        objects.populate(o);
         assertEquals(1, mapSize());
     }
 
@@ -42,7 +42,7 @@ public class TestMap {
         o.A = a;
         o.B = b;
         o.C = c;
-        serializer.serialize(o);
+        objects.populate(o);
         assertEquals(4, mapSize());
     }
 
@@ -53,7 +53,7 @@ public class TestMap {
         o.A = a;
         o.B = a;
         o.C = a;
-        serializer.serialize(o);
+        objects.populate(o);
         assertEquals(2, mapSize());
     }
 
@@ -66,10 +66,11 @@ public class TestMap {
         ro.A = a;
         ro.B = b;
         o.A = ro;
-        serializer.serialize(o);
+        objects.populate(o);
         assertEquals(4, mapSize());
 
-        serializer.serialize(ro);
+        setup();
+        objects.populate(ro);
         assertEquals(3, mapSize());
     }
 
@@ -84,10 +85,11 @@ public class TestMap {
         ro.C = a;
         o.A = ro;
         o.B = a;
-        serializer.serialize(o);
+        objects.populate(o);
         assertEquals(4, mapSize());
 
-        serializer.serialize(ro);
+        setup();
+        objects.populate(ro);
         assertEquals(3, mapSize());
     }
 
@@ -100,7 +102,7 @@ public class TestMap {
         o.objects = new ObjectType[] {
             a, b, c
         };
-        serializer.serialize(o);
+        objects.populate(o);
         assertEquals(4, mapSize());
     }
 
@@ -110,7 +112,7 @@ public class TestMap {
         o.ints = new int[] { 0, 1, 2 };
         o.doubles = new double[] { 0.0, 1.1, 2.2 };
         o.bools = new boolean[] { true, false, true };
-        serializer.serialize(o);
+        objects.populate(o);
         assertEquals(1, mapSize());
     }
 
@@ -121,7 +123,7 @@ public class TestMap {
         o.objects = new ObjectType[] {
             a, a, a, a, a
         };
-        serializer.serialize(o);
+        objects.populate(o);
         assertEquals(2, mapSize());
     }
 
@@ -142,7 +144,7 @@ public class TestMap {
         o.objects = new ObjectType[] {
             arr1, arr2
         };
-        serializer.serialize(o);
+        objects.populate(o);
         assertEquals(6, mapSize());
     }
 
@@ -158,7 +160,7 @@ public class TestMap {
         o.objects = new ObjectType[] {
             r, c
         };
-        serializer.serialize(o);
+        objects.populate(o);
         assertEquals(5, mapSize());
     }
 
@@ -169,7 +171,7 @@ public class TestMap {
         ReferenceList o = new ReferenceList();
         o.objects.add(a);
         o.objects.add(b);
-        serializer.serialize(o);
+        objects.populate(o);
         assertEquals(3, mapSize());
     }
 
@@ -182,7 +184,7 @@ public class TestMap {
         o.objects.add(b);
         o.objects.add(a);
         o.objects.add(b);
-        serializer.serialize(o);
+        objects.populate(o);
         assertEquals(3, mapSize());
     }
 
@@ -204,7 +206,7 @@ public class TestMap {
         o.objects.add(arr1);
         o.objects.add(arr2);
 
-        serializer.serialize(o);
+        objects.populate(o);
         assertEquals(6, mapSize());
     }
 }

commit f6f2d662fc455cf5e5874c8b1e6d7e0cf08f9c28
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Sun Oct 29 14:22:52 2023 -0600

    Extract method to validate object for map

diff --git a/serializer/Serializer.java b/serializer/Serializer.java
index 3be117d..32b8856 100644
--- a/serializer/Serializer.java
+++ b/serializer/Serializer.java
@@ -56,9 +56,7 @@ public class Serializer {
                 int length = Array.getLength(value);
                 for (int i = 0; i < length; i++) {
                     Object o = Array.get(value, i);
-                    if (o == null) { continue; }
-                    if (isPrimitive(o)) { continue; }
-                    if (objects.containsKey(value.hashCode())) { continue; }
+                    if (!isValidObject(o)) { continue; }
 
                     populateMap(o);
                 }
@@ -68,22 +66,25 @@ public class Serializer {
                 int length = l.size();
                 for (int i = 0; i < length; i++) {
                     Object o = l.get(i);
-                    if (o == null) { continue; }
-                    if (isPrimitive(o)) { continue; }
-                    if (objects.containsKey(value.hashCode())) { continue; }
+                    if (!isValidObject(o)) { continue; }
 
                     populateMap(o);
                 }
             } else {
                 // If it isn't a primitive object, populate it if it isn't already in the list
-                if (isPrimitive(value)) { continue; }
-                if (objects.containsKey(value.hashCode())) { continue; }
-
+                if (!isValidObject(value)) { continue; }
                 populateMap(value);
             }
         }
     }
 
+    private boolean isValidObject(Object o) {
+        if (o == null) { return false; }
+        if (isPrimitive(o)) { return false; }
+        if (objects.containsKey(o.hashCode())) { return false; }
+        return true;
+    }
+
     /* Recursively get all public and protected fields of the object (including superclass) */
     /* Method copied from Assignment 2 */
     private Field[] findFields(Class c) { return findFields(c, false); }

commit e72bceb281ccebe518a180d90fa932e104129dad
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Sun Oct 29 14:19:37 2023 -0600

    Map ArrayLists when serializing

diff --git a/serializer/Serializer.java b/serializer/Serializer.java
index 18e1c53..3be117d 100644
--- a/serializer/Serializer.java
+++ b/serializer/Serializer.java
@@ -3,6 +3,7 @@ package serializer;
 import org.jdom2.Document;
 import org.jdom2.Element;
 import java.util.HashMap;
+import java.util.ArrayList;
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
 import java.lang.reflect.Array;
@@ -59,6 +60,18 @@ public class Serializer {
                     if (isPrimitive(o)) { continue; }
                     if (objects.containsKey(value.hashCode())) { continue; }
 
+                    populateMap(o);
+                }
+            } else if (value.getClass() == ArrayList.class) {
+                // Handle ArrayList from java.util.Collections
+                ArrayList l = (ArrayList)value;
+                int length = l.size();
+                for (int i = 0; i < length; i++) {
+                    Object o = l.get(i);
+                    if (o == null) { continue; }
+                    if (isPrimitive(o)) { continue; }
+                    if (objects.containsKey(value.hashCode())) { continue; }
+
                     populateMap(o);
                 }
             } else {
diff --git a/unit_tests/TestMap.java b/unit_tests/TestMap.java
index 28720c0..7bc7da5 100644
--- a/unit_tests/TestMap.java
+++ b/unit_tests/TestMap.java
@@ -23,14 +23,14 @@ public class TestMap {
     public void TestBasic() {
         PrimitiveObject o = new PrimitiveObject();
         serializer.serialize(o);
-        assertEquals(mapSize(), 1);
+        assertEquals(1, mapSize());
     }
 
     @Test
     public void TestNullFields() {
         ReferenceObject o = new ReferenceObject();
         serializer.serialize(o);
-        assertEquals(mapSize(), 1);
+        assertEquals(1, mapSize());
     }
 
     @Test
@@ -43,7 +43,7 @@ public class TestMap {
         o.B = b;
         o.C = c;
         serializer.serialize(o);
-        assertEquals(mapSize(), 4);
+        assertEquals(4, mapSize());
     }
 
     @Test
@@ -54,7 +54,7 @@ public class TestMap {
         o.B = a;
         o.C = a;
         serializer.serialize(o);
-        assertEquals(mapSize(), 2);
+        assertEquals(2, mapSize());
     }
 
     @Test
@@ -67,10 +67,10 @@ public class TestMap {
         ro.B = b;
         o.A = ro;
         serializer.serialize(o);
-        assertEquals(mapSize(), 4);
+        assertEquals(4, mapSize());
 
         serializer.serialize(ro);
-        assertEquals(mapSize(), 3);
+        assertEquals(3, mapSize());
     }
 
     @Test
@@ -85,10 +85,10 @@ public class TestMap {
         o.A = ro;
         o.B = a;
         serializer.serialize(o);
-        assertEquals(mapSize(), 4);
+        assertEquals(4, mapSize());
 
         serializer.serialize(ro);
-        assertEquals(mapSize(), 3);
+        assertEquals(3, mapSize());
     }
 
     @Test
@@ -101,7 +101,7 @@ public class TestMap {
             a, b, c
         };
         serializer.serialize(o);
-        assertEquals(mapSize(), 4);
+        assertEquals(4, mapSize());
     }
 
     @Test
@@ -111,7 +111,7 @@ public class TestMap {
         o.doubles = new double[] { 0.0, 1.1, 2.2 };
         o.bools = new boolean[] { true, false, true };
         serializer.serialize(o);
-        assertEquals(mapSize(), 1);
+        assertEquals(1, mapSize());
     }
 
     @Test
@@ -122,7 +122,7 @@ public class TestMap {
             a, a, a, a, a
         };
         serializer.serialize(o);
-        assertEquals(mapSize(), 2);
+        assertEquals(2, mapSize());
     }
 
     @Test
@@ -143,7 +143,7 @@ public class TestMap {
             arr1, arr2
         };
         serializer.serialize(o);
-        assertEquals(mapSize(), 6);
+        assertEquals(6, mapSize());
     }
 
     @Test
@@ -159,6 +159,52 @@ public class TestMap {
             r, c
         };
         serializer.serialize(o);
-        assertEquals(mapSize(), 5);
+        assertEquals(5, mapSize());
+    }
+
+    @Test
+    public void TestArrayList() {
+        PrimitiveObject a = new PrimitiveObject();
+        PrimitiveObject b = new PrimitiveObject();
+        ReferenceList o = new ReferenceList();
+        o.objects.add(a);
+        o.objects.add(b);
+        serializer.serialize(o);
+        assertEquals(3, mapSize());
+    }
+
+    @Test
+    public void TestArrayListDuplicates() {
+        PrimitiveObject a = new PrimitiveObject();
+        PrimitiveObject b = new PrimitiveObject();
+        ReferenceList o = new ReferenceList();
+        o.objects.add(a);
+        o.objects.add(b);
+        o.objects.add(a);
+        o.objects.add(b);
+        serializer.serialize(o);
+        assertEquals(3, mapSize());
+    }
+
+    @Test
+    public void TestArrayListNestedArray() {
+        PrimitiveObject a = new PrimitiveObject();
+        PrimitiveObject b = new PrimitiveObject();
+        ReferenceArray arr1 = new ReferenceArray();
+        arr1.objects = new ObjectType[] {
+            a, b
+        };
+        PrimitiveObject c = new PrimitiveObject();
+        ReferenceArray arr2 = new ReferenceArray();
+        arr2.objects = new ObjectType[] {
+            c
+        };
+
+        ReferenceList o = new ReferenceList();
+        o.objects.add(arr1);
+        o.objects.add(arr2);
+
+        serializer.serialize(o);
+        assertEquals(6, mapSize());
     }
 }

commit 1c2c71905e475fac05afdc1c3288fbb01c2ac560
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Sun Oct 29 14:04:28 2023 -0600

    Add unit tests for basic serialized mapping

diff --git a/build.bat b/build.bat
index 7cc206e..1405df9 100644
--- a/build.bat
+++ b/build.bat
@@ -4,3 +4,4 @@ javac object_creator/classes/*.java
 javac object_creator/handlers/*.java
 javac object_creator/helpers/*.java
 javac serializer/*.java
+javac unit_tests/*.java
diff --git a/serializer/Serializer.java b/serializer/Serializer.java
index 065ae80..18e1c53 100644
--- a/serializer/Serializer.java
+++ b/serializer/Serializer.java
@@ -10,6 +10,7 @@ import java.lang.reflect.Array;
 @SuppressWarnings("rawtypes")
 public class Serializer {
     private HashMap<Integer, Object> objects;
+    public HashMap<Integer, Object> getObjects() { return objects; }
     private static final Class[] wrapperClasses = new Class[] {
         Boolean.class,
         Character.class,
@@ -34,7 +35,7 @@ public class Serializer {
     }
 
     /* Recursively get all objects associated with obj */
-    private void populateMap(Object obj) {
+    public void populateMap(Object obj) {
         objects.put(obj.hashCode(), obj);
 
         Field[] fields = findFields(obj.getClass());
diff --git a/test.bat b/test.bat
new file mode 100644
index 0000000..3590eee
--- /dev/null
+++ b/test.bat
@@ -0,0 +1 @@
+java org.junit.runner.JUnitCore unit_tests.TestAll
diff --git a/unit_tests/TestAll.java b/unit_tests/TestAll.java
new file mode 100644
index 0000000..b5ff20a
--- /dev/null
+++ b/unit_tests/TestAll.java
@@ -0,0 +1,11 @@
+package unit_tests;
+
+import org.junit.runner.RunWith;
+import org.junit.runners.Suite;
+import org.junit.runners.Suite.SuiteClasses;
+
+@RunWith(Suite.class)
+@SuiteClasses({
+    TestMap.class,
+})
+public class TestAll { }
diff --git a/unit_tests/TestMap.java b/unit_tests/TestMap.java
new file mode 100644
index 0000000..28720c0
--- /dev/null
+++ b/unit_tests/TestMap.java
@@ -0,0 +1,164 @@
+package unit_tests;
+
+import org.junit.Test;
+import org.junit.Before;
+import static org.junit.Assert.assertEquals;
+
+import serializer.Serializer;
+import object_creator.classes.*;
+
+public class TestMap {
+    private Serializer serializer;
+
+    @Before
+    public void setup() {
+        serializer = new Serializer();
+    }
+
+    private int mapSize() {
+        return serializer.getObjects().keySet().size();
+    }
+    
+    @Test
+    public void TestBasic() {
+        PrimitiveObject o = new PrimitiveObject();
+        serializer.serialize(o);
+        assertEquals(mapSize(), 1);
+    }
+
+    @Test
+    public void TestNullFields() {
+        ReferenceObject o = new ReferenceObject();
+        serializer.serialize(o);
+        assertEquals(mapSize(), 1);
+    }
+
+    @Test
+    public void TestRecursion() {
+        ReferenceObject o = new ReferenceObject();
+        PrimitiveObject a = new PrimitiveObject();
+        PrimitiveObject b = new PrimitiveObject();
+        PrimitiveObject c = new PrimitiveObject();
+        o.A = a;
+        o.B = b;
+        o.C = c;
+        serializer.serialize(o);
+        assertEquals(mapSize(), 4);
+    }
+
+    @Test
+    public void TestDuplicateValues() {
+        ReferenceObject o = new ReferenceObject();
+        PrimitiveObject a = new PrimitiveObject();
+        o.A = a;
+        o.B = a;
+        o.C = a;
+        serializer.serialize(o);
+        assertEquals(mapSize(), 2);
+    }
+
+    @Test
+    public void TestNestedRecursion() {
+        ReferenceObject o = new ReferenceObject();
+        PrimitiveObject a = new PrimitiveObject();
+        PrimitiveObject b = new PrimitiveObject();
+        ReferenceObject ro = new ReferenceObject();
+        ro.A = a;
+        ro.B = b;
+        o.A = ro;
+        serializer.serialize(o);
+        assertEquals(mapSize(), 4);
+
+        serializer.serialize(ro);
+        assertEquals(mapSize(), 3);
+    }
+
+    @Test
+    public void TestNestedDuplicates() {
+        ReferenceObject o = new ReferenceObject();
+        PrimitiveObject a = new PrimitiveObject();
+        PrimitiveObject b = new PrimitiveObject();
+        ReferenceObject ro = new ReferenceObject();
+        ro.A = a;
+        ro.B = b;
+        ro.C = a;
+        o.A = ro;
+        o.B = a;
+        serializer.serialize(o);
+        assertEquals(mapSize(), 4);
+
+        serializer.serialize(ro);
+        assertEquals(mapSize(), 3);
+    }
+
+    @Test
+    public void TestBasicArray() {
+        PrimitiveObject a = new PrimitiveObject();
+        PrimitiveObject b = new PrimitiveObject();
+        PrimitiveObject c = new PrimitiveObject();
+        ReferenceArray o = new ReferenceArray();
+        o.objects = new ObjectType[] {
+            a, b, c
+        };
+        serializer.serialize(o);
+        assertEquals(mapSize(), 4);
+    }
+
+    @Test
+    public void TestPrimitiveArray() {
+        PrimitiveArray o = new PrimitiveArray();
+        o.ints = new int[] { 0, 1, 2 };
+        o.doubles = new double[] { 0.0, 1.1, 2.2 };
+        o.bools = new boolean[] { true, false, true };
+        serializer.serialize(o);
+        assertEquals(mapSize(), 1);
+    }
+
+    @Test
+    public void TestDuplicateArray() {
+        PrimitiveObject a = new PrimitiveObject();
+        ReferenceArray o = new ReferenceArray();
+        o.objects = new ObjectType[] {
+            a, a, a, a, a
+        };
+        serializer.serialize(o);
+        assertEquals(mapSize(), 2);
+    }
+
+    @Test
+    public void TestNestedArray() {
+        PrimitiveObject a = new PrimitiveObject();
+        PrimitiveObject b = new PrimitiveObject();
+        PrimitiveObject c = new PrimitiveObject();
+        ReferenceArray arr1 = new ReferenceArray();
+        arr1.objects = new ObjectType[] {
+            a, b
+        };
+        ReferenceArray arr2 = new ReferenceArray();
+        arr2.objects = new ObjectType[] {
+            c
+        };
+        ReferenceArray o = new ReferenceArray();
+        o.objects = new ObjectType[] {
+            arr1, arr2
+        };
+        serializer.serialize(o);
+        assertEquals(mapSize(), 6);
+    }
+
+    @Test
+    public void TestArrayWithReferences() {
+        PrimitiveObject a = new PrimitiveObject();
+        PrimitiveObject b = new PrimitiveObject();
+        ReferenceObject r = new ReferenceObject();
+        r.A = a;
+        r.B = b;
+        PrimitiveObject c = new PrimitiveObject();
+        ReferenceArray o = new ReferenceArray();
+        o.objects = new ObjectType[] {
+            r, c
+        };
+        serializer.serialize(o);
+        assertEquals(mapSize(), 5);
+    }
+}

commit 60bd0897c05f3ff3e2423138d420f77b00a8bde4
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Sun Oct 29 13:50:11 2023 -0600

    Populate hashmap with array values of objects

diff --git a/serializer/Serializer.java b/serializer/Serializer.java
index b14c60e..065ae80 100644
--- a/serializer/Serializer.java
+++ b/serializer/Serializer.java
@@ -5,6 +5,7 @@ import org.jdom2.Element;
 import java.util.HashMap;
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
+import java.lang.reflect.Array;
 
 @SuppressWarnings("rawtypes")
 public class Serializer {
@@ -23,9 +24,9 @@ public class Serializer {
     };
 
     public Document serialize(Object obj) {
+        objects = new HashMap<Integer, Object>();
         populateMap(obj);
 
-        objects = new HashMap<Integer, Object>();
         Element root = new Element("serialized");
         Document doc = new Document(root);
 
@@ -47,8 +48,18 @@ public class Serializer {
                 continue;
             }
 
+            if (value == null) { continue; }
             if (f.getType().isArray()) {
                 // Handle array
+                int length = Array.getLength(value);
+                for (int i = 0; i < length; i++) {
+                    Object o = Array.get(value, i);
+                    if (o == null) { continue; }
+                    if (isPrimitive(o)) { continue; }
+                    if (objects.containsKey(value.hashCode())) { continue; }
+
+                    populateMap(o);
+                }
             } else {
                 // If it isn't a primitive object, populate it if it isn't already in the list
                 if (isPrimitive(value)) { continue; }

commit 4f1aa5fe4377889e376c3ab6e072a8a3e0359f0a
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Sun Oct 29 13:39:09 2023 -0600

    Get all non-array objects associated with the given object in serializer

diff --git a/build.bat b/build.bat
index 7ea545c..7cc206e 100644
--- a/build.bat
+++ b/build.bat
@@ -3,3 +3,4 @@ javac object_creator/*.java
 javac object_creator/classes/*.java
 javac object_creator/handlers/*.java
 javac object_creator/helpers/*.java
+javac serializer/*.java
diff --git a/lib/jdom.jar b/lib/jdom.jar
new file mode 100644
index 0000000..da95839
Binary files /dev/null and b/lib/jdom.jar differ
diff --git a/object_creator/helpers/ObjectHelper.java b/object_creator/helpers/ObjectHelper.java
index 54ac043..9b0116a 100644
--- a/object_creator/helpers/ObjectHelper.java
+++ b/object_creator/helpers/ObjectHelper.java
@@ -3,8 +3,8 @@ package object_creator.helpers;
 import asciiPanel.AsciiPanel;
 import object_creator.classes.*;
 
+@SuppressWarnings("rawtypes")
 public class ObjectHelper {
-    @SuppressWarnings("rawtypes")
     public static String getTypeString(ObjectType o) {
         Class c = o.getClass();
         if (c == PrimitiveObject.class) {
@@ -21,7 +21,6 @@ public class ObjectHelper {
         return "";
     }
 
-    @SuppressWarnings("rawtypes")
     public static String[] getFields(ObjectType o) {
         Class c = o.getClass();
         if (c == PrimitiveObject.class) {
@@ -38,7 +37,6 @@ public class ObjectHelper {
         return new String[0];
     }
 
-    @SuppressWarnings("rawtypes")
     public static void displayObject(ObjectType o, AsciiPanel terminal, int x, int y) {
         Class c = o.getClass();
         if (c == PrimitiveObject.class) {
diff --git a/serializer/Serializer.java b/serializer/Serializer.java
new file mode 100644
index 0000000..b14c60e
--- /dev/null
+++ b/serializer/Serializer.java
@@ -0,0 +1,111 @@
+package serializer;
+
+import org.jdom2.Document;
+import org.jdom2.Element;
+import java.util.HashMap;
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+
+@SuppressWarnings("rawtypes")
+public class Serializer {
+    private HashMap<Integer, Object> objects;
+    private static final Class[] wrapperClasses = new Class[] {
+        Boolean.class,
+        Character.class,
+        Byte.class,
+        Short.class,
+        Integer.class,
+        Long.class,
+        Float.class,
+        Double.class,
+        Void.class,
+        java.lang.String.class
+    };
+
+    public Document serialize(Object obj) {
+        populateMap(obj);
+
+        objects = new HashMap<Integer, Object>();
+        Element root = new Element("serialized");
+        Document doc = new Document(root);
+
+        return doc;
+    }
+
+    /* Recursively get all objects associated with obj */
+    private void populateMap(Object obj) {
+        objects.put(obj.hashCode(), obj);
+
+        Field[] fields = findFields(obj.getClass());
+        for (Field f : fields) {
+            Object value;
+            try {
+                value = f.get(obj);
+            } catch (NullPointerException e) {
+                continue;
+            } catch (IllegalAccessException e) {
+                continue;
+            }
+
+            if (f.getType().isArray()) {
+                // Handle array
+            } else {
+                // If it isn't a primitive object, populate it if it isn't already in the list
+                if (isPrimitive(value)) { continue; }
+                if (objects.containsKey(value.hashCode())) { continue; }
+
+                populateMap(value);
+            }
+        }
+    }
+
+    /* Recursively get all public and protected fields of the object (including superclass) */
+    /* Method copied from Assignment 2 */
+    private Field[] findFields(Class c) { return findFields(c, false); }
+    private Field[] findFields(Class c, boolean isSuperclass) {
+        Field[] fs = c.getDeclaredFields();
+
+        for (int i = 0; i < fs.length; i++) {
+            Field f = fs[i];
+            if (Modifier.isProtected(f.getModifiers())) {
+                f.setAccessible(true);
+            }
+            if (!isSuperclass && Modifier.isPrivate(f.getModifiers())) {
+                f.setAccessible(true);
+            }
+        }
+
+        if (c.getSuperclass() == null) { return fs; }
+
+        return concat(fs, findFields(c.getSuperclass(), true));
+    }
+
+    /* Concatenate two arrays of fields as this isn't just default java implementation */
+    /* Method copied from Assignment 2 */
+    private Field[] concat(Field[] a, Field[] b) {
+        int alen = a.length;
+        if (alen == 0) { return b; }
+        
+        int blen = b.length;
+        if (blen == 0) { return a; }
+
+        int len = alen + blen;
+        Field[] f = new Field[len];
+        for (int i = 0; i < alen; i++) {
+            f[i] = a[i];
+        }
+        for (int i = 0; i < blen; i++) {
+            f[i+alen] = b[i];
+        }
+        return f;
+    }
+
+    /* Check if an object is a wrapper object (eg. Integer instead of int) */
+    /* Method copied from Assignment 2 */
+    private boolean isPrimitive(Object o) {
+        for (Class c : wrapperClasses) {
+            if (o.getClass() == c) { return true; }
+        }
+        return false;
+    }
+}

commit 9673e959b14c5c4d99edd782f45dcc8ba915e867
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Fri Oct 27 13:35:26 2023 -0600

    Suppress rawtypes warning in object helper

diff --git a/object_creator/helpers/ObjectHelper.java b/object_creator/helpers/ObjectHelper.java
index 7898ebe..54ac043 100644
--- a/object_creator/helpers/ObjectHelper.java
+++ b/object_creator/helpers/ObjectHelper.java
@@ -4,6 +4,7 @@ import asciiPanel.AsciiPanel;
 import object_creator.classes.*;
 
 public class ObjectHelper {
+    @SuppressWarnings("rawtypes")
     public static String getTypeString(ObjectType o) {
         Class c = o.getClass();
         if (c == PrimitiveObject.class) {
@@ -20,6 +21,7 @@ public class ObjectHelper {
         return "";
     }
 
+    @SuppressWarnings("rawtypes")
     public static String[] getFields(ObjectType o) {
         Class c = o.getClass();
         if (c == PrimitiveObject.class) {
@@ -36,6 +38,7 @@ public class ObjectHelper {
         return new String[0];
     }
 
+    @SuppressWarnings("rawtypes")
     public static void displayObject(ObjectType o, AsciiPanel terminal, int x, int y) {
         Class c = o.getClass();
         if (c == PrimitiveObject.class) {

commit 00da16fd462a43d5220c2cbb02b8f3fd33355232
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Fri Oct 27 13:29:41 2023 -0600

    Allow editing already-made objects

diff --git a/.vscode/settings.json b/.vscode/settings.json
index 8c0a899..564877b 100644
--- a/.vscode/settings.json
+++ b/.vscode/settings.json
@@ -1,5 +1,5 @@
 {
     "java.project.referencedLibraries": [
-        "lib/**/*.jar"
+        "lib/*.jar"
     ]
 }
\ No newline at end of file
diff --git a/lib/hamcrest.jar b/lib/hamcrest.jar
new file mode 100644
index 0000000..6f62ba0
Binary files /dev/null and b/lib/hamcrest.jar differ
diff --git a/lib/junit.jar b/lib/junit.jar
new file mode 100644
index 0000000..6da55d8
Binary files /dev/null and b/lib/junit.jar differ
diff --git a/object_creator/ObjectCreator.java b/object_creator/ObjectCreator.java
index 209a20d..80e82a2 100644
--- a/object_creator/ObjectCreator.java
+++ b/object_creator/ObjectCreator.java
@@ -2,7 +2,8 @@ package object_creator;
 
 import application.Screen;
 import asciiPanel.AsciiPanel;
-import object_creator.classes.ObjectType;
+import object_creator.classes.*;
+import object_creator.handlers.*;
 import object_creator.helpers.ObjectHelper;
 import java.awt.Color;
 import java.awt.event.KeyEvent;
@@ -13,6 +14,8 @@ public class ObjectCreator extends Screen {
     private ArrayList<ObjectType> objects;
     public ArrayList<ObjectType> getObjects() { return objects; }
     public void addObject(ObjectType newObject) { objects.add(newObject); }
+    public void addObject(int index, ObjectType newObject) { objects.add(index, newObject); }
+    public void remObject(int index) { objects.remove(index); }
 
     public ObjectCreator() {
         objects = new ArrayList<ObjectType>();
@@ -66,8 +69,7 @@ public class ObjectCreator extends Screen {
             int len = objects.size();
             for (i = 0; i < len; i++) {
                 if (selection == i) {
-                    // RETURN NEW EDIT SCREEN FOR objects.get(i);
-                    return this;
+                    return editObject(objects.get(selection), selection);
                 }
             }
             if (selection == len) {
@@ -76,4 +78,18 @@ public class ObjectCreator extends Screen {
         }
         return this;
     }
+
+    private Screen editObject(ObjectType o, int index) {
+        if (o.getClass() == PrimitiveObject.class)
+            return new PrimitiveHandler(this, (PrimitiveObject)o, index);
+        else if (o.getClass() == PrimitiveArray.class)
+            return new PrimitiveArrayHandler(this, (PrimitiveArray)o, index);
+        else if (o.getClass() == ReferenceObject.class)
+            return new ReferenceHandler(this, (ReferenceObject)o, index);
+        else if (o.getClass() == ReferenceArray.class)
+            return new ReferenceArrayHandler(this, (ReferenceArray)o, index);
+        else if (o.getClass() == ReferenceList.class)
+            return new ReferenceListHandler(this, (ReferenceList)o, index);
+        return this;
+    }
 }
diff --git a/object_creator/handlers/PrimitiveArrayHandler.java b/object_creator/handlers/PrimitiveArrayHandler.java
index de60757..a71124d 100644
--- a/object_creator/handlers/PrimitiveArrayHandler.java
+++ b/object_creator/handlers/PrimitiveArrayHandler.java
@@ -17,12 +17,19 @@ public class PrimitiveArrayHandler extends Screen {
     private int selection = 0;
     private boolean editMode; // If the user is editing the name or not
     private String editString = "";
+    private int returnIndex = -1;
 
     public PrimitiveArrayHandler(ObjectCreator objectCreator) {
         this.objectCreator = objectCreator;
         obj = new PrimitiveArray();
     }
 
+    public PrimitiveArrayHandler(ObjectCreator objectCreator, PrimitiveArray obj, int index) {
+        this.objectCreator = objectCreator;
+        this.obj = obj;
+        this.returnIndex = index;
+    }
+
     @Override
     public String title() { return "Creating Primitive Array"; }
 
@@ -74,7 +81,12 @@ public class PrimitiveArrayHandler extends Screen {
             }
         } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
             if (selection == ObjectHelper.getFields(obj).length - 1 + 1) {
-                objectCreator.addObject(obj);
+                if (returnIndex > -1) {
+                    objectCreator.remObject(returnIndex);
+                    objectCreator.addObject(returnIndex, obj);
+                } else {
+                    objectCreator.addObject(obj);
+                }
                 return objectCreator;
             } else if (selection == 0) {
                 if (!editMode)
diff --git a/object_creator/handlers/PrimitiveHandler.java b/object_creator/handlers/PrimitiveHandler.java
index f5c011b..5eaf94b 100644
--- a/object_creator/handlers/PrimitiveHandler.java
+++ b/object_creator/handlers/PrimitiveHandler.java
@@ -15,15 +15,17 @@ public class PrimitiveHandler extends Screen {
     private boolean editMode; // If the user is editing a field or not
     private String editString = "";
     private String errorString = "";
+    private int returnIndex = -1;
 
     public PrimitiveHandler(ObjectCreator objectCreator) {
         this.objectCreator = objectCreator;
         obj = new PrimitiveObject();
     }
 
-    public PrimitiveHandler(ObjectCreator objectCreator, PrimitiveObject obj) {
+    public PrimitiveHandler(ObjectCreator objectCreator, PrimitiveObject obj, int index) {
         this.objectCreator = objectCreator;
         this.obj = obj;
+        this.returnIndex = index;
     }
 
     @Override
@@ -73,7 +75,12 @@ public class PrimitiveHandler extends Screen {
             }
         } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
             if (selection == ObjectHelper.getFields(obj).length - 1 + 1) {
-                objectCreator.addObject(obj);
+                if (returnIndex > -1) {
+                    objectCreator.remObject(returnIndex);
+                    objectCreator.addObject(returnIndex, obj);
+                } else {
+                    objectCreator.addObject(obj);
+                }
                 return objectCreator;
             } else if (!editMode) {
                 editMode = true;
diff --git a/object_creator/handlers/ReferenceArrayHandler.java b/object_creator/handlers/ReferenceArrayHandler.java
index 0753a5d..ca43002 100644
--- a/object_creator/handlers/ReferenceArrayHandler.java
+++ b/object_creator/handlers/ReferenceArrayHandler.java
@@ -17,12 +17,19 @@ public class ReferenceArrayHandler extends Screen {
     private int selection;
     private boolean editMode;
     private String editString = "";
+    private int returnIndex = -1;
 
     public ReferenceArrayHandler(ObjectCreator objectCreator) {
         this.objectCreator = objectCreator;
         objs = new ReferenceArray();
     }
 
+    public ReferenceArrayHandler(ObjectCreator objectCreator, ReferenceArray objs, int index) {
+        this.objectCreator = objectCreator;
+        this.objs = objs;
+        this.returnIndex = index;
+    }
+
     @Override
     public String title() { return "Creating Reference Array"; }
     
@@ -75,7 +82,12 @@ public class ReferenceArrayHandler extends Screen {
                 }
             } else if (selection == 2) {
                 /* Save the object */
-                objectCreator.addObject(objs);
+                if (returnIndex > -1) {
+                    objectCreator.remObject(returnIndex);
+                    objectCreator.addObject(returnIndex, objs);
+                } else {
+                    objectCreator.addObject(objs);
+                }
                 return objectCreator;
             } else {
                 /* Modify the object array */
diff --git a/object_creator/handlers/ReferenceHandler.java b/object_creator/handlers/ReferenceHandler.java
index 27220f0..c337242 100644
--- a/object_creator/handlers/ReferenceHandler.java
+++ b/object_creator/handlers/ReferenceHandler.java
@@ -16,6 +16,7 @@ public class ReferenceHandler extends Screen {
     private int selection;
     private boolean editMode; // Editing the name field of the reference object
     private String editString = "";
+    private int returnIndex = -1;
 
     @Override
     public String title() { return "Creating Reference Object"; }
@@ -25,6 +26,12 @@ public class ReferenceHandler extends Screen {
         obj = new ReferenceObject();
     }
 
+    public ReferenceHandler(ObjectCreator objectCreator, ReferenceObject obj, int index) {
+        this.objectCreator = objectCreator;
+        this.obj = obj;
+        this.returnIndex = index;
+    }
+
     @Override
     public void print(AsciiPanel terminal) {
         drawBorder(terminal);
@@ -81,7 +88,12 @@ public class ReferenceHandler extends Screen {
                 }
             } else if (selection == 4) {
                 /* Save the object */
-                objectCreator.addObject(obj);
+                if (returnIndex > -1) {
+                    objectCreator.remObject(returnIndex);
+                    objectCreator.addObject(returnIndex, obj);
+                } else {
+                    objectCreator.addObject(obj);
+                }
                 return objectCreator;
             } else {
                 /* Handle object selection */
diff --git a/object_creator/handlers/ReferenceListHandler.java b/object_creator/handlers/ReferenceListHandler.java
index 56f891e..72c5961 100644
--- a/object_creator/handlers/ReferenceListHandler.java
+++ b/object_creator/handlers/ReferenceListHandler.java
@@ -16,12 +16,19 @@ public class ReferenceListHandler extends Screen {
     private int selection;
     private boolean editMode;
     private String editString = "";
+    private int returnIndex = -1;
 
     public ReferenceListHandler(ObjectCreator objectCreator) {
         this.objectCreator = objectCreator;
         objs = new ReferenceList();
     }
 
+    public ReferenceListHandler(ObjectCreator objectCreator, ReferenceList objs, int index) {
+        this.objectCreator = objectCreator;
+        this.objs = objs;
+        this.returnIndex = index;
+    }
+
     @Override
     public String title() { return "Creating Reference List"; }
     
@@ -104,7 +111,12 @@ public class ReferenceListHandler extends Screen {
                 return new ObjectSelectorList(this, objs.objects, objectCreator.getObjects());
             } else if (selection == save_object) {
                 /* Save the object */
-                objectCreator.addObject(objs);
+                if (returnIndex > -1) {
+                    objectCreator.remObject(returnIndex);
+                    objectCreator.addObject(returnIndex, objs);
+                } else {
+                    objectCreator.addObject(objs);
+                }
                 return objectCreator;
             } else {
                 /* Modify the object at a position */

commit 5c2fdc7c5a399afdd46178cc2c99da61b1e9c09f
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Fri Oct 27 12:15:48 2023 -0600

    Refactor out different types of Arrays from ModifyArray into several subclasses

diff --git a/object_creator/handlers/PrimitiveArrayHandler.java b/object_creator/handlers/PrimitiveArrayHandler.java
index 8190a00..de60757 100644
--- a/object_creator/handlers/PrimitiveArrayHandler.java
+++ b/object_creator/handlers/PrimitiveArrayHandler.java
@@ -6,7 +6,9 @@ import application.Screen;
 import asciiPanel.AsciiPanel;
 import object_creator.ObjectCreator;
 import object_creator.classes.PrimitiveArray;
-import object_creator.helpers.ModifyArray;
+import object_creator.helpers.ModifyIntArray;
+import object_creator.helpers.ModifyDoubleArray;
+import object_creator.helpers.ModifyBoolArray;
 import object_creator.helpers.ObjectHelper;
 
 public class PrimitiveArrayHandler extends Screen {
@@ -84,13 +86,13 @@ public class PrimitiveArrayHandler extends Screen {
                 }
             } else if (selection == 1) {
                 if (obj.ints == null) { obj.ints = new int[0]; }
-                return new ModifyArray(this, obj.ints);
+                return new ModifyIntArray(this, obj.ints);
             } else if (selection == 2) {
                 if (obj.doubles == null) { obj.doubles = new double[0]; }
-                return new ModifyArray(this, obj.doubles);
+                return new ModifyDoubleArray(this, obj.doubles);
             } else if (selection == 3) {
                 if (obj.bools == null) { obj.bools = new boolean[0]; }
-                return new ModifyArray(this, obj.bools);
+                return new ModifyBoolArray(this, obj.bools);
             }
         } else if (key.getKeyCode() == KeyEvent.VK_ESCAPE) {
             if (editMode) {
diff --git a/object_creator/handlers/ReferenceArrayHandler.java b/object_creator/handlers/ReferenceArrayHandler.java
index 4ae8a31..0753a5d 100644
--- a/object_creator/handlers/ReferenceArrayHandler.java
+++ b/object_creator/handlers/ReferenceArrayHandler.java
@@ -8,7 +8,7 @@ import java.awt.Color;
 import object_creator.ObjectCreator;
 import object_creator.classes.ObjectType;
 import object_creator.classes.ReferenceArray;
-import object_creator.helpers.ModifyArray;
+import object_creator.helpers.ModifyObjectArray;
 import object_creator.helpers.ObjectHelper;
 
 public class ReferenceArrayHandler extends Screen {
@@ -82,7 +82,7 @@ public class ReferenceArrayHandler extends Screen {
                 ObjectType[] arr;
                 if (objs.objects == null) { arr = new ObjectType[0]; }
                 else { arr = objs.objects; }
-                return new ModifyArray(this, arr);
+                return new ModifyObjectArray(this, arr);
             }
         } else if (editMode) {
             try {
diff --git a/object_creator/helpers/ModifyArray.java b/object_creator/helpers/ModifyArray.java
index 51558c3..34bff7a 100644
--- a/object_creator/helpers/ModifyArray.java
+++ b/object_creator/helpers/ModifyArray.java
@@ -4,26 +4,30 @@ import java.awt.Color;
 import java.awt.event.KeyEvent;
 import application.Screen;
 import asciiPanel.AsciiPanel;
-import object_creator.classes.ObjectType;
-import object_creator.handlers.PrimitiveArrayHandler;
-import object_creator.handlers.ReferenceArrayHandler;
 
-public class ModifyArray extends Screen {
-    private PrimitiveArrayHandler handler;
-    private ReferenceArrayHandler refHandler;
-    private int[] ints;
-    private double[] doubles;
-    private boolean[] bools;
-    private ObjectType[] objects;
-    private int selection;
-    private boolean editMode;
-    private String editString = "";
-    private String errorString = "";
+public abstract class ModifyArray extends Screen {
+    protected int selection;
+    protected boolean editMode;
+    protected String editString = "";
+    protected String errorString = "";
 
-    public ModifyArray(PrimitiveArrayHandler handler, int[] ints) { this.handler = handler; this.ints = ints; }
-    public ModifyArray(PrimitiveArrayHandler handler, double[] doubles) { this.handler = handler; this.doubles = doubles; }
-    public ModifyArray(PrimitiveArrayHandler handler, boolean[] bools) { this.handler = handler; this.bools = bools; }
-    public ModifyArray(ReferenceArrayHandler refHandler, ObjectType[] objects) { this.refHandler = refHandler; this.objects = objects; }
+    /* Get length of the array we are modifying */
+    protected abstract int getLength();
+
+    /* Print the info of the array */
+    protected abstract void printArray(AsciiPanel terminal);
+
+    /* Save the array */
+    protected abstract void saveNewArray();
+
+    /* Figure out what screen to return to */
+    protected abstract Screen getReturnScreen();
+
+    /* Save the selected value of the array */
+    protected abstract boolean saveSelection(int index);
+
+    /* Resize the array to a given length */
+    protected abstract void resizeArray(int newLen);
 
     @Override
     public String title() { return "Edit Array"; }
@@ -32,10 +36,8 @@ public class ModifyArray extends Screen {
     public void print(AsciiPanel terminal) {
         drawBorder(terminal);
 
-        if (ints != null) { printLength(terminal, ints.length); printInts(terminal); }
-        else if (doubles != null) { printLength(terminal, doubles.length); printDoubles(terminal); }
-        else if (bools != null) { printLength(terminal, bools.length); printBools(terminal); }
-        else if (objects != null) { printLength(terminal, objects.length); printObjects(terminal); }
+        printLength(terminal);
+        printArray(terminal);
 
         if (errorString.length() > 0)
             terminal.write("Error: " + errorString, 8, terminal.getHeightInCharacters() - 3, Color.RED);
@@ -43,12 +45,7 @@ public class ModifyArray extends Screen {
 
     @Override
     public Screen input(KeyEvent key) {
-        int length;
-        if (ints != null) { length = ints.length; }
-        else if (doubles != null) { length = doubles.length; }
-        else if (bools != null) { length = bools.length; }
-        else if (objects != null) { length = objects.length; }
-        else { return handler; }
+        int length = getLength();
 
         if (key.getKeyCode() == KeyEvent.VK_DOWN) {
             if (!editMode) {
@@ -62,15 +59,10 @@ public class ModifyArray extends Screen {
             }
         } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
             if (selection == length + 1) {
-                if (ints != null) { handler.saveNewArray(ints); }
-                else if (doubles != null) { handler.saveNewArray(doubles); }
-                else if (bools != null) { handler.saveNewArray(bools); }
-                else if (objects != null) { refHandler.saveNewArray(objects); }
+                saveNewArray();
+
                 return getReturnScreen();
             } else if (!editMode) {
-                if (objects != null && selection > 0) {
-                    return new ObjectSelectorArray(this, objects, refHandler.getObjects(), selection - 1);
-                }
                 editMode = true;
             } else {
                 boolean pass = saveEdit();
@@ -103,122 +95,18 @@ public class ModifyArray extends Screen {
         return this;
     }
 
-    private Screen getReturnScreen() {
-        if (handler != null) { return handler; }
-        else { return refHandler; }
-    }
-
-    private void printLength(AsciiPanel terminal, int len) {
+    private void printLength(AsciiPanel terminal) {
         Color c = (selection == 0) ? Color.GREEN : Color.WHITE;
         String s;
         if (selection == 0 && editMode) {
             s = "Length = " + editString;
             terminal.write(" ", 4 + s.length(), 5, Color.BLACK, Color.LIGHT_GRAY);
         } else {
-            s = "Length = " + Integer.toString(len);
+            s = "Length = " + Integer.toString(getLength());
         }
         terminal.write(s, 4, 5, c);
     }
 
-    private void printInts(AsciiPanel terminal) {
-        int x = 4;
-        int y = 3;
-        terminal.write("int[] ints", x, y);
-        y += 3;
-        x += 4;
-
-        Color c;
-        String s;
-        for (int i = 0; i < ints.length; i++) {
-            c = (selection == i + 1) ? Color.GREEN : Color.WHITE;
-
-            if (selection == i + 1 && editMode) {
-                s = "[" + Integer.toString(i) + "] " + editString;
-                terminal.write(" ", x + s.length(), y, Color.BLACK, Color.LIGHT_GRAY);
-            } else {
-                s = "[" + Integer.toString(i) + "] " + ints[i];
-            }
-            terminal.write(s, x, y++, c);
-        }
-
-        c = (selection == ints.length + 1) ? Color.GREEN : Color.WHITE;
-        terminal.write("Save Array", x - 4, ++y, c);
-    }
-
-    private void printDoubles(AsciiPanel terminal) {
-        int x = 4;
-        int y = 3;
-        terminal.write("double[] doubles", x, y);
-        y += 3;
-        x += 4;
-
-        Color c;
-        String s;
-        for (int i = 0; i < doubles.length; i++) {
-            c = (selection == i + 1) ? Color.GREEN : Color.WHITE;
-
-            if (selection == i + 1 && editMode) {
-                s = "[" + Integer.toString(i) + "] " + editString;
-                terminal.write(" ", x + s.length(), y, Color.BLACK, Color.LIGHT_GRAY);
-            } else {
-                s = "[" + Integer.toString(i) + "] " + doubles[i];
-            }
-            terminal.write(s, x, y++, c);
-        }
-
-        c = (selection == doubles.length + 1) ? Color.GREEN : Color.WHITE;
-        terminal.write("Save Array", x - 4, ++y, c);
-    }
-
-    private void printBools(AsciiPanel terminal) {
-        int x = 4;
-        int y = 3;
-        terminal.write("boolean[] bools", x, y);
-        y += 3;
-        x += 4;
-
-        Color c;
-        String s;
-        for (int i = 0; i < bools.length; i++) {
-            c = (selection == i + 1) ? Color.GREEN : Color.WHITE;
-
-            if (selection == i + 1 && editMode) {
-                s = "[" + Integer.toString(i) + "] " + editString;
-                terminal.write(" ", x + s.length(), y, Color.BLACK, Color.LIGHT_GRAY);
-            } else {
-                s = "[" + Integer.toString(i) + "] " + bools[i];
-            }
-            terminal.write(s, x, y++, c);
-        }
-
-        c = (selection == bools.length + 1) ? Color.GREEN : Color.WHITE;
-        terminal.write("Save Array", x - 4, ++y, c);
-    }
-
-    private void printObjects(AsciiPanel terminal) {
-        int x = 4;
-        int y = 3;
-        terminal.write("Object[] objects", x, y);
-        y += 3;
-        x += 4;
-
-        Color c;
-        String s;
-        for (int i = 0; i < objects.length; i++) {
-            c = (selection == i + 1) ? Color.GREEN : Color.WHITE;
-            s = "[" + Integer.toString(i) + "] ";
-            if (objects[i] != null) {
-                s += objects[i].name + "  (" + ObjectHelper.getTypeString(objects[i]) + ")";
-            } else {
-                s += "null";
-            }
-            terminal.write(s, x, y++, c);
-        }
-
-        c = (selection == objects.length + 1) ? Color.GREEN : Color.WHITE;
-        terminal.write("Save Array", x - 4, ++y, c);
-    }
-
     private boolean saveEdit() {
         if (selection == 0) {
             try {
@@ -231,53 +119,6 @@ public class ModifyArray extends Screen {
             }
         }
 
-        try {
-            if (ints != null) {
-                ints[selection - 1] = Integer.valueOf(editString);
-                return true;
-            } else if (doubles != null) {
-                doubles[selection - 1] = Double.valueOf(editString);
-                return true;
-            } else if (bools != null) {
-                bools[selection - 1] = Boolean.valueOf(editString);
-                return true;
-            }
-        } catch(Exception e) {
-            errorString = "Invalid type";
-        }
-        return false;
-    }
-
-    private void resizeArray(int newLen) {
-        if (ints != null) {
-            int[] newInts = new int[newLen];
-            for (int i = 0; i < ints.length; i++) {
-                if (i >= newLen) { break; }
-                newInts[i] = ints[i];
-            }
-            ints = newInts;
-        } else if (doubles != null) { 
-            double[] newDoubles = new double[newLen];
-            for (int i = 0; i < doubles.length; i++) {
-                if (i >= newLen) { break; }
-                newDoubles[i] = doubles[i];
-            }
-            doubles = newDoubles;
-        } else if (bools != null) { 
-            boolean[] newBools = new boolean[newLen];
-            for (int i = 0; i < bools.length; i++) {
-                if (i >= newLen) { break; }
-                newBools[i] = bools[i];
-            }
-            bools = newBools;
-        } else if (objects != null) { 
-            ObjectType[] newObjects = new ObjectType[newLen];
-            for (int i = 0; i < objects.length; i++) {
-                if (i >= newLen) { break; }
-                newObjects[i] = objects[i];
-            }
-            objects = newObjects;
-        }
-
+        return saveSelection(selection - 1);
     }
 }
diff --git a/object_creator/helpers/ModifyBoolArray.java b/object_creator/helpers/ModifyBoolArray.java
new file mode 100644
index 0000000..5de1cb9
--- /dev/null
+++ b/object_creator/helpers/ModifyBoolArray.java
@@ -0,0 +1,78 @@
+package object_creator.helpers;
+
+import asciiPanel.AsciiPanel;
+import java.awt.Color;
+import application.Screen;
+import object_creator.handlers.PrimitiveArrayHandler;
+
+public class ModifyBoolArray extends ModifyArray {
+    private PrimitiveArrayHandler handler;
+    private boolean[] bools;
+
+    public ModifyBoolArray(PrimitiveArrayHandler handler, boolean[] bools) {
+        this.handler = handler;
+        this.bools = bools;
+    }
+
+    @Override
+    protected int getLength() { return this.bools.length; }
+    
+    @Override
+    protected void printArray(AsciiPanel terminal) {
+        int x = 4;
+        int y = 3;
+        terminal.write("boolean[] bools", x, y);
+        y += 3;
+        x += 4;
+
+        Color c;
+        String s;
+        for (int i = 0; i < bools.length; i++) {
+            c = (selection == i + 1) ? Color.GREEN : Color.WHITE;
+
+            if (selection == i + 1 && editMode) {
+                s = "[" + Integer.toString(i) + "] " + editString;
+                terminal.write(" ", x + s.length(), y, Color.BLACK, Color.LIGHT_GRAY);
+            } else {
+                s = "[" + Integer.toString(i) + "] " + bools[i];
+            }
+            terminal.write(s, x, y++, c);
+        }
+
+        c = (selection == bools.length + 1) ? Color.GREEN : Color.WHITE;
+        terminal.write("Save Array", x - 4, ++y, c);
+    }
+
+    @Override
+    protected void saveNewArray() {
+        handler.saveNewArray(bools);
+    }
+
+    @Override
+    protected Screen getReturnScreen() {
+        return handler;
+    }
+
+    @Override
+    protected boolean saveSelection(int index) {
+        try {
+            if (bools != null) {
+                bools[index] = Boolean.valueOf(editString);
+                return true;
+            }
+        } catch(Exception e) {
+            errorString = "Invalid type, must be Boolean";
+        }
+        return false;
+    }
+
+    @Override
+    protected void resizeArray(int newLen) {
+        boolean[] newBools = new boolean[newLen];
+        for (int i = 0; i < bools.length; i++) {
+            if (i >= newLen) { break; }
+            newBools[i] = bools[i];
+        }
+        bools = newBools;
+    }
+}
diff --git a/object_creator/helpers/ModifyDoubleArray.java b/object_creator/helpers/ModifyDoubleArray.java
new file mode 100644
index 0000000..574f49f
--- /dev/null
+++ b/object_creator/helpers/ModifyDoubleArray.java
@@ -0,0 +1,78 @@
+package object_creator.helpers;
+
+import asciiPanel.AsciiPanel;
+import java.awt.Color;
+import application.Screen;
+import object_creator.handlers.PrimitiveArrayHandler;
+
+public class ModifyDoubleArray extends ModifyArray {
+    private PrimitiveArrayHandler handler;
+    private double[] doubles;
+
+    public ModifyDoubleArray(PrimitiveArrayHandler handler, double[] doubles) {
+        this.handler = handler;
+        this.doubles = doubles;
+    }
+
+    @Override
+    protected int getLength() { return this.doubles.length; }
+    
+    @Override
+    protected void printArray(AsciiPanel terminal) {
+        int x = 4;
+        int y = 3;
+        terminal.write("double[] doubles", x, y);
+        y += 3;
+        x += 4;
+
+        Color c;
+        String s;
+        for (int i = 0; i < doubles.length; i++) {
+            c = (selection == i + 1) ? Color.GREEN : Color.WHITE;
+
+            if (selection == i + 1 && editMode) {
+                s = "[" + Integer.toString(i) + "] " + editString;
+                terminal.write(" ", x + s.length(), y, Color.BLACK, Color.LIGHT_GRAY);
+            } else {
+                s = "[" + Integer.toString(i) + "] " + doubles[i];
+            }
+            terminal.write(s, x, y++, c);
+        }
+
+        c = (selection == doubles.length + 1) ? Color.GREEN : Color.WHITE;
+        terminal.write("Save Array", x - 4, ++y, c);
+    }
+
+    @Override
+    protected void saveNewArray() {
+        handler.saveNewArray(doubles);
+    }
+
+    @Override
+    protected Screen getReturnScreen() {
+        return handler;
+    }
+
+    @Override
+    protected boolean saveSelection(int index) {
+        try {
+            if (doubles != null) {
+                doubles[index] = Double.valueOf(editString);
+                return true;
+            }
+        } catch(Exception e) {
+            errorString = "Invalid type, must be Double";
+        }
+        return false;
+    }
+
+    @Override
+    protected void resizeArray(int newLen) {
+        double[] newDoubles = new double[newLen];
+        for (int i = 0; i < doubles.length; i++) {
+            if (i >= newLen) { break; }
+            newDoubles[i] = doubles[i];
+        }
+        doubles = newDoubles;
+    }
+}
diff --git a/object_creator/helpers/ModifyIntArray.java b/object_creator/helpers/ModifyIntArray.java
new file mode 100644
index 0000000..e991ed2
--- /dev/null
+++ b/object_creator/helpers/ModifyIntArray.java
@@ -0,0 +1,78 @@
+package object_creator.helpers;
+
+import asciiPanel.AsciiPanel;
+import java.awt.Color;
+import application.Screen;
+import object_creator.handlers.PrimitiveArrayHandler;
+
+public class ModifyIntArray extends ModifyArray {
+    private PrimitiveArrayHandler handler;
+    private int[] ints;
+
+    public ModifyIntArray(PrimitiveArrayHandler handler, int[] ints) {
+        this.handler = handler;
+        this.ints = ints;
+    }
+
+    @Override
+    protected int getLength() { return this.ints.length; }
+    
+    @Override
+    protected void printArray(AsciiPanel terminal) {
+        int x = 4;
+        int y = 3;
+        terminal.write("int[] ints", x, y);
+        y += 3;
+        x += 4;
+
+        Color c;
+        String s;
+        for (int i = 0; i < ints.length; i++) {
+            c = (selection == i + 1) ? Color.GREEN : Color.WHITE;
+
+            if (selection == i + 1 && editMode) {
+                s = "[" + Integer.toString(i) + "] " + editString;
+                terminal.write(" ", x + s.length(), y, Color.BLACK, Color.LIGHT_GRAY);
+            } else {
+                s = "[" + Integer.toString(i) + "] " + ints[i];
+            }
+            terminal.write(s, x, y++, c);
+        }
+
+        c = (selection == ints.length + 1) ? Color.GREEN : Color.WHITE;
+        terminal.write("Save Array", x - 4, ++y, c);
+    }
+
+    @Override
+    protected void saveNewArray() {
+        handler.saveNewArray(ints);
+    }
+
+    @Override
+    protected Screen getReturnScreen() {
+        return handler;
+    }
+
+    @Override
+    protected boolean saveSelection(int index) {
+        try {
+            if (ints != null) {
+                ints[index] = Integer.valueOf(editString);
+                return true;
+            }
+        } catch(Exception e) {
+            errorString = "Invalid type, must be Integer";
+        }
+        return false;
+    }
+
+    @Override
+    protected void resizeArray(int newLen) {
+        int[] newInts = new int[newLen];
+        for (int i = 0; i < ints.length; i++) {
+            if (i >= newLen) { break; }
+            newInts[i] = ints[i];
+        }
+        ints = newInts;
+    }
+}
diff --git a/object_creator/helpers/ModifyObjectArray.java b/object_creator/helpers/ModifyObjectArray.java
new file mode 100644
index 0000000..f5e4947
--- /dev/null
+++ b/object_creator/helpers/ModifyObjectArray.java
@@ -0,0 +1,83 @@
+package object_creator.helpers;
+
+import asciiPanel.AsciiPanel;
+import java.awt.event.KeyEvent;
+import java.awt.Color;
+import application.Screen;
+import object_creator.classes.ObjectType;
+import object_creator.handlers.ReferenceArrayHandler;
+
+public class ModifyObjectArray extends ModifyArray {
+    private ReferenceArrayHandler handler;
+    private ObjectType[] objs;
+
+    public ModifyObjectArray(ReferenceArrayHandler handler, ObjectType[] objs) {
+        this.handler = handler;
+        this.objs = objs;
+    }
+
+    @Override
+    protected int getLength() { return this.objs.length; }
+    
+    @Override
+    protected void printArray(AsciiPanel terminal) {
+        int x = 4;
+        int y = 3;
+        terminal.write("Object[] objects", x, y);
+        y += 3;
+        x += 4;
+
+        Color c;
+        String s;
+        for (int i = 0; i < objs.length; i++) {
+            c = (selection == i + 1) ? Color.GREEN : Color.WHITE;
+            s = "[" + Integer.toString(i) + "] ";
+            if (objs[i] != null) {
+                s += objs[i].name + "  (" + ObjectHelper.getTypeString(objs[i]) + ")";
+            } else {
+                s += "null";
+            }
+            terminal.write(s, x, y++, c);
+        }
+
+        c = (selection == objs.length + 1) ? Color.GREEN : Color.WHITE;
+        terminal.write("Save Array", x - 4, ++y, c);
+    }
+
+    @Override
+    protected void saveNewArray() {
+        handler.saveNewArray(objs);
+    }
+
+    @Override
+    protected Screen getReturnScreen() {
+        return handler;
+    }
+
+    @Override
+    protected boolean saveSelection(int index) {
+        /* This should never actually be called for an object array */
+        return true;
+    }
+
+    @Override
+    protected void resizeArray(int newLen) {
+        ObjectType[] newObjects = new ObjectType[newLen];
+        for (int i = 0; i < objs.length; i++) {
+            if (i >= newLen) { break; }
+            newObjects[i] = objs[i];
+        }
+        objs = newObjects;
+    }
+
+    @Override
+    public Screen input(KeyEvent key) {
+        /* Need to return an object selection screen in the object array */
+        if (key.getKeyCode() == KeyEvent.VK_ENTER) {
+            if (!editMode && objs != null && selection > 0 && selection < getLength() + 1) {
+                return new ObjectSelectorArray(this, objs, handler.getObjects(), selection - 1);
+            }
+        }
+        return super.input(key);
+    }
+}

commit 0997820e8624db66ccf8375e0a74188ba26a87be
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Thu Oct 26 20:49:49 2023 -0600

    Refactor moving displaying object info from ObjectTypes into static ObjectHelper class

diff --git a/object_creator/ObjectCreator.java b/object_creator/ObjectCreator.java
index feb6154..209a20d 100644
--- a/object_creator/ObjectCreator.java
+++ b/object_creator/ObjectCreator.java
@@ -3,6 +3,7 @@ package object_creator;
 import application.Screen;
 import asciiPanel.AsciiPanel;
 import object_creator.classes.ObjectType;
+import object_creator.helpers.ObjectHelper;
 import java.awt.Color;
 import java.awt.event.KeyEvent;
 import java.util.ArrayList;
@@ -35,11 +36,11 @@ public class ObjectCreator extends Screen {
                 Color c = (i == selection) ? Color.GREEN : Color.WHITE;
                 ObjectType o = objects.get(i);
                 terminal.write(o.name, x, y, c);
-                terminal.write(o.getTypeString(), x+20, y, c);
+                terminal.write(ObjectHelper.getTypeString(o), x+20, y, c);
                 y++;
 
                 if (i == selection) {
-                    o.displayObject(terminal, 40, 8);
+                    ObjectHelper.displayObject(o, terminal, 40, 8);
                 }
             }
         }
diff --git a/object_creator/classes/ObjectType.java b/object_creator/classes/ObjectType.java
index 543b07a..1011591 100644
--- a/object_creator/classes/ObjectType.java
+++ b/object_creator/classes/ObjectType.java
@@ -1,12 +1,5 @@
 package object_creator.classes;
 
-import asciiPanel.AsciiPanel;
-
 public abstract class ObjectType {
     public String name = "<No Name>";
-    public abstract String getTypeString();
-
-    public abstract String[] getFields();
-    public abstract void displayObject(AsciiPanel terminal, int x, int y);
-    public abstract String getStringValue(int i);
 }
diff --git a/object_creator/classes/PrimitiveArray.java b/object_creator/classes/PrimitiveArray.java
index cc4b75d..eb0ebff 100644
--- a/object_creator/classes/PrimitiveArray.java
+++ b/object_creator/classes/PrimitiveArray.java
@@ -1,41 +1,7 @@
 package object_creator.classes;
 
-import asciiPanel.AsciiPanel;
-
 public class PrimitiveArray extends ObjectType {
     public int[] ints;
     public double[] doubles;
     public boolean[] bools;
-
-    @Override
-    public String getTypeString() { return "Primitive Array"; }
-
-    @Override
-    public String[] getFields() {
-        return new String[] {
-            "NAME",
-            "int[] ints",
-            "double[] doubles",
-            "boolean[] bools"
-        };
-    }
-
-    @Override
-    public void displayObject(AsciiPanel terminal, int x, int y) {
-        terminal.write("NAME = " + name, x, y);
-        y++;
-
-        String[] lengths = new String[3];
-        lengths[0] = (ints == null) ? "0" : Integer.toString(ints.length);
-        lengths[1] = (doubles == null) ? "0" : Integer.toString(doubles.length);
-        lengths[2] = (bools == null) ? "0" : Integer.toString(bools.length);
-        for (int i = 1; i < getFields().length; i++) {
-            terminal.write(getFields()[i] + " (len=" + lengths[i - 1] + ")", x, y);
-            y++;
-        }
-    }
-
-    @Override
-    public String getStringValue(int i) { return ""; }
-    
 }
diff --git a/object_creator/classes/PrimitiveObject.java b/object_creator/classes/PrimitiveObject.java
index a19ecf9..9b7b830 100644
--- a/object_creator/classes/PrimitiveObject.java
+++ b/object_creator/classes/PrimitiveObject.java
@@ -1,7 +1,5 @@
 package object_creator.classes;
 
-import asciiPanel.AsciiPanel;
-
 public class PrimitiveObject extends ObjectType {
     public byte b;
     public char c;
@@ -11,46 +9,4 @@ public class PrimitiveObject extends ObjectType {
     public long j;
     public short s;
     public boolean z;
-
-    @Override
-    public String getTypeString() { return "Primitive"; }
-
-    @Override
-    public String[] getFields() {
-        return new String[] {
-            "NAME",
-            "byte b",
-            "char c",
-            "double d",
-            "float f",
-            "int i",
-            "long j",
-            "short s",
-            "boolean z"
-        };
-    }
-
-    @Override
-    public void displayObject(AsciiPanel terminal, int x, int y) {
-        for (int i = 0; i < getFields().length; i++) {
-            terminal.write(getFields()[i] + " = " + getStringValue(i), x, y);
-            y++;
-        }
-    }
-
-    @Override
-    public String getStringValue(int i) {
-        switch(i) {
-            case 0: return name;
-            case 1: return Byte.toString(b);
-            case 2: return Character.toString(c);
-            case 3: return Double.toString(d);
-            case 4: return Float.toString(f);
-            case 5: return Integer.toString(this.i);
-            case 6: return Long.toString(j);
-            case 7: return Short.toString(s);
-            case 8: return Boolean.toString(z);
-            default: return "";
-        }
-    }
 }
diff --git a/object_creator/classes/ReferenceArray.java b/object_creator/classes/ReferenceArray.java
index e219bc0..497a5f1 100644
--- a/object_creator/classes/ReferenceArray.java
+++ b/object_creator/classes/ReferenceArray.java
@@ -1,30 +1,5 @@
 package object_creator.classes;
 
-import asciiPanel.AsciiPanel;
-
 public class ReferenceArray extends ObjectType {
     public ObjectType[] objects;
-
-    @Override
-    public String getTypeString() { return "Reference Array"; }
-
-    @Override
-    public String[] getFields() {
-        return new String[] {
-            "NAME",
-            "Object[] objects"
-        };
-    }
-
-    @Override
-    public void displayObject(AsciiPanel terminal, int x, int y) {
-        terminal.write("NAME = " + name, x, y);
-        y++;
-
-        terminal.write("Object[] objects (len=" + (objects == null ? "0" : Integer.toString(objects.length)) + ")", x, y);
-    }
-
-    @Override
-    public String getStringValue(int i) { return ""; }
-    
 }
diff --git a/object_creator/classes/ReferenceList.java b/object_creator/classes/ReferenceList.java
index e9fb0bf..8252b02 100644
--- a/object_creator/classes/ReferenceList.java
+++ b/object_creator/classes/ReferenceList.java
@@ -1,7 +1,6 @@
 package object_creator.classes;
 
 import java.util.ArrayList;
-import asciiPanel.AsciiPanel;
 
 public class ReferenceList extends ObjectType {
     public ArrayList<ObjectType> objects;
@@ -9,27 +8,4 @@ public class ReferenceList extends ObjectType {
     public ReferenceList() {
         objects = new ArrayList<ObjectType>();
     }
-
-    @Override
-    public String getTypeString() { return "Reference List"; }
-
-    @Override
-    public String[] getFields() {
-        return new String[] {
-            "NAME",
-            "List<Object> objects"
-        };
-    }
-
-    @Override
-    public void displayObject(AsciiPanel terminal, int x, int y) {
-        terminal.write("NAME = " + name, x, y);
-        y++;
-
-        terminal.write("List<Object> objects (len=" + (objects == null ? "0" : Integer.toString(objects.size())) + ")", x, y);
-    }
-
-    @Override
-    public String getStringValue(int i) { return ""; }
-    
 }
diff --git a/object_creator/classes/ReferenceObject.java b/object_creator/classes/ReferenceObject.java
index 9e60712..62d3edc 100644
--- a/object_creator/classes/ReferenceObject.java
+++ b/object_creator/classes/ReferenceObject.java
@@ -1,48 +1,7 @@
 package object_creator.classes;
 
-import asciiPanel.AsciiPanel;
-
 public class ReferenceObject extends ObjectType {
     public ObjectType A;
     public ObjectType B;
     public ObjectType C;
-
-    @Override
-    public String getTypeString() { return "Reference"; }
-
-    @Override
-    public String[] getFields() {
-        return new String[] {
-            "NAME",
-            "Object A",
-            "Object B",
-            "Object C"
-        };
-    }
-
-    @Override
-    public void displayObject(AsciiPanel terminal, int x, int y) {
-        for (int i = 0; i < getFields().length; i++) {
-            terminal.write(getFields()[i] + " = " + getStringValue(i), x, y);
-            y++;
-        }
-    }
-
-    @Override
-    public String getStringValue(int i) {
-        switch(i) {
-            case 0: return name;
-            case 1: 
-                if (A == null) { return "<null>"; }
-                else { return A.name + " (" + A.getTypeString() + ")"; }
-            case 2: 
-                if (B == null) { return "<null>"; }
-                else { return B.name + " (" + B.getTypeString() + ")"; }
-            case 3: 
-                if (C == null) { return "<null>"; }
-                else { return C.name + " (" + C.getTypeString() + ")"; }
-            default: return "";
-        }
-    }
-    
 }
diff --git a/object_creator/handlers/PrimitiveArrayHandler.java b/object_creator/handlers/PrimitiveArrayHandler.java
index 625cb94..8190a00 100644
--- a/object_creator/handlers/PrimitiveArrayHandler.java
+++ b/object_creator/handlers/PrimitiveArrayHandler.java
@@ -7,6 +7,7 @@ import asciiPanel.AsciiPanel;
 import object_creator.ObjectCreator;
 import object_creator.classes.PrimitiveArray;
 import object_creator.helpers.ModifyArray;
+import object_creator.helpers.ObjectHelper;
 
 public class PrimitiveArrayHandler extends Screen {
     private ObjectCreator objectCreator;
@@ -43,9 +44,9 @@ public class PrimitiveArrayHandler extends Screen {
         y++;
 
         int i;
-        for (i = 1; i < obj.getFields().length; i++) {
+        for (i = 1; i < ObjectHelper.getFields(obj).length; i++) {
             c = (i == selection) ? Color.GREEN : Color.WHITE;
-            s = obj.getFields()[i];
+            s = ObjectHelper.getFields(obj)[i];
             terminal.write(s, x, y, c);
             y++;
         }
@@ -62,15 +63,15 @@ public class PrimitiveArrayHandler extends Screen {
         if (key.getKeyCode() == KeyEvent.VK_DOWN) {
             if (!editMode) {
                 selection++;
-                if (selection >= obj.getFields().length + 1) { selection = 0; }
+                if (selection >= ObjectHelper.getFields(obj).length + 1) { selection = 0; }
             }
         } else if (key.getKeyCode() == KeyEvent.VK_UP) {
             if (!editMode) {
                 selection--;
-                if (selection < 0) { selection = obj.getFields().length - 1 + 1; }
+                if (selection < 0) { selection = ObjectHelper.getFields(obj).length - 1 + 1; }
             }
         } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
-            if (selection == obj.getFields().length - 1 + 1) {
+            if (selection == ObjectHelper.getFields(obj).length - 1 + 1) {
                 objectCreator.addObject(obj);
                 return objectCreator;
             } else if (selection == 0) {
@@ -114,8 +115,8 @@ public class PrimitiveArrayHandler extends Screen {
     }
 
     private void drawArrayValues(AsciiPanel terminal, int x, int y) {
-        if (selection == 0 || selection == obj.getFields().length) { return; }
-        terminal.write(obj.getFields()[selection], x, y, Color.WHITE);
+        if (selection == 0 || selection == ObjectHelper.getFields(obj).length) { return; }
+        terminal.write(ObjectHelper.getFields(obj)[selection], x, y, Color.WHITE);
         y += 2;
         switch(selection) {
             case 1:
diff --git a/object_creator/handlers/PrimitiveHandler.java b/object_creator/handlers/PrimitiveHandler.java
index a165374..f5c011b 100644
--- a/object_creator/handlers/PrimitiveHandler.java
+++ b/object_creator/handlers/PrimitiveHandler.java
@@ -6,6 +6,7 @@ import java.awt.event.KeyEvent;
 import asciiPanel.AsciiPanel;
 import object_creator.ObjectCreator;
 import object_creator.classes.PrimitiveObject;
+import object_creator.helpers.ObjectHelper;
 
 public class PrimitiveHandler extends Screen {
     private ObjectCreator objectCreator;
@@ -35,14 +36,14 @@ public class PrimitiveHandler extends Screen {
         int i;
         int x = 4;
         int y = 3;
-        for (i = 0; i < obj.getFields().length; i++) {
+        for (i = 0; i < ObjectHelper.getFields(obj).length; i++) {
             Color c = (i == selection) ? Color.GREEN : Color.WHITE;
             String s;
             if (i == selection && editMode) {
-                s = obj.getFields()[i] + " = " + editString;
+                s = ObjectHelper.getFields(obj)[i] + " = " + editString;
                 terminal.write(" ", x + s.length(), y, Color.BLACK, Color.LIGHT_GRAY);
             } else {
-                s = obj.getFields()[i] + " = " + obj.getStringValue(i);
+                s = ObjectHelper.getFields(obj)[i] + " = " + getValue(i);
             }
             terminal.write(s, x, y, c);
             y++;
@@ -63,15 +64,15 @@ public class PrimitiveHandler extends Screen {
         if (key.getKeyCode() == KeyEvent.VK_DOWN) {
             if (!editMode) {
                 selection++;
-                if (selection >= obj.getFields().length + 1) { selection = 0; }
+                if (selection >= ObjectHelper.getFields(obj).length + 1) { selection = 0; }
             }
         } else if (key.getKeyCode() == KeyEvent.VK_UP) {
             if (!editMode) {
                 selection--;
-                if (selection < 0) { selection = obj.getFields().length - 1 + 1; }
+                if (selection < 0) { selection = ObjectHelper.getFields(obj).length - 1 + 1; }
             }
         } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
-            if (selection == obj.getFields().length - 1 + 1) {
+            if (selection == ObjectHelper.getFields(obj).length - 1 + 1) {
                 objectCreator.addObject(obj);
                 return objectCreator;
             } else if (!editMode) {
@@ -144,4 +145,20 @@ public class PrimitiveHandler extends Screen {
     private void typeError(String type) {
         errorString = "Must be of type " + type;
     }
+
+    private String getValue(int index) {
+        String value = "";
+        switch(index) {
+            case 0: value = obj.name; break;
+            case 1: value = Byte.toString(obj.b); break;
+            case 2: value = Character.toString(obj.c); break;
+            case 3: value = Double.toString(obj.d); break;
+            case 4: value = Float.toString(obj.f); break;
+            case 5: value = Integer.toString(obj.i); break;
+            case 6: value = Long.toString(obj.j); break;
+            case 7: value = Short.toString(obj.s); break;
+            case 8: value = Boolean.toString(obj.z);
+        }
+        return value;
+    }
 }
diff --git a/object_creator/handlers/ReferenceArrayHandler.java b/object_creator/handlers/ReferenceArrayHandler.java
index 2e5d3a1..4ae8a31 100644
--- a/object_creator/handlers/ReferenceArrayHandler.java
+++ b/object_creator/handlers/ReferenceArrayHandler.java
@@ -9,6 +9,7 @@ import object_creator.ObjectCreator;
 import object_creator.classes.ObjectType;
 import object_creator.classes.ReferenceArray;
 import object_creator.helpers.ModifyArray;
+import object_creator.helpers.ObjectHelper;
 
 public class ReferenceArrayHandler extends Screen {
     private ReferenceArray objs;
@@ -44,7 +45,7 @@ public class ReferenceArrayHandler extends Screen {
         y++;
 
         c = (selection == 1) ? Color.GREEN : Color.WHITE;
-        s = objs.getFields()[1];
+        s = ObjectHelper.getFields(objs)[1];
         terminal.write(s, x, y, c);
         drawArrayValues(terminal, 40, 6);
 
@@ -57,10 +58,10 @@ public class ReferenceArrayHandler extends Screen {
     public Screen input(KeyEvent key) {
         if (key.getKeyCode() == KeyEvent.VK_DOWN) {
             selection++;
-            if (selection >= objs.getFields().length + 1) { selection = 0; }
+            if (selection >= ObjectHelper.getFields(objs).length + 1) { selection = 0; }
         } else if (key.getKeyCode() == KeyEvent.VK_UP) {   
             selection--;
-            if (selection < 0) { selection = objs.getFields().length - 1 + 1; }
+            if (selection < 0) { selection = ObjectHelper.getFields(objs).length - 1 + 1; }
         } else if (key.getKeyCode() == KeyEvent.VK_ESCAPE) {
             if (editMode) { editMode = false; }
             else { return objectCreator; }
@@ -103,8 +104,8 @@ public class ReferenceArrayHandler extends Screen {
     }
 
     private void drawArrayValues(AsciiPanel terminal, int x, int y) {
-        if (selection == 0 || selection == objs.getFields().length) { return; }
-        terminal.write(objs.getFields()[selection], x, y, Color.WHITE);
+        if (selection == 0 || selection == ObjectHelper.getFields(objs).length) { return; }
+        terminal.write(ObjectHelper.getFields(objs)[selection], x, y, Color.WHITE);
         y += 2;
         if (objs.objects == null || objs.objects.length == 0) {
             terminal.write("Empty or Null Array", x, y);
@@ -112,7 +113,7 @@ public class ReferenceArrayHandler extends Screen {
             for (ObjectType o : objs.objects) {
                 String s;
                 if (o == null) { s = "null"; }
-                else { s = o.name + "  (" + o.getTypeString() + ")"; }
+                else { s = o.name + "  (" + ObjectHelper.getTypeString(o) + ")"; }
                 terminal.write(s, x, y);
                 y++;
             }
diff --git a/object_creator/handlers/ReferenceHandler.java b/object_creator/handlers/ReferenceHandler.java
index 5722dc9..27220f0 100644
--- a/object_creator/handlers/ReferenceHandler.java
+++ b/object_creator/handlers/ReferenceHandler.java
@@ -7,6 +7,7 @@ import java.awt.Color;
 import object_creator.ObjectCreator;
 import object_creator.classes.ReferenceObject;
 import object_creator.helpers.ObjectSelector;
+import object_creator.helpers.ObjectHelper;
 import object_creator.classes.ObjectType;
 
 public class ReferenceHandler extends Screen {
@@ -31,14 +32,15 @@ public class ReferenceHandler extends Screen {
         int i;
         int x = 4;
         int y = 3;
-        for (i = 0; i < obj.getFields().length; i++) {
+        String[] fields = ObjectHelper.getFields(obj);
+        for (i = 0; i < fields.length; i++) {
             Color c = (i == selection) ? Color.GREEN : Color.WHITE;
             String s;
             if (i == 0 && editMode) {
-                s = obj.getFields()[i] + " = " + editString;
+                s = fields[i] + " = " + editString;
                 terminal.write(" ", x + s.length(), y, Color.BLACK, Color.LIGHT_GRAY);
             } else {
-                s = obj.getFields()[i] + " = " + obj.getStringValue(i);
+                s = fields[i] + " = " + getReferenceValue(i);
             }
 
             terminal.write(s, x, y, c);
@@ -46,9 +48,9 @@ public class ReferenceHandler extends Screen {
 
             if (i == selection) {
                 /* Man this is ugly */
-                if (i == 1 && obj.A != null) obj.A.displayObject(terminal, 40, 8);
-                else if (i == 2 && obj.B != null) obj.B.displayObject(terminal, 40, 8);
-                else if (i == 3 && obj.C != null) obj.C.displayObject(terminal, 40, 8);
+                if (i == 1 && obj.A != null) ObjectHelper.displayObject(obj.A, terminal, 40, 8);
+                else if (i == 2 && obj.B != null) ObjectHelper.displayObject(obj.B, terminal, 40, 8);
+                else if (i == 3 && obj.C != null) ObjectHelper.displayObject(obj.C, terminal, 40, 8);
             }
         }
 
@@ -62,10 +64,10 @@ public class ReferenceHandler extends Screen {
     public Screen input(KeyEvent key) {
         if (key.getKeyCode() == KeyEvent.VK_DOWN) {
             selection++;
-            if (selection >= obj.getFields().length + 1) { selection = 0; }
+            if (selection >= ObjectHelper.getFields(obj).length + 1) { selection = 0; }
         } else if (key.getKeyCode() == KeyEvent.VK_UP) {   
             selection--;
-            if (selection < 0) { selection = obj.getFields().length - 1 + 1; }
+            if (selection < 0) { selection = ObjectHelper.getFields(obj).length - 1 + 1; }
         } else if (key.getKeyCode() == KeyEvent.VK_ESCAPE) {
             if (editMode) { editMode = false; }
             else { return objectCreator; }
@@ -100,6 +102,23 @@ public class ReferenceHandler extends Screen {
         return this;
     }
 
+    private String getReferenceValue(int index) {
+        String value = "";
+        switch(index) {
+            case 0: value = obj.name; break;
+            case 1: 
+                if (obj.A == null) { value = "<null>"; break; }
+                else { value = obj.A.name + " (" + ObjectHelper.getTypeString(obj.A) + ")"; break; }
+            case 2: 
+                if (obj.B == null) { value = "<null>"; break; }
+                else { value = obj.B.name + " (" + ObjectHelper.getTypeString(obj.B) + ")"; break; }
+            case 3: 
+                if (obj.C == null) { value = "<null>"; break; }
+                else { value = obj.C.name + " (" + ObjectHelper.getTypeString(obj.C) + ")"; break; }
+        }
+        return value;
+    }
+
     public void addReference(ObjectType ref) {
         if (selection == 1) { obj.A = ref; }
         if (selection == 2) { obj.B = ref; }
diff --git a/object_creator/handlers/ReferenceListHandler.java b/object_creator/handlers/ReferenceListHandler.java
index 97379df..56f891e 100644
--- a/object_creator/handlers/ReferenceListHandler.java
+++ b/object_creator/handlers/ReferenceListHandler.java
@@ -8,6 +8,7 @@ import object_creator.ObjectCreator;
 import object_creator.classes.ObjectType;
 import object_creator.classes.ReferenceList;
 import object_creator.helpers.ObjectSelectorList;
+import object_creator.helpers.ObjectHelper;
 
 public class ReferenceListHandler extends Screen {
     private ReferenceList objs;
@@ -42,6 +43,7 @@ public class ReferenceListHandler extends Screen {
         terminal.write(s, x, y, c);
         y += 2;
         terminal.write("List Values", x, y);
+        y++;
         x += 2;
 
         int i = 0;
@@ -54,7 +56,7 @@ public class ReferenceListHandler extends Screen {
             for (i = 0; i < objs.objects.size(); i++) {
                 ObjectType o = objs.objects.get(i);
                 c = (selection == (i + 1)) ? Color.GREEN : Color.WHITE;
-                s = o.name + "  (" + o.getTypeString() + ")";
+                s = o.name + "  (" + ObjectHelper.getTypeString(o) + ")";
                 terminal.write(s, x, y, c);
                 y++;
             }
diff --git a/object_creator/helpers/ModifyArray.java b/object_creator/helpers/ModifyArray.java
index 5a80ac7..51558c3 100644
--- a/object_creator/helpers/ModifyArray.java
+++ b/object_creator/helpers/ModifyArray.java
@@ -208,7 +208,7 @@ public class ModifyArray extends Screen {
             c = (selection == i + 1) ? Color.GREEN : Color.WHITE;
             s = "[" + Integer.toString(i) + "] ";
             if (objects[i] != null) {
-                s += objects[i].name + "  (" + objects[i].getTypeString() + ")";
+                s += objects[i].name + "  (" + ObjectHelper.getTypeString(objects[i]) + ")";
             } else {
                 s += "null";
             }
diff --git a/object_creator/helpers/ObjectHelper.java b/object_creator/helpers/ObjectHelper.java
new file mode 100644
index 0000000..7898ebe
--- /dev/null
+++ b/object_creator/helpers/ObjectHelper.java
@@ -0,0 +1,166 @@
+package object_creator.helpers;
+
+import asciiPanel.AsciiPanel;
+import object_creator.classes.*;
+
+public class ObjectHelper {
+    public static String getTypeString(ObjectType o) {
+        Class c = o.getClass();
+        if (c == PrimitiveObject.class) {
+            return "Primitive";
+        } else if (c == PrimitiveArray.class) {
+            return "Primitive Array";
+        } else if (c == ReferenceObject.class) {
+            return "Reference";
+        } else if (c == ReferenceArray.class) {
+            return "Reference Array";
+        } else if (c == ReferenceList.class) {
+            return "Reference List";
+        }
+        return "";
+    }
+
+    public static String[] getFields(ObjectType o) {
+        Class c = o.getClass();
+        if (c == PrimitiveObject.class) {
+            return getPrimitiveFields();
+        } else if (c == PrimitiveArray.class) {
+            return getPrimitiveArrayFields();
+        } else if (c == ReferenceObject.class) {
+            return getReferenceFields();
+        } else if (c == ReferenceArray.class) {
+            return getReferenceArrayFields();
+        } else if (c == ReferenceList.class) {
+            return getReferenceListFields();
+        }
+        return new String[0];
+    }
+
+    public static void displayObject(ObjectType o, AsciiPanel terminal, int x, int y) {
+        Class c = o.getClass();
+        if (c == PrimitiveObject.class) {
+            displayPrimitive((PrimitiveObject)o, terminal, x, y);
+        } else if (c == PrimitiveArray.class) {
+            displayPrimitiveArray((PrimitiveArray)o, terminal, x, y);
+        } else if (c == ReferenceObject.class) {
+            displayReference((ReferenceObject)o, terminal, x, y);
+        } else if (c == ReferenceArray.class) {
+            displayReferenceArray((ReferenceArray)o, terminal, x, y);
+        } else if (c == ReferenceList.class) {
+            displayReferenceList((ReferenceList)o, terminal, x, y);
+        }
+    }
+
+    private static String[] getPrimitiveFields() {
+        return new String[] {
+            "NAME",
+            "byte b",
+            "char c",
+            "double d",
+            "float f",
+            "int i",
+            "long j",
+            "short s",
+            "boolean z"
+        };
+    }
+    
+    private static String[] getPrimitiveArrayFields() {
+        return new String[] {
+            "NAME",
+            "int[] ints",
+            "double[] doubles",
+            "boolean[] bools"
+        };
+    }
+
+    private static String[] getReferenceFields() {
+        return new String[] {
+            "NAME",
+            "Object A",
+            "Object B",
+            "Object C"
+        };
+    }
+
+    private static String[] getReferenceArrayFields() {
+        return new String[] {
+            "NAME",
+            "Object[] objects"
+        };
+    }
+
+    private static String[] getReferenceListFields() {
+        return new String[] {
+            "NAME",
+            "List<Object> objects"
+        };
+    }
+
+    private static void displayPrimitive(PrimitiveObject o, AsciiPanel terminal, int x, int y) {
+        for (int i = 0; i < getFields(o).length; i++) {
+            String value = "";
+            switch(i) {
+                case 0: value = o.name; break;
+                case 1: value = Byte.toString(o.b); break;
+                case 2: value = Character.toString(o.c); break;
+                case 3: value = Double.toString(o.d); break;
+                case 4: value = Float.toString(o.f); break;
+                case 5: value = Integer.toString(o.i); break;
+                case 6: value = Long.toString(o.j); break;
+                case 7: value = Short.toString(o.s); break;
+                case 8: value = Boolean.toString(o.z);
+            }
+            terminal.write(getFields(o)[i] + " = " + value, x, y);
+            y++;
+        }
+    }
+
+    private static void displayPrimitiveArray(PrimitiveArray o, AsciiPanel terminal, int x, int y) {
+        terminal.write("NAME = " + o.name, x, y);
+        y++;
+
+        String[] lengths = new String[3];
+        lengths[0] = (o.ints == null) ? "0" : Integer.toString(o.ints.length);
+        lengths[1] = (o.doubles == null) ? "0" : Integer.toString(o.doubles.length);
+        lengths[2] = (o.bools == null) ? "0" : Integer.toString(o.bools.length);
+        for (int i = 1; i < getFields(o).length; i++) {
+            terminal.write(getFields(o)[i] + " (len=" + lengths[i - 1] + ")", x, y);
+            y++;
+        }
+    }
+
+    private static void displayReference(ReferenceObject o, AsciiPanel terminal, int x, int y) {
+        for (int i = 0; i < getFields(o).length; i++) {
+            String value = "";
+            switch(i) {
+                case 0: value = o.name; break;
+                case 1: 
+                    if (o.A == null) { value = "<null>"; break; }
+                    else { value = o.A.name + " (" + getTypeString(o.A) + ")"; break; }
+                case 2: 
+                    if (o.B == null) { value = "<null>"; break; }
+                    else { value = o.B.name + " (" + getTypeString(o.B) + ")"; break; }
+                case 3: 
+                    if (o.C == null) { value = "<null>"; break; }
+                    else { value = o.C.name + " (" + getTypeString(o.C) + ")"; break; }
+            }
+
+            terminal.write(getFields(o)[i] + " = " + value, x, y);
+            y++;
+        }
+    }
+
+    private static void displayReferenceArray(ReferenceArray o, AsciiPanel terminal, int x, int y) {
+        terminal.write("NAME = " + o.name, x, y);
+        y++;
+        terminal.write("Object[] objects (len=" + (o.objects == null ? "0" : Integer.toString(o.objects.length)) + ")", x, y);
+    }
+
+    private static void displayReferenceList(ReferenceList o, AsciiPanel terminal, int x, int y) {
+        terminal.write("NAME = " + o.name, x, y);
+        y++;
+
+        terminal.write("List<Object> objects (len=" + (o.objects == null ? "0" : Integer.toString(o.objects.size())) + ")", x, y);
+    }
+}
diff --git a/object_creator/helpers/ObjectSelector.java b/object_creator/helpers/ObjectSelector.java
index 8653aca..9031ba7 100644
--- a/object_creator/helpers/ObjectSelector.java
+++ b/object_creator/helpers/ObjectSelector.java
@@ -43,11 +43,11 @@ public class ObjectSelector extends Screen {
                 Color c = (i == selection) ? Color.GREEN : Color.WHITE;
                 ObjectType o = objects.get(i);
                 terminal.write(o.name, x, y, c);
-                terminal.write(o.getTypeString(), x+20, y, c);
+                terminal.write(ObjectHelper.getTypeString(o), x+20, y, c);
                 y++;
 
                 if (i == selection) {
-                    o.displayObject(terminal, 40, 8);
+                    ObjectHelper.displayObject(o, terminal, 40, 8);
                 }
             }
         }

commit 763b8a02cef5fd885337a6cc76d544b52ace3b7a
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Thu Oct 26 15:43:56 2023 -0600

    Add ability to create reference arraylists

diff --git a/object_creator/CreateObject.java b/object_creator/CreateObject.java
index d7076d7..10eb50d 100644
--- a/object_creator/CreateObject.java
+++ b/object_creator/CreateObject.java
@@ -19,6 +19,7 @@ public class CreateObject extends Screen {
         "Reference",
         "Primitive Array",
         "Reference Array",
+        "Reference List"
     };
 
     @Override
@@ -53,6 +54,7 @@ public class CreateObject extends Screen {
                 case 1: return new ReferenceHandler(objectCreator);
                 case 2: return new PrimitiveArrayHandler(objectCreator);
                 case 3: return new ReferenceArrayHandler(objectCreator);
+                case 4: return new ReferenceListHandler(objectCreator);
             }
         } else if (key.getKeyCode() == KeyEvent.VK_ESCAPE) {
             return objectCreator;
diff --git a/object_creator/classes/ReferenceList.java b/object_creator/classes/ReferenceList.java
new file mode 100644
index 0000000..e9fb0bf
--- /dev/null
+++ b/object_creator/classes/ReferenceList.java
@@ -0,0 +1,35 @@
+package object_creator.classes;
+
+import java.util.ArrayList;
+import asciiPanel.AsciiPanel;
+
+public class ReferenceList extends ObjectType {
+    public ArrayList<ObjectType> objects;
+
+    public ReferenceList() {
+        objects = new ArrayList<ObjectType>();
+    }
+
+    @Override
+    public String getTypeString() { return "Reference List"; }
+
+    @Override
+    public String[] getFields() {
+        return new String[] {
+            "NAME",
+            "List<Object> objects"
+        };
+    }
+
+    @Override
+    public void displayObject(AsciiPanel terminal, int x, int y) {
+        terminal.write("NAME = " + name, x, y);
+        y++;
+
+        terminal.write("List<Object> objects (len=" + (objects == null ? "0" : Integer.toString(objects.size())) + ")", x, y);
+    }
+
+    @Override
+    public String getStringValue(int i) { return ""; }
+    
+}
diff --git a/object_creator/handlers/ReferenceListHandler.java b/object_creator/handlers/ReferenceListHandler.java
new file mode 100644
index 0000000..97379df
--- /dev/null
+++ b/object_creator/handlers/ReferenceListHandler.java
@@ -0,0 +1,125 @@
+package object_creator.handlers;
+
+import application.Screen;
+import asciiPanel.AsciiPanel;
+import java.awt.event.KeyEvent;
+import java.awt.Color;
+import object_creator.ObjectCreator;
+import object_creator.classes.ObjectType;
+import object_creator.classes.ReferenceList;
+import object_creator.helpers.ObjectSelectorList;
+
+public class ReferenceListHandler extends Screen {
+    private ReferenceList objs;
+    private ObjectCreator objectCreator;
+    private int selection;
+    private boolean editMode;
+    private String editString = "";
+
+    public ReferenceListHandler(ObjectCreator objectCreator) {
+        this.objectCreator = objectCreator;
+        objs = new ReferenceList();
+    }
+
+    @Override
+    public String title() { return "Creating Reference List"; }
+    
+    @Override
+    public void print(AsciiPanel terminal) {
+        drawBorder(terminal);
+
+        int x = 4;
+        int y = 3;
+
+        Color c = (selection == 0) ? Color.GREEN : Color.WHITE;
+        String s;
+        if (editMode) {
+            s = "NAME = " + editString;
+            terminal.write(" ", x + s.length(), y, Color.BLACK, Color.LIGHT_GRAY);
+        } else {
+            s = "NAME = " + objs.name;
+        }
+        terminal.write(s, x, y, c);
+        y += 2;
+        terminal.write("List Values", x, y);
+        x += 2;
+
+        int i = 0;
+        if (objs.objects.size() == 0) {
+            terminal.write("<Empty List>", x, y);
+            x -= 2;
+            y += 2;
+        }
+        else {
+            for (i = 0; i < objs.objects.size(); i++) {
+                ObjectType o = objs.objects.get(i);
+                c = (selection == (i + 1)) ? Color.GREEN : Color.WHITE;
+                s = o.name + "  (" + o.getTypeString() + ")";
+                terminal.write(s, x, y, c);
+                y++;
+            }
+            x -= 2;
+            y++;
+        }
+
+        c = (selection == (i + 1)) ? Color.GREEN : Color.WHITE;
+        terminal.write("Add Object", x, ++y, c);
+        y++;
+        i++;
+
+        c = (selection == (i + 1)) ? Color.GREEN : Color.WHITE;
+        terminal.write("Save Object", x, ++y, c);
+    }
+
+    @Override
+    public Screen input(KeyEvent key) {
+        if (key.getKeyCode() == KeyEvent.VK_DOWN) {
+            if (!editMode) {
+                selection++;
+                if (selection >= objs.objects.size() + 3) { selection = 0; }
+            }
+        } else if (key.getKeyCode() == KeyEvent.VK_UP) {
+            if (!editMode) {
+                selection--;
+                if (selection < 0) { selection = objs.objects.size() - 1 + 3; }
+            }
+        } else if (key.getKeyCode() == KeyEvent.VK_ESCAPE) {
+            if (editMode) { editMode = false; }
+            else { return objectCreator; }
+        } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
+            int len = objs.objects.size();
+            int add_object = len + 1;
+            int save_object = len + 2;
+            if (selection == 0) {
+                if (editMode) {
+                    editMode = false;
+                    objs.name = editString;
+                } else {
+                    editMode = true;
+                }
+            } else if (selection == add_object) {
+                /* Add a new object */
+                return new ObjectSelectorList(this, objs.objects, objectCreator.getObjects());
+            } else if (selection == save_object) {
+                /* Save the object */
+                objectCreator.addObject(objs);
+                return objectCreator;
+            } else {
+                /* Modify the object at a position */
+                return new ObjectSelectorList(this, objs.objects, objectCreator.getObjects(), selection - 1);
+            }
+        } else if (editMode) {
+            try {
+                if (key.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
+                    if (editString.length() > 0)
+                        editString = editString.substring(0, editString.length() - 1);
+                } else {
+                    char c = key.getKeyChar();
+                    if (c >= 0 && c < 256)
+                        editString += c;
+                }
+            } catch (java.lang.IllegalArgumentException e) { /* Ignore invalid characters */ }
+        }
+        return this;
+    }
+}
diff --git a/object_creator/helpers/ObjectSelectorList.java b/object_creator/helpers/ObjectSelectorList.java
new file mode 100644
index 0000000..0c1a57c
--- /dev/null
+++ b/object_creator/helpers/ObjectSelectorList.java
@@ -0,0 +1,41 @@
+package object_creator.helpers;
+
+import java.util.ArrayList;
+
+import application.Screen;
+import java.awt.event.KeyEvent;
+import object_creator.classes.ObjectType;
+import object_creator.handlers.ReferenceListHandler;
+
+public class ObjectSelectorList extends ObjectSelector {
+    private int index;
+    private ArrayList<ObjectType> obj_list;
+
+    public ObjectSelectorList(ReferenceListHandler refListHandler, ArrayList<ObjectType> obj_list, ArrayList<ObjectType> objects) {
+        super(null, refListHandler, objects);
+        this.obj_list = obj_list;
+        this.index = -1;
+    }
+
+    public ObjectSelectorList(ReferenceListHandler refListHandler, ArrayList<ObjectType> obj_list, ArrayList<ObjectType> objects, int index) {
+        super(null, refListHandler, objects);
+        this.obj_list = obj_list;
+        this.index = index;
+    }
+
+    @Override
+    public Screen input(KeyEvent key) {
+        if (key.getKeyCode() == KeyEvent.VK_ENTER) {
+            if (obj_list != null && objects.size() > 0) {
+                if (index == -1) {
+                    obj_list.add(objects.get(selection));
+                } else {
+                    obj_list.remove(index);
+                    obj_list.add(index, objects.get(selection));
+                }
+                return prevScreen;
+            }
+        }
+        return super.input(key);
+    }
+}

commit 76aa3877b60a1cbb408bb85bf36ef3fecf257d8a
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Wed Oct 25 14:07:34 2023 -0600

    Add ability to create an array of reference objects

diff --git a/object_creator/CreateObject.java b/object_creator/CreateObject.java
index 87bdf65..d7076d7 100644
--- a/object_creator/CreateObject.java
+++ b/object_creator/CreateObject.java
@@ -18,6 +18,7 @@ public class CreateObject extends Screen {
         "Primitive",
         "Reference",
         "Primitive Array",
+        "Reference Array",
     };
 
     @Override
@@ -51,6 +52,7 @@ public class CreateObject extends Screen {
                 case 0: return new PrimitiveHandler(objectCreator);
                 case 1: return new ReferenceHandler(objectCreator);
                 case 2: return new PrimitiveArrayHandler(objectCreator);
+                case 3: return new ReferenceArrayHandler(objectCreator);
             }
         } else if (key.getKeyCode() == KeyEvent.VK_ESCAPE) {
             return objectCreator;
diff --git a/object_creator/classes/ReferenceArray.java b/object_creator/classes/ReferenceArray.java
new file mode 100644
index 0000000..e219bc0
--- /dev/null
+++ b/object_creator/classes/ReferenceArray.java
@@ -0,0 +1,30 @@
+package object_creator.classes;
+
+import asciiPanel.AsciiPanel;
+
+public class ReferenceArray extends ObjectType {
+    public ObjectType[] objects;
+
+    @Override
+    public String getTypeString() { return "Reference Array"; }
+
+    @Override
+    public String[] getFields() {
+        return new String[] {
+            "NAME",
+            "Object[] objects"
+        };
+    }
+
+    @Override
+    public void displayObject(AsciiPanel terminal, int x, int y) {
+        terminal.write("NAME = " + name, x, y);
+        y++;
+
+        terminal.write("Object[] objects (len=" + (objects == null ? "0" : Integer.toString(objects.length)) + ")", x, y);
+    }
+
+    @Override
+    public String getStringValue(int i) { return ""; }
+    
+}
diff --git a/object_creator/handlers/ReferenceArrayHandler.java b/object_creator/handlers/ReferenceArrayHandler.java
new file mode 100644
index 0000000..2e5d3a1
--- /dev/null
+++ b/object_creator/handlers/ReferenceArrayHandler.java
@@ -0,0 +1,125 @@
+package object_creator.handlers;
+
+import application.Screen;
+import asciiPanel.AsciiPanel;
+import java.awt.event.KeyEvent;
+import java.util.ArrayList;
+import java.awt.Color;
+import object_creator.ObjectCreator;
+import object_creator.classes.ObjectType;
+import object_creator.classes.ReferenceArray;
+import object_creator.helpers.ModifyArray;
+
+public class ReferenceArrayHandler extends Screen {
+    private ReferenceArray objs;
+    private ObjectCreator objectCreator;
+    private int selection;
+    private boolean editMode;
+    private String editString = "";
+
+    public ReferenceArrayHandler(ObjectCreator objectCreator) {
+        this.objectCreator = objectCreator;
+        objs = new ReferenceArray();
+    }
+
+    @Override
+    public String title() { return "Creating Reference Array"; }
+    
+    @Override
+    public void print(AsciiPanel terminal) {
+        drawBorder(terminal);
+
+        int x = 4;
+        int y = 3;
+
+        Color c = (selection == 0) ? Color.GREEN : Color.WHITE;
+        String s;
+        if (editMode) {
+            s = "NAME = " + editString;
+            terminal.write(" ", x + s.length(), y, Color.BLACK, Color.LIGHT_GRAY);
+        } else {
+            s = "NAME = " + objs.name;
+        }
+        terminal.write(s, x, y, c);
+        y++;
+
+        c = (selection == 1) ? Color.GREEN : Color.WHITE;
+        s = objs.getFields()[1];
+        terminal.write(s, x, y, c);
+        drawArrayValues(terminal, 40, 6);
+
+        c = (2 == selection) ? Color.GREEN : Color.WHITE;
+        terminal.write("Save Object", x, ++y, c);
+        y++;
+    }
+
+    @Override
+    public Screen input(KeyEvent key) {
+        if (key.getKeyCode() == KeyEvent.VK_DOWN) {
+            selection++;
+            if (selection >= objs.getFields().length + 1) { selection = 0; }
+        } else if (key.getKeyCode() == KeyEvent.VK_UP) {   
+            selection--;
+            if (selection < 0) { selection = objs.getFields().length - 1 + 1; }
+        } else if (key.getKeyCode() == KeyEvent.VK_ESCAPE) {
+            if (editMode) { editMode = false; }
+            else { return objectCreator; }
+        } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
+            if (selection == 0) {
+                if (editMode) {
+                    editMode = false;
+                    objs.name = editString;
+                } else {
+                    editMode = true;
+                }
+            } else if (selection == 2) {
+                /* Save the object */
+                objectCreator.addObject(objs);
+                return objectCreator;
+            } else {
+                /* Modify the object array */
+                ObjectType[] arr;
+                if (objs.objects == null) { arr = new ObjectType[0]; }
+                else { arr = objs.objects; }
+                return new ModifyArray(this, arr);
+            }
+        } else if (editMode) {
+            try {
+                if (key.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
+                    if (editString.length() > 0)
+                        editString = editString.substring(0, editString.length() - 1);
+                } else {
+                    char c = key.getKeyChar();
+                    if (c >= 0 && c < 256)
+                        editString += c;
+                }
+            } catch (java.lang.IllegalArgumentException e) { /* Ignore invalid characters */ }
+        }
+        return this;
+    }
+
+    public void saveNewArray(ObjectType[] newObjects) {
+        objs.objects = newObjects;
+    }
+
+    private void drawArrayValues(AsciiPanel terminal, int x, int y) {
+        if (selection == 0 || selection == objs.getFields().length) { return; }
+        terminal.write(objs.getFields()[selection], x, y, Color.WHITE);
+        y += 2;
+        if (objs.objects == null || objs.objects.length == 0) {
+            terminal.write("Empty or Null Array", x, y);
+        } else {
+            for (ObjectType o : objs.objects) {
+                String s;
+                if (o == null) { s = "null"; }
+                else { s = o.name + "  (" + o.getTypeString() + ")"; }
+                terminal.write(s, x, y);
+                y++;
+            }
+        }
+    }
+
+    public ArrayList<ObjectType> getObjects() {
+        return objectCreator.getObjects();
+    }
+}
diff --git a/object_creator/helpers/ModifyArray.java b/object_creator/helpers/ModifyArray.java
index 1d6d58f..5a80ac7 100644
--- a/object_creator/helpers/ModifyArray.java
+++ b/object_creator/helpers/ModifyArray.java
@@ -4,13 +4,17 @@ import java.awt.Color;
 import java.awt.event.KeyEvent;
 import application.Screen;
 import asciiPanel.AsciiPanel;
+import object_creator.classes.ObjectType;
 import object_creator.handlers.PrimitiveArrayHandler;
+import object_creator.handlers.ReferenceArrayHandler;
 
 public class ModifyArray extends Screen {
-    private PrimitiveArrayHandler handler;   
+    private PrimitiveArrayHandler handler;
+    private ReferenceArrayHandler refHandler;
     private int[] ints;
     private double[] doubles;
     private boolean[] bools;
+    private ObjectType[] objects;
     private int selection;
     private boolean editMode;
     private String editString = "";
@@ -19,6 +23,7 @@ public class ModifyArray extends Screen {
     public ModifyArray(PrimitiveArrayHandler handler, int[] ints) { this.handler = handler; this.ints = ints; }
     public ModifyArray(PrimitiveArrayHandler handler, double[] doubles) { this.handler = handler; this.doubles = doubles; }
     public ModifyArray(PrimitiveArrayHandler handler, boolean[] bools) { this.handler = handler; this.bools = bools; }
+    public ModifyArray(ReferenceArrayHandler refHandler, ObjectType[] objects) { this.refHandler = refHandler; this.objects = objects; }
 
     @Override
     public String title() { return "Edit Array"; }
@@ -30,6 +35,7 @@ public class ModifyArray extends Screen {
         if (ints != null) { printLength(terminal, ints.length); printInts(terminal); }
         else if (doubles != null) { printLength(terminal, doubles.length); printDoubles(terminal); }
         else if (bools != null) { printLength(terminal, bools.length); printBools(terminal); }
+        else if (objects != null) { printLength(terminal, objects.length); printObjects(terminal); }
 
         if (errorString.length() > 0)
             terminal.write("Error: " + errorString, 8, terminal.getHeightInCharacters() - 3, Color.RED);
@@ -41,6 +47,7 @@ public class ModifyArray extends Screen {
         if (ints != null) { length = ints.length; }
         else if (doubles != null) { length = doubles.length; }
         else if (bools != null) { length = bools.length; }
+        else if (objects != null) { length = objects.length; }
         else { return handler; }
 
         if (key.getKeyCode() == KeyEvent.VK_DOWN) {
@@ -58,8 +65,12 @@ public class ModifyArray extends Screen {
                 if (ints != null) { handler.saveNewArray(ints); }
                 else if (doubles != null) { handler.saveNewArray(doubles); }
                 else if (bools != null) { handler.saveNewArray(bools); }
-                return handler;
+                else if (objects != null) { refHandler.saveNewArray(objects); }
+                return getReturnScreen();
             } else if (!editMode) {
+                if (objects != null && selection > 0) {
+                    return new ObjectSelectorArray(this, objects, refHandler.getObjects(), selection - 1);
+                }
                 editMode = true;
             } else {
                 boolean pass = saveEdit();
@@ -75,7 +86,7 @@ public class ModifyArray extends Screen {
                 editString = "";
                 errorString = "";
             } else {
-                return handler;
+                return getReturnScreen();
             }
         } else if (editMode) {
             try {
@@ -92,6 +103,11 @@ public class ModifyArray extends Screen {
         return this;
     }
 
+    private Screen getReturnScreen() {
+        if (handler != null) { return handler; }
+        else { return refHandler; }
+    }
+
     private void printLength(AsciiPanel terminal, int len) {
         Color c = (selection == 0) ? Color.GREEN : Color.WHITE;
         String s;
@@ -179,6 +195,30 @@ public class ModifyArray extends Screen {
         terminal.write("Save Array", x - 4, ++y, c);
     }
 
+    private void printObjects(AsciiPanel terminal) {
+        int x = 4;
+        int y = 3;
+        terminal.write("Object[] objects", x, y);
+        y += 3;
+        x += 4;
+
+        Color c;
+        String s;
+        for (int i = 0; i < objects.length; i++) {
+            c = (selection == i + 1) ? Color.GREEN : Color.WHITE;
+            s = "[" + Integer.toString(i) + "] ";
+            if (objects[i] != null) {
+                s += objects[i].name + "  (" + objects[i].getTypeString() + ")";
+            } else {
+                s += "null";
+            }
+            terminal.write(s, x, y++, c);
+        }
+
+        c = (selection == objects.length + 1) ? Color.GREEN : Color.WHITE;
+        terminal.write("Save Array", x - 4, ++y, c);
+    }
+
     private boolean saveEdit() {
         if (selection == 0) {
             try {
@@ -230,6 +270,13 @@ public class ModifyArray extends Screen {
                 newBools[i] = bools[i];
             }
             bools = newBools;
+        } else if (objects != null) { 
+            ObjectType[] newObjects = new ObjectType[newLen];
+            for (int i = 0; i < objects.length; i++) {
+                if (i >= newLen) { break; }
+                newObjects[i] = objects[i];
+            }
+            objects = newObjects;
         }
 
     }
diff --git a/object_creator/helpers/ObjectSelector.java b/object_creator/helpers/ObjectSelector.java
index 2b28f75..8653aca 100644
--- a/object_creator/helpers/ObjectSelector.java
+++ b/object_creator/helpers/ObjectSelector.java
@@ -9,16 +9,21 @@ import object_creator.classes.ObjectType;
 import object_creator.handlers.ReferenceHandler;
 
 public class ObjectSelector extends Screen {
-    private int selection;
-    private ReferenceHandler referenceHandler;
-    private Screen prevScreen;
-    private ArrayList<ObjectType> objects;
+    protected int selection;
+    protected ReferenceHandler referenceHandler;
+    protected Screen prevScreen;
+    protected ArrayList<ObjectType> objects;
 
     public ObjectSelector(ReferenceHandler referenceHandler, ArrayList<ObjectType> objects) {
         this.referenceHandler = referenceHandler;
         this.prevScreen = referenceHandler;
         this.objects = objects;
     }
+    public ObjectSelector(ReferenceHandler referenceHandler, Screen screen, ArrayList<ObjectType> objects) {
+        this.referenceHandler = referenceHandler;
+        this.prevScreen = screen;
+        this.objects = objects;
+    }
 
     @Override
     public String title() { return "Selecting Object"; }
@@ -59,9 +64,12 @@ public class ObjectSelector extends Screen {
             if (selection < 0) { selection = len - 1; }
         } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
             if (referenceHandler != null) {
-                referenceHandler.addReference(objects.get(selection));
+                if (objects != null && objects.size() > 0)
+                    referenceHandler.addReference(objects.get(selection));
                 return prevScreen;
             }
+        } else if (key.getKeyCode() == KeyEvent.VK_ESCAPE) {
+            return prevScreen;
         }
         return this;
     }
diff --git a/object_creator/helpers/ObjectSelectorArray.java b/object_creator/helpers/ObjectSelectorArray.java
new file mode 100644
index 0000000..178ceb6
--- /dev/null
+++ b/object_creator/helpers/ObjectSelectorArray.java
@@ -0,0 +1,29 @@
+package object_creator.helpers;
+
+import java.util.ArrayList;
+
+import application.Screen;
+import java.awt.event.KeyEvent;
+import object_creator.classes.ObjectType;
+
+public class ObjectSelectorArray extends ObjectSelector {
+    private int index;
+    private ObjectType[] obj_array;
+
+    public ObjectSelectorArray(ModifyArray modifyArray, ObjectType[] obj_array, ArrayList<ObjectType> objects, int index) {
+        super(null, modifyArray, objects);
+        this.obj_array = obj_array;
+        this.index = index;
+    }
+
+    @Override
+    public Screen input(KeyEvent key) {
+        if (key.getKeyCode() == KeyEvent.VK_ENTER) {
+            if (obj_array != null && objects.size() > 0) {
+                obj_array[index] = objects.get(selection);
+                return prevScreen;
+            }
+        }
+        return super.input(key);
+    }
+}

commit e669fef04386327530fbf1bec57e0042f7afb4c0
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Mon Oct 23 20:09:03 2023 -0600

    Add ability to create arrays of primitives

diff --git a/README.md b/README.md
index 3fb9ec5..6778e41 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-# Object Inspector
+# Serializer
 A simple serializer and deserializer for CPSC 501. See the [assignment specifications](Assignment3.pdf) for more details.
 
 This project uses the `AsciiPanel` library for user input in a text-based interface. This library can be found here: [AsciiPanel](https://github.com/trystan/AsciiPanel).
diff --git a/object_creator/CreateObject.java b/object_creator/CreateObject.java
index 14f8e54..87bdf65 100644
--- a/object_creator/CreateObject.java
+++ b/object_creator/CreateObject.java
@@ -16,7 +16,8 @@ public class CreateObject extends Screen {
 
     private static String[] ObjectTypes = new String[] {
         "Primitive",
-        "Reference"
+        "Reference",
+        "Primitive Array",
     };
 
     @Override
@@ -49,6 +50,7 @@ public class CreateObject extends Screen {
             switch(selection) {
                 case 0: return new PrimitiveHandler(objectCreator);
                 case 1: return new ReferenceHandler(objectCreator);
+                case 2: return new PrimitiveArrayHandler(objectCreator);
             }
         } else if (key.getKeyCode() == KeyEvent.VK_ESCAPE) {
             return objectCreator;
diff --git a/object_creator/classes/PrimitiveArray.java b/object_creator/classes/PrimitiveArray.java
new file mode 100644
index 0000000..cc4b75d
--- /dev/null
+++ b/object_creator/classes/PrimitiveArray.java
@@ -0,0 +1,41 @@
+package object_creator.classes;
+
+import asciiPanel.AsciiPanel;
+
+public class PrimitiveArray extends ObjectType {
+    public int[] ints;
+    public double[] doubles;
+    public boolean[] bools;
+
+    @Override
+    public String getTypeString() { return "Primitive Array"; }
+
+    @Override
+    public String[] getFields() {
+        return new String[] {
+            "NAME",
+            "int[] ints",
+            "double[] doubles",
+            "boolean[] bools"
+        };
+    }
+
+    @Override
+    public void displayObject(AsciiPanel terminal, int x, int y) {
+        terminal.write("NAME = " + name, x, y);
+        y++;
+
+        String[] lengths = new String[3];
+        lengths[0] = (ints == null) ? "0" : Integer.toString(ints.length);
+        lengths[1] = (doubles == null) ? "0" : Integer.toString(doubles.length);
+        lengths[2] = (bools == null) ? "0" : Integer.toString(bools.length);
+        for (int i = 1; i < getFields().length; i++) {
+            terminal.write(getFields()[i] + " (len=" + lengths[i - 1] + ")", x, y);
+            y++;
+        }
+    }
+
+    @Override
+    public String getStringValue(int i) { return ""; }
+    
+}
diff --git a/object_creator/handlers/PrimitiveArrayHandler.java b/object_creator/handlers/PrimitiveArrayHandler.java
new file mode 100644
index 0000000..625cb94
--- /dev/null
+++ b/object_creator/handlers/PrimitiveArrayHandler.java
@@ -0,0 +1,157 @@
+package object_creator.handlers;
+
+import java.awt.Color;
+import java.awt.event.KeyEvent;
+import application.Screen;
+import asciiPanel.AsciiPanel;
+import object_creator.ObjectCreator;
+import object_creator.classes.PrimitiveArray;
+import object_creator.helpers.ModifyArray;
+
+public class PrimitiveArrayHandler extends Screen {
+    private ObjectCreator objectCreator;
+    private PrimitiveArray obj;
+    private int selection = 0;
+    private boolean editMode; // If the user is editing the name or not
+    private String editString = "";
+
+    public PrimitiveArrayHandler(ObjectCreator objectCreator) {
+        this.objectCreator = objectCreator;
+        obj = new PrimitiveArray();
+    }
+
+    @Override
+    public String title() { return "Creating Primitive Array"; }
+
+    @Override
+    public void print(AsciiPanel terminal) {
+        drawBorder(terminal);
+
+        int x = 4;
+        int y = 3;
+        
+        /* Handle setting the name of the array object separately */
+        Color c = (selection == 0) ? Color.GREEN : Color.WHITE;
+        String s;
+        if (editMode) {
+            s = "NAME = " + editString;
+            terminal.write(" ", x + s.length(), y, Color.BLACK, Color.LIGHT_GRAY);
+        } else {
+            s = "NAME = " + obj.name;
+        }
+        terminal.write(s, x, y, c);
+        y++;
+
+        int i;
+        for (i = 1; i < obj.getFields().length; i++) {
+            c = (i == selection) ? Color.GREEN : Color.WHITE;
+            s = obj.getFields()[i];
+            terminal.write(s, x, y, c);
+            y++;
+        }
+        drawArrayValues(terminal, 40, 6);
+
+        c = (selection == i) ? Color.GREEN : Color.WHITE;
+        terminal.write("Save Object", x, ++y, c);
+        i++;
+        y++;
+    }
+
+    @Override
+    public Screen input(KeyEvent key) {
+        if (key.getKeyCode() == KeyEvent.VK_DOWN) {
+            if (!editMode) {
+                selection++;
+                if (selection >= obj.getFields().length + 1) { selection = 0; }
+            }
+        } else if (key.getKeyCode() == KeyEvent.VK_UP) {
+            if (!editMode) {
+                selection--;
+                if (selection < 0) { selection = obj.getFields().length - 1 + 1; }
+            }
+        } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
+            if (selection == obj.getFields().length - 1 + 1) {
+                objectCreator.addObject(obj);
+                return objectCreator;
+            } else if (selection == 0) {
+                if (!editMode)
+                    editMode = true;
+                else {
+                    obj.name = editString;
+                    editString = "";
+                    editMode = false;
+                }
+            } else if (selection == 1) {
+                if (obj.ints == null) { obj.ints = new int[0]; }
+                return new ModifyArray(this, obj.ints);
+            } else if (selection == 2) {
+                if (obj.doubles == null) { obj.doubles = new double[0]; }
+                return new ModifyArray(this, obj.doubles);
+            } else if (selection == 3) {
+                if (obj.bools == null) { obj.bools = new boolean[0]; }
+                return new ModifyArray(this, obj.bools);
+            }
+        } else if (key.getKeyCode() == KeyEvent.VK_ESCAPE) {
+            if (editMode) {
+                editMode = false;
+                editString = "";
+            } else {
+                return objectCreator;
+            }
+        } else if (editMode) {
+            try {
+                if (key.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
+                    if (editString.length() > 0)
+                        editString = editString.substring(0, editString.length() - 1);
+                } else {
+                    char c = key.getKeyChar();
+                    if (c >= 0 && c < 256)
+                        editString += c;
+                }
+            } catch (java.lang.IllegalArgumentException e) { /* Ignore invalid characters */ }
+        }
+        return this;
+    }
+
+    private void drawArrayValues(AsciiPanel terminal, int x, int y) {
+        if (selection == 0 || selection == obj.getFields().length) { return; }
+        terminal.write(obj.getFields()[selection], x, y, Color.WHITE);
+        y += 2;
+        switch(selection) {
+            case 1:
+                if (obj.ints == null) {
+                    terminal.write("Empty or Null Array", x, y);
+                } else {
+                    for (int i : obj.ints) {
+                        terminal.write(Integer.toString(i), x + 4, y);
+                        y++;
+                    }
+                }
+                break;
+            case 2:
+                if (obj.doubles == null) {
+                    terminal.write("Empty or Null Array", x, y);
+                } else {
+                    for (double i : obj.doubles) {
+                        terminal.write(Double.toString(i), x + 4, y);
+                        y++;
+                    }
+                }
+                break;
+            case 3:
+                if (obj.bools == null) {
+                    terminal.write("Empty or Null Array", x, y);
+                } else {
+                    for (boolean i : obj.bools) {
+                        terminal.write(Boolean.toString(i), x + 4, y);
+                        y++;
+                    }
+                }
+                break;
+        }
+    }
+    
+    public void saveNewArray(int[] newInts) { obj.ints = newInts; }
+    public void saveNewArray(double[] newDoubles) { obj.doubles = newDoubles; }
+    public void saveNewArray(boolean[] newBools) { obj.bools = newBools; }
+}
diff --git a/object_creator/helpers/ModifyArray.java b/object_creator/helpers/ModifyArray.java
new file mode 100644
index 0000000..1d6d58f
--- /dev/null
+++ b/object_creator/helpers/ModifyArray.java
@@ -0,0 +1,236 @@
+package object_creator.helpers;
+
+import java.awt.Color;
+import java.awt.event.KeyEvent;
+import application.Screen;
+import asciiPanel.AsciiPanel;
+import object_creator.handlers.PrimitiveArrayHandler;
+
+public class ModifyArray extends Screen {
+    private PrimitiveArrayHandler handler;   
+    private int[] ints;
+    private double[] doubles;
+    private boolean[] bools;
+    private int selection;
+    private boolean editMode;
+    private String editString = "";
+    private String errorString = "";
+
+    public ModifyArray(PrimitiveArrayHandler handler, int[] ints) { this.handler = handler; this.ints = ints; }
+    public ModifyArray(PrimitiveArrayHandler handler, double[] doubles) { this.handler = handler; this.doubles = doubles; }
+    public ModifyArray(PrimitiveArrayHandler handler, boolean[] bools) { this.handler = handler; this.bools = bools; }
+
+    @Override
+    public String title() { return "Edit Array"; }
+
+    @Override
+    public void print(AsciiPanel terminal) {
+        drawBorder(terminal);
+
+        if (ints != null) { printLength(terminal, ints.length); printInts(terminal); }
+        else if (doubles != null) { printLength(terminal, doubles.length); printDoubles(terminal); }
+        else if (bools != null) { printLength(terminal, bools.length); printBools(terminal); }
+
+        if (errorString.length() > 0)
+            terminal.write("Error: " + errorString, 8, terminal.getHeightInCharacters() - 3, Color.RED);
+    }
+
+    @Override
+    public Screen input(KeyEvent key) {
+        int length;
+        if (ints != null) { length = ints.length; }
+        else if (doubles != null) { length = doubles.length; }
+        else if (bools != null) { length = bools.length; }
+        else { return handler; }
+
+        if (key.getKeyCode() == KeyEvent.VK_DOWN) {
+            if (!editMode) {
+                selection++;
+                if (selection >= length + 2) { selection = 0; }
+            }
+        } else if (key.getKeyCode() == KeyEvent.VK_UP) {
+            if (!editMode) {
+                selection--;
+                if (selection < 0) { selection = length + 1; }
+            }
+        } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
+            if (selection == length + 1) {
+                if (ints != null) { handler.saveNewArray(ints); }
+                else if (doubles != null) { handler.saveNewArray(doubles); }
+                else if (bools != null) { handler.saveNewArray(bools); }
+                return handler;
+            } else if (!editMode) {
+                editMode = true;
+            } else {
+                boolean pass = saveEdit();
+                if (pass) {
+                    editMode = false;
+                    editString = "";
+                    errorString = "";
+                }
+            }
+        } else if (key.getKeyCode() == KeyEvent.VK_ESCAPE) {
+            if (editMode) {
+                editMode = false;
+                editString = "";
+                errorString = "";
+            } else {
+                return handler;
+            }
+        } else if (editMode) {
+            try {
+                if (key.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
+                    if (editString.length() > 0)
+                        editString = editString.substring(0, editString.length() - 1);
+                } else {
+                    char c = key.getKeyChar();
+                    if (c >= 0 && c < 256)
+                        editString += c;
+                }
+            } catch (java.lang.IllegalArgumentException e) { /* Ignore invalid characters */ }
+        }
+        return this;
+    }
+
+    private void printLength(AsciiPanel terminal, int len) {
+        Color c = (selection == 0) ? Color.GREEN : Color.WHITE;
+        String s;
+        if (selection == 0 && editMode) {
+            s = "Length = " + editString;
+            terminal.write(" ", 4 + s.length(), 5, Color.BLACK, Color.LIGHT_GRAY);
+        } else {
+            s = "Length = " + Integer.toString(len);
+        }
+        terminal.write(s, 4, 5, c);
+    }
+
+    private void printInts(AsciiPanel terminal) {
+        int x = 4;
+        int y = 3;
+        terminal.write("int[] ints", x, y);
+        y += 3;
+        x += 4;
+
+        Color c;
+        String s;
+        for (int i = 0; i < ints.length; i++) {
+            c = (selection == i + 1) ? Color.GREEN : Color.WHITE;
+
+            if (selection == i + 1 && editMode) {
+                s = "[" + Integer.toString(i) + "] " + editString;
+                terminal.write(" ", x + s.length(), y, Color.BLACK, Color.LIGHT_GRAY);
+            } else {
+                s = "[" + Integer.toString(i) + "] " + ints[i];
+            }
+            terminal.write(s, x, y++, c);
+        }
+
+        c = (selection == ints.length + 1) ? Color.GREEN : Color.WHITE;
+        terminal.write("Save Array", x - 4, ++y, c);
+    }
+
+    private void printDoubles(AsciiPanel terminal) {
+        int x = 4;
+        int y = 3;
+        terminal.write("double[] doubles", x, y);
+        y += 3;
+        x += 4;
+
+        Color c;
+        String s;
+        for (int i = 0; i < doubles.length; i++) {
+            c = (selection == i + 1) ? Color.GREEN : Color.WHITE;
+
+            if (selection == i + 1 && editMode) {
+                s = "[" + Integer.toString(i) + "] " + editString;
+                terminal.write(" ", x + s.length(), y, Color.BLACK, Color.LIGHT_GRAY);
+            } else {
+                s = "[" + Integer.toString(i) + "] " + doubles[i];
+            }
+            terminal.write(s, x, y++, c);
+        }
+
+        c = (selection == doubles.length + 1) ? Color.GREEN : Color.WHITE;
+        terminal.write("Save Array", x - 4, ++y, c);
+    }
+
+    private void printBools(AsciiPanel terminal) {
+        int x = 4;
+        int y = 3;
+        terminal.write("boolean[] bools", x, y);
+        y += 3;
+        x += 4;
+
+        Color c;
+        String s;
+        for (int i = 0; i < bools.length; i++) {
+            c = (selection == i + 1) ? Color.GREEN : Color.WHITE;
+
+            if (selection == i + 1 && editMode) {
+                s = "[" + Integer.toString(i) + "] " + editString;
+                terminal.write(" ", x + s.length(), y, Color.BLACK, Color.LIGHT_GRAY);
+            } else {
+                s = "[" + Integer.toString(i) + "] " + bools[i];
+            }
+            terminal.write(s, x, y++, c);
+        }
+
+        c = (selection == bools.length + 1) ? Color.GREEN : Color.WHITE;
+        terminal.write("Save Array", x - 4, ++y, c);
+    }
+
+    private boolean saveEdit() {
+        if (selection == 0) {
+            try {
+                int newLen = Integer.valueOf(editString);
+                resizeArray(newLen);
+                return true;
+            } catch (Exception e) {
+                errorString = "Length must be of type Integer";
+                return false;
+            }
+        }
+
+        try {
+            if (ints != null) {
+                ints[selection - 1] = Integer.valueOf(editString);
+                return true;
+            } else if (doubles != null) {
+                doubles[selection - 1] = Double.valueOf(editString);
+                return true;
+            } else if (bools != null) {
+                bools[selection - 1] = Boolean.valueOf(editString);
+                return true;
+            }
+        } catch(Exception e) {
+            errorString = "Invalid type";
+        }
+        return false;
+    }
+
+    private void resizeArray(int newLen) {
+        if (ints != null) {
+            int[] newInts = new int[newLen];
+            for (int i = 0; i < ints.length; i++) {
+                if (i >= newLen) { break; }
+                newInts[i] = ints[i];
+            }
+            ints = newInts;
+        } else if (doubles != null) { 
+            double[] newDoubles = new double[newLen];
+            for (int i = 0; i < doubles.length; i++) {
+                if (i >= newLen) { break; }
+                newDoubles[i] = doubles[i];
+            }
+            doubles = newDoubles;
+        } else if (bools != null) { 
+            boolean[] newBools = new boolean[newLen];
+            for (int i = 0; i < bools.length; i++) {
+                if (i >= newLen) { break; }
+                newBools[i] = bools[i];
+            }
+            bools = newBools;
+        }
+
+    }
+}

commit 9a739aa6f847bbdb611b5985d818b78a3f5671cf
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Mon Oct 23 15:11:27 2023 -0600

    Add ability to create reference objects

diff --git a/README.md b/README.md
index 9db9288..3fb9ec5 100644
--- a/README.md
+++ b/README.md
@@ -8,3 +8,10 @@ This project uses the `AsciiPanel` library for user input in a text-based interf
  - These objects are sent to the `Serializer` and are serialized using the JDOM library.
  - The resulting JDOM document are sent as a byte stream over the network using sockets, to be received by the `Deserializer`.
  - The `Deserializer` deserialized objects are then passed to an `Object Inspector` to view the contents.
+
+### Object Types
+ - `Primitive`: Contains fields for each of Java's primitive types
+ - `Reference`: Contains references to up to 3 other objects that have already been created by the user
+ - `Primitive Array`: Contains an array of arbitrary length of primitives
+ - `Reference Array`: Contains an array of arbitrary length of other objects that have been created by the user
+ - `ArrayList`: Contains a `java.util.ArrayList` that refers to other objects created by the user
diff --git a/build.bat b/build.bat
index 2adba0b..7ea545c 100644
--- a/build.bat
+++ b/build.bat
@@ -2,3 +2,4 @@ javac application/*.java
 javac object_creator/*.java
 javac object_creator/classes/*.java
 javac object_creator/handlers/*.java
+javac object_creator/helpers/*.java
diff --git a/object_creator/CreateObject.java b/object_creator/CreateObject.java
index a8e268f..14f8e54 100644
--- a/object_creator/CreateObject.java
+++ b/object_creator/CreateObject.java
@@ -2,7 +2,7 @@ package object_creator;
 
 import application.Screen;
 import asciiPanel.AsciiPanel;
-import object_creator.handlers.PrimitiveHandler;
+import object_creator.handlers.*;
 import java.awt.Color;
 import java.awt.event.KeyEvent;
 
@@ -15,7 +15,8 @@ public class CreateObject extends Screen {
     }
 
     private static String[] ObjectTypes = new String[] {
-        "Primitive"
+        "Primitive",
+        "Reference"
     };
 
     @Override
@@ -47,6 +48,7 @@ public class CreateObject extends Screen {
         } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
             switch(selection) {
                 case 0: return new PrimitiveHandler(objectCreator);
+                case 1: return new ReferenceHandler(objectCreator);
             }
         } else if (key.getKeyCode() == KeyEvent.VK_ESCAPE) {
             return objectCreator;
diff --git a/object_creator/ObjectCreator.java b/object_creator/ObjectCreator.java
index 78a4021..feb6154 100644
--- a/object_creator/ObjectCreator.java
+++ b/object_creator/ObjectCreator.java
@@ -10,6 +10,8 @@ import java.util.ArrayList;
 public class ObjectCreator extends Screen {
     private int selection;
     private ArrayList<ObjectType> objects;
+    public ArrayList<ObjectType> getObjects() { return objects; }
+    public void addObject(ObjectType newObject) { objects.add(newObject); }
 
     public ObjectCreator() {
         objects = new ArrayList<ObjectType>();
@@ -37,7 +39,7 @@ public class ObjectCreator extends Screen {
                 y++;
 
                 if (i == selection) {
-                    o.displayObject(terminal, 50, 8);
+                    o.displayObject(terminal, 40, 8);
                 }
             }
         }
@@ -73,9 +75,4 @@ public class ObjectCreator extends Screen {
         }
         return this;
     }
-
-    public void addObject(ObjectType newObject) {
-        objects.add(newObject);
-    }
-    
 }
diff --git a/object_creator/classes/ReferenceObject.java b/object_creator/classes/ReferenceObject.java
new file mode 100644
index 0000000..9e60712
--- /dev/null
+++ b/object_creator/classes/ReferenceObject.java
@@ -0,0 +1,48 @@
+package object_creator.classes;
+
+import asciiPanel.AsciiPanel;
+
+public class ReferenceObject extends ObjectType {
+    public ObjectType A;
+    public ObjectType B;
+    public ObjectType C;
+
+    @Override
+    public String getTypeString() { return "Reference"; }
+
+    @Override
+    public String[] getFields() {
+        return new String[] {
+            "NAME",
+            "Object A",
+            "Object B",
+            "Object C"
+        };
+    }
+
+    @Override
+    public void displayObject(AsciiPanel terminal, int x, int y) {
+        for (int i = 0; i < getFields().length; i++) {
+            terminal.write(getFields()[i] + " = " + getStringValue(i), x, y);
+            y++;
+        }
+    }
+
+    @Override
+    public String getStringValue(int i) {
+        switch(i) {
+            case 0: return name;
+            case 1: 
+                if (A == null) { return "<null>"; }
+                else { return A.name + " (" + A.getTypeString() + ")"; }
+            case 2: 
+                if (B == null) { return "<null>"; }
+                else { return B.name + " (" + B.getTypeString() + ")"; }
+            case 3: 
+                if (C == null) { return "<null>"; }
+                else { return C.name + " (" + C.getTypeString() + ")"; }
+            default: return "";
+        }
+    }
+    
+}
diff --git a/object_creator/handlers/ReferenceHandler.java b/object_creator/handlers/ReferenceHandler.java
new file mode 100644
index 0000000..5722dc9
--- /dev/null
+++ b/object_creator/handlers/ReferenceHandler.java
@@ -0,0 +1,108 @@
+package object_creator.handlers;
+
+import java.awt.event.KeyEvent;
+import application.Screen;
+import asciiPanel.AsciiPanel;
+import java.awt.Color;
+import object_creator.ObjectCreator;
+import object_creator.classes.ReferenceObject;
+import object_creator.helpers.ObjectSelector;
+import object_creator.classes.ObjectType;
+
+public class ReferenceHandler extends Screen {
+    private ObjectCreator objectCreator;
+    private ReferenceObject obj;
+    private int selection;
+    private boolean editMode; // Editing the name field of the reference object
+    private String editString = "";
+
+    @Override
+    public String title() { return "Creating Reference Object"; }
+
+    public ReferenceHandler(ObjectCreator objectCreator) {
+        this.objectCreator = objectCreator;
+        obj = new ReferenceObject();
+    }
+
+    @Override
+    public void print(AsciiPanel terminal) {
+        drawBorder(terminal);
+
+        int i;
+        int x = 4;
+        int y = 3;
+        for (i = 0; i < obj.getFields().length; i++) {
+            Color c = (i == selection) ? Color.GREEN : Color.WHITE;
+            String s;
+            if (i == 0 && editMode) {
+                s = obj.getFields()[i] + " = " + editString;
+                terminal.write(" ", x + s.length(), y, Color.BLACK, Color.LIGHT_GRAY);
+            } else {
+                s = obj.getFields()[i] + " = " + obj.getStringValue(i);
+            }
+
+            terminal.write(s, x, y, c);
+            y++;
+
+            if (i == selection) {
+                /* Man this is ugly */
+                if (i == 1 && obj.A != null) obj.A.displayObject(terminal, 40, 8);
+                else if (i == 2 && obj.B != null) obj.B.displayObject(terminal, 40, 8);
+                else if (i == 3 && obj.C != null) obj.C.displayObject(terminal, 40, 8);
+            }
+        }
+
+        Color c = (i == selection) ? Color.GREEN : Color.WHITE;
+        terminal.write("Save Object", x, ++y, c);
+        i++;
+        y++;
+    }
+
+    @Override
+    public Screen input(KeyEvent key) {
+        if (key.getKeyCode() == KeyEvent.VK_DOWN) {
+            selection++;
+            if (selection >= obj.getFields().length + 1) { selection = 0; }
+        } else if (key.getKeyCode() == KeyEvent.VK_UP) {   
+            selection--;
+            if (selection < 0) { selection = obj.getFields().length - 1 + 1; }
+        } else if (key.getKeyCode() == KeyEvent.VK_ESCAPE) {
+            if (editMode) { editMode = false; }
+            else { return objectCreator; }
+        } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
+            if (selection == 0) {
+                if (editMode) {
+                    editMode = false;
+                    obj.name = editString;
+                } else {
+                    editMode = true;
+                }
+            } else if (selection == 4) {
+                /* Save the object */
+                objectCreator.addObject(obj);
+                return objectCreator;
+            } else {
+                /* Handle object selection */
+                return new ObjectSelector(this, objectCreator.getObjects());
+            }
+        } else if (editMode) {
+            try {
+                if (key.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
+                    if (editString.length() > 0)
+                        editString = editString.substring(0, editString.length() - 1);
+                } else {
+                    char c = key.getKeyChar();
+                    if (c >= 0 && c < 256)
+                        editString += c;
+                }
+            } catch (java.lang.IllegalArgumentException e) { /* Ignore invalid characters */ }
+        }
+        return this;
+    }
+
+    public void addReference(ObjectType ref) {
+        if (selection == 1) { obj.A = ref; }
+        if (selection == 2) { obj.B = ref; }
+        if (selection == 3) { obj.C = ref; }
+    }
+}
diff --git a/object_creator/helpers/ObjectSelector.java b/object_creator/helpers/ObjectSelector.java
new file mode 100644
index 0000000..2b28f75
--- /dev/null
+++ b/object_creator/helpers/ObjectSelector.java
@@ -0,0 +1,68 @@
+package object_creator.helpers;
+
+import java.awt.Color;
+import java.awt.event.KeyEvent;
+import java.util.ArrayList;
+import application.Screen;
+import asciiPanel.AsciiPanel;
+import object_creator.classes.ObjectType;
+import object_creator.handlers.ReferenceHandler;
+
+public class ObjectSelector extends Screen {
+    private int selection;
+    private ReferenceHandler referenceHandler;
+    private Screen prevScreen;
+    private ArrayList<ObjectType> objects;
+
+    public ObjectSelector(ReferenceHandler referenceHandler, ArrayList<ObjectType> objects) {
+        this.referenceHandler = referenceHandler;
+        this.prevScreen = referenceHandler;
+        this.objects = objects;
+    }
+
+    @Override
+    public String title() { return "Selecting Object"; }
+
+    @Override
+    public void print(AsciiPanel terminal) {
+        drawBorder(terminal);
+
+        terminal.write("Select Object to Link", 4, 3);
+        int x = 8;
+        int y = 4;
+        int len = objects.size();
+        if (len == 0) {
+            terminal.write("[No objects]", x, y++, Color.GRAY);
+        } else {
+            for (int i = 0; i < len; i++) {
+                Color c = (i == selection) ? Color.GREEN : Color.WHITE;
+                ObjectType o = objects.get(i);
+                terminal.write(o.name, x, y, c);
+                terminal.write(o.getTypeString(), x+20, y, c);
+                y++;
+
+                if (i == selection) {
+                    o.displayObject(terminal, 40, 8);
+                }
+            }
+        }
+    }
+
+    @Override
+    public Screen input(KeyEvent key) {
+        int len = objects.size();
+        if (key.getKeyCode() == KeyEvent.VK_DOWN) {
+            selection++;
+            if (selection >= len) { selection = 0; }
+        } else if (key.getKeyCode() == KeyEvent.VK_UP) {   
+            selection--;
+            if (selection < 0) { selection = len - 1; }
+        } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
+            if (referenceHandler != null) {
+                referenceHandler.addReference(objects.get(selection));
+                return prevScreen;
+            }
+        }
+        return this;
+    }
+}

commit c91b822d6f0379b798d60438f66b0186c172102b
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Mon Oct 23 12:55:03 2023 -0600

    Object creation UI framework, primitive objects can be created

diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..8c0a899
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,5 @@
+{
+    "java.project.referencedLibraries": [
+        "lib/**/*.jar"
+    ]
+}
\ No newline at end of file
diff --git a/README.md b/README.md
index 10d465c..9db9288 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,8 @@
 # Object Inspector
 A simple serializer and deserializer for CPSC 501. See the [assignment specifications](Assignment3.pdf) for more details.
 
+This project uses the `AsciiPanel` library for user input in a text-based interface. This library can be found here: [AsciiPanel](https://github.com/trystan/AsciiPanel).
+
 ### Process
  - `Object Creator` to create arbitrary objects through text-based user input.
  - These objects are sent to the `Serializer` and are serialized using the JDOM library.
diff --git a/application/Main.java b/application/Main.java
new file mode 100644
index 0000000..d70f300
--- /dev/null
+++ b/application/Main.java
@@ -0,0 +1,47 @@
+package application;
+
+import object_creator.ObjectCreator;
+import java.awt.event.KeyEvent;
+import java.awt.event.KeyListener;
+import javax.swing.JFrame;
+import asciiPanel.AsciiPanel;
+
+public class Main extends JFrame implements KeyListener {
+    private AsciiPanel terminal;
+    private Screen screen;
+
+    private Main() {
+        super();
+        terminal = new AsciiPanel(80,24);
+        add(terminal);
+        pack();
+        addKeyListener(this);
+
+        screen = new ObjectCreator();
+        repaint();
+    }
+
+    public static void main(String[] args) {
+        Main app = new Main();
+        app.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+        app.setVisible(true);
+    }
+
+    public void repaint(){
+        terminal.clear();
+        screen.print(terminal);
+        super.repaint();
+    }
+
+    @Override
+    public void keyPressed(KeyEvent e) {
+        screen = screen.input(e);
+        repaint();
+    }
+
+    @Override
+    public void keyTyped(KeyEvent e) { }
+
+    @Override
+    public void keyReleased(KeyEvent e) { }
+}
diff --git a/application/Screen.java b/application/Screen.java
new file mode 100644
index 0000000..14b8bd2
--- /dev/null
+++ b/application/Screen.java
@@ -0,0 +1,25 @@
+package application;
+
+import java.awt.event.KeyEvent;
+import asciiPanel.AsciiPanel;
+
+public abstract class Screen {
+    public abstract String title();
+    public abstract void print(AsciiPanel terminal);
+    public abstract Screen input(KeyEvent key);
+
+    protected void drawBorder(AsciiPanel terminal) {
+        int width = terminal.getWidthInCharacters();
+        int height = terminal.getHeightInCharacters();
+        for (int x = 0; x < width - 1; x++) {
+            terminal.write("=", x, 0);
+            terminal.write("=", x, height-1);
+        }
+        for (int y = 1; y < height - 1; y++) {
+            terminal.write("|", 0, y);
+            terminal.write("|", width-2, y);
+        }
+
+        terminal.write(title(), 8, 0);
+    }
+}
diff --git a/build.bat b/build.bat
index 33e6ce5..2adba0b 100644
--- a/build.bat
+++ b/build.bat
@@ -1 +1,4 @@
+javac application/*.java
 javac object_creator/*.java
+javac object_creator/classes/*.java
+javac object_creator/handlers/*.java
diff --git a/lib/asciiPanel.jar b/lib/asciiPanel.jar
new file mode 100644
index 0000000..5554ad9
Binary files /dev/null and b/lib/asciiPanel.jar differ
diff --git a/object_creator/CreateObject.java b/object_creator/CreateObject.java
new file mode 100644
index 0000000..a8e268f
--- /dev/null
+++ b/object_creator/CreateObject.java
@@ -0,0 +1,57 @@
+package object_creator;
+
+import application.Screen;
+import asciiPanel.AsciiPanel;
+import object_creator.handlers.PrimitiveHandler;
+import java.awt.Color;
+import java.awt.event.KeyEvent;
+
+public class CreateObject extends Screen {
+    private ObjectCreator objectCreator;
+    private int selection;
+
+    public CreateObject(ObjectCreator objectCreator) {
+        this.objectCreator = objectCreator;
+    }
+
+    private static String[] ObjectTypes = new String[] {
+        "Primitive"
+    };
+
+    @Override
+    public String title() { return "Create New Object"; }
+
+    @Override
+    public void print(AsciiPanel terminal) {
+        drawBorder(terminal);
+
+        terminal.write("Select Object to Create", 4, 3);
+        int x = 8;
+        int y = 4;
+        for (int i = 0; i < ObjectTypes.length; i++) {
+            String s = ObjectTypes[i];
+
+            Color c = (i == selection) ? Color.GREEN : Color.WHITE;
+            terminal.write(s, x, y++, c);
+        }
+    }
+
+    @Override
+    public Screen input(KeyEvent key) {
+        if (key.getKeyCode() == KeyEvent.VK_DOWN) {
+            selection++;
+            if (selection >= ObjectTypes.length) { selection = 0; }
+        } else if (key.getKeyCode() == KeyEvent.VK_UP) {
+            selection--;
+            if (selection < 0) { selection = ObjectTypes.length - 1; }
+        } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
+            switch(selection) {
+                case 0: return new PrimitiveHandler(objectCreator);
+            }
+        } else if (key.getKeyCode() == KeyEvent.VK_ESCAPE) {
+            return objectCreator;
+        }
+        return this;
+    }
+    
+}
diff --git a/object_creator/ObjectCreator.java b/object_creator/ObjectCreator.java
index 84370c2..78a4021 100644
--- a/object_creator/ObjectCreator.java
+++ b/object_creator/ObjectCreator.java
@@ -1,14 +1,81 @@
 package object_creator;
 
-import java.util.Scanner;
+import application.Screen;
+import asciiPanel.AsciiPanel;
+import object_creator.classes.ObjectType;
+import java.awt.Color;
+import java.awt.event.KeyEvent;
+import java.util.ArrayList;
 
-public class ObjectCreator {
-    public static void main(String[] args) {
-        System.out.println(">> Hello, World!");
-        Scanner scanner = new Scanner(System.in);
+public class ObjectCreator extends Screen {
+    private int selection;
+    private ArrayList<ObjectType> objects;
 
-        System.out.println(">> Say something and I will repeat it to you.");
-        String s = scanner.next();
-        System.out.println(">> " + s);
+    public ObjectCreator() {
+        objects = new ArrayList<ObjectType>();
     }
+
+    @Override
+    public String title() { return "Object Creator"; }
+
+    @Override
+    public void print(AsciiPanel terminal) {
+        drawBorder(terminal);
+
+        terminal.write("Objects:", 4, 3);
+        int x = 8;
+        int y = 4;
+        int len = objects.size();
+        if (len == 0) {
+            terminal.write("[No objects]", x, y++, Color.GRAY);
+        } else {
+            for (int i = 0; i < len; i++) {
+                Color c = (i == selection) ? Color.GREEN : Color.WHITE;
+                ObjectType o = objects.get(i);
+                terminal.write(o.name, x, y, c);
+                terminal.write(o.getTypeString(), x+20, y, c);
+                y++;
+
+                if (i == selection) {
+                    o.displayObject(terminal, 50, 8);
+                }
+            }
+        }
+
+        // After the above for loop, i = len
+        int i = len;
+        y++;
+        x -= 4;
+        Color c = (i == selection) ? Color.GREEN : Color.WHITE;
+        terminal.write("Create New Object", x, y++, c);
+    }
+
+    @Override
+    public Screen input(KeyEvent key) {
+        if (key.getKeyCode() == KeyEvent.VK_DOWN) {
+            selection++;
+            if (selection >= objects.size() + 1) { selection = 0; }
+        } else if (key.getKeyCode() == KeyEvent.VK_UP) {
+            selection--;
+            if (selection < 0) { selection = objects.size() - 1 + 1; }
+        } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
+            int i;
+            int len = objects.size();
+            for (i = 0; i < len; i++) {
+                if (selection == i) {
+                    // RETURN NEW EDIT SCREEN FOR objects.get(i);
+                    return this;
+                }
+            }
+            if (selection == len) {
+                return new CreateObject(this);
+            }
+        }
+        return this;
+    }
+
+    public void addObject(ObjectType newObject) {
+        objects.add(newObject);
+    }
+    
 }
diff --git a/object_creator/classes/ObjectType.java b/object_creator/classes/ObjectType.java
new file mode 100644
index 0000000..543b07a
--- /dev/null
+++ b/object_creator/classes/ObjectType.java
@@ -0,0 +1,12 @@
+package object_creator.classes;
+
+import asciiPanel.AsciiPanel;
+
+public abstract class ObjectType {
+    public String name = "<No Name>";
+    public abstract String getTypeString();
+
+    public abstract String[] getFields();
+    public abstract void displayObject(AsciiPanel terminal, int x, int y);
+    public abstract String getStringValue(int i);
+}
diff --git a/object_creator/classes/PrimitiveObject.java b/object_creator/classes/PrimitiveObject.java
new file mode 100644
index 0000000..a19ecf9
--- /dev/null
+++ b/object_creator/classes/PrimitiveObject.java
@@ -0,0 +1,56 @@
+package object_creator.classes;
+
+import asciiPanel.AsciiPanel;
+
+public class PrimitiveObject extends ObjectType {
+    public byte b;
+    public char c;
+    public double d;
+    public float f;
+    public int i;
+    public long j;
+    public short s;
+    public boolean z;
+
+    @Override
+    public String getTypeString() { return "Primitive"; }
+
+    @Override
+    public String[] getFields() {
+        return new String[] {
+            "NAME",
+            "byte b",
+            "char c",
+            "double d",
+            "float f",
+            "int i",
+            "long j",
+            "short s",
+            "boolean z"
+        };
+    }
+
+    @Override
+    public void displayObject(AsciiPanel terminal, int x, int y) {
+        for (int i = 0; i < getFields().length; i++) {
+            terminal.write(getFields()[i] + " = " + getStringValue(i), x, y);
+            y++;
+        }
+    }
+
+    @Override
+    public String getStringValue(int i) {
+        switch(i) {
+            case 0: return name;
+            case 1: return Byte.toString(b);
+            case 2: return Character.toString(c);
+            case 3: return Double.toString(d);
+            case 4: return Float.toString(f);
+            case 5: return Integer.toString(this.i);
+            case 6: return Long.toString(j);
+            case 7: return Short.toString(s);
+            case 8: return Boolean.toString(z);
+            default: return "";
+        }
+    }
+}
diff --git a/object_creator/handlers/PrimitiveHandler.java b/object_creator/handlers/PrimitiveHandler.java
new file mode 100644
index 0000000..a165374
--- /dev/null
+++ b/object_creator/handlers/PrimitiveHandler.java
@@ -0,0 +1,147 @@
+package object_creator.handlers;
+
+import application.Screen;
+import java.awt.Color;
+import java.awt.event.KeyEvent;
+import asciiPanel.AsciiPanel;
+import object_creator.ObjectCreator;
+import object_creator.classes.PrimitiveObject;
+
+public class PrimitiveHandler extends Screen {
+    private ObjectCreator objectCreator;
+    private PrimitiveObject obj;
+    private int selection;
+    private boolean editMode; // If the user is editing a field or not
+    private String editString = "";
+    private String errorString = "";
+
+    public PrimitiveHandler(ObjectCreator objectCreator) {
+        this.objectCreator = objectCreator;
+        obj = new PrimitiveObject();
+    }
+
+    public PrimitiveHandler(ObjectCreator objectCreator, PrimitiveObject obj) {
+        this.objectCreator = objectCreator;
+        this.obj = obj;
+    }
+
+    @Override
+    public String title() { return "Creating Primitive Object"; }
+
+    @Override
+    public void print(AsciiPanel terminal) {
+        drawBorder(terminal);
+
+        int i;
+        int x = 4;
+        int y = 3;
+        for (i = 0; i < obj.getFields().length; i++) {
+            Color c = (i == selection) ? Color.GREEN : Color.WHITE;
+            String s;
+            if (i == selection && editMode) {
+                s = obj.getFields()[i] + " = " + editString;
+                terminal.write(" ", x + s.length(), y, Color.BLACK, Color.LIGHT_GRAY);
+            } else {
+                s = obj.getFields()[i] + " = " + obj.getStringValue(i);
+            }
+            terminal.write(s, x, y, c);
+            y++;
+        }
+
+        Color c = (i == selection) ? Color.GREEN : Color.WHITE;
+        terminal.write("Save Object", x, ++y, c);
+        i++;
+        y++;
+
+        if (!errorString.isEmpty()) {
+            terminal.write("Error: " + errorString, 8, terminal.getHeightInCharacters() - 3, Color.RED);
+        }
+    }
+
+    @Override
+    public Screen input(KeyEvent key) {
+        if (key.getKeyCode() == KeyEvent.VK_DOWN) {
+            if (!editMode) {
+                selection++;
+                if (selection >= obj.getFields().length + 1) { selection = 0; }
+            }
+        } else if (key.getKeyCode() == KeyEvent.VK_UP) {
+            if (!editMode) {
+                selection--;
+                if (selection < 0) { selection = obj.getFields().length - 1 + 1; }
+            }
+        } else if (key.getKeyCode() == KeyEvent.VK_ENTER) {
+            if (selection == obj.getFields().length - 1 + 1) {
+                objectCreator.addObject(obj);
+                return objectCreator;
+            } else if (!editMode) {
+                editMode = true;
+            } else {
+                boolean pass = saveEdit();
+                if (pass) {
+                    editMode = false;
+                    editString = "";
+                    errorString = "";
+                }
+            }
+        } else if (key.getKeyCode() == KeyEvent.VK_ESCAPE) {
+            if (editMode) {
+                editMode = false;
+                editString = "";
+                errorString = "";
+            } else {
+                return objectCreator;
+            }
+        } else if (editMode) {
+            try {
+                if (key.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
+                    if (editString.length() > 0)
+                        editString = editString.substring(0, editString.length() - 1);
+                } else {
+                    char c = key.getKeyChar();
+                    if (c >= 0 && c < 256)
+                        editString += c;
+                }
+            } catch (java.lang.IllegalArgumentException e) { /* Ignore invalid characters */ }
+        }
+        return this;
+    }
+
+    /* Ensure the string entered is valid before saving it */
+    private boolean saveEdit() {
+        switch(selection) {
+            case 0: obj.name = editString; return true;
+            case 1: 
+                try { obj.b = editString.getBytes()[0]; return true; }
+                catch (Exception e) { typeError("Byte"); return false; }
+            case 2: 
+                try { obj.c = editString.toCharArray()[0]; return true; }
+                catch (Exception e) { typeError("Character"); return false; }
+            case 3: 
+                try { obj.d = Double.valueOf(editString); return true; }
+                catch (Exception e) { typeError("Double"); return false; }
+            case 4: 
+                try { obj.f = Float.valueOf(editString); return true; }
+                catch (Exception e) { typeError("Float"); return false; }
+            case 5: 
+                try { obj.i = Integer.valueOf(editString); return true; }
+                catch (Exception e) { typeError("Integer"); return false; }
+            case 6: 
+                try { obj.j = Long.valueOf(editString); return true; }
+                catch (Exception e) { typeError("Long"); return false; }
+            case 7: 
+                try { obj.s = Short.valueOf(editString); return true; }
+                catch (Exception e) { typeError("Short"); return false; }
+            case 8: 
+                try { obj.z = Boolean.valueOf(editString); return true; }
+                catch (Exception e) { typeError("Boolean"); return false; }
+            default:
+                errorString = "Unknown error";
+                return false;
+        }
+    }
+
+    private void typeError(String type) {
+        errorString = "Must be of type " + type;
+    }
+}

commit 9a85564f1e26cbf948546bcbba4cd6643ed6558f
Author: alexs2112 <alexander.stevenson@ucalgary.ca>
Date:   Sun Oct 22 19:42:11 2023 -0600

    initial commit

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..6b468b6
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1 @@
+*.class
diff --git a/Assignment3.pdf b/Assignment3.pdf
new file mode 100644
index 0000000..6b468d9
--- /dev/null
+++ b/Assignment3.pdf
@@ -0,0 +1,191 @@
+                  Advanced Programming Techniques
+                                 Assignment 3
+
+Distributed Objects using Reflective Serialization/Deserialization
+
+The goal of this assignment is to create two programs (on two separate computers) that communicate with
+each other over a network connection (see diagram below). The Sender program will create one or more
+arbitrary objects, serialize these objects into a JDOM document, and then send this document as a stream of
+bytes to the Receiver program using a socket connection. The Receiver program will convert the incoming
+byte stream into a JDOM document, deserialize the document into objects, and display the objects to
+screen.
+
+Object   objects               JDOM             byte stream           JDOM       De-       objects  Visualizer
+Creator                       document           (Network)           document  serializer            (Object
+                  Serializer            Socket               Socket                                 Inspector)
+
+                  Sender                                                       Receiver
+
+The Object Creator
+
+This part of your system will create arbitrary objects under control of the user. Allow the user to create one
+or more objects from a selection of objects using some sort of text-based menu system or GUI. You must
+demonstrate that your system can handle the following kinds of objects:
+
+      A simple object with only primitives for instance variables. The user of your program must also be
+          able to set the values for these fields.
+
+      An object that contains references to other objects. Of course, these other objects must also be
+          created at the same time, and their primitive instance variables must be settable by the user. Your
+          program must also be able to deal with circular references (i.e., objects connected in a graph).
+
+      An object that contains an array of primitives. Allow the user to set the values for the array
+          elements to arbitrary values.
+
+      An object that contains an array of object references. The other objects must also be created at the
+          same time.
+
+      An object that uses an instance of one of Java’s collection classes to refer to several other objects.
+          These objects, too, must be created at the same time.
+
+The Serializer
+
+Serialization will be implemented in a Java class called Serializer, and will be invoked using the method:
+
+          public org.jdom.Document serialize(Object obj)
+
+This method will serialize the complete state of the object passed in as parameter, and produce an XML
+document that can be stored to file, printed out, or sent over a network connection. Use the facilities
+provided by JDOM to help you do this, in particular the Document and XMLOutputter classes.
+
+The XML document must have one root element with the tag-name serialized. The object, and any other
+objects that may need to be serialized, will be nested within the root element, listed one after the other. For
+example:
+
+<serialized>
+           <object . . .>
+                      ...
+           </object>
+           <object . . .>
+                      ...
+           </object>
+</serialized>
+
+The element object will have two attributes: class and id. The class’s value will be the name of the class of
+the object, and the id’s value will be object’s unique identifier number, most likely created using
+IdentityHashMap. For example:
+
+           <object class=”Zoo” id=”0”>
+
+Nested within each object element will be 0 or more field elements. Each field element will have two
+attributes: name and declaringclass. The name’s value will be the name of the field, and the
+declaringclass’s value will be the name of the field’s declaring class. For example:
+
+                      <field name=”city” declaringclass=”Zoo”>
+                                  ...
+
+                      </field>
+
+If the type of the field is a primitive, store the primitive as content of a value element. For example:
+
+                      <field . . .>
+                                  <value>23.7</value>
+
+                      </field>
+
+If the field is a reference to another object, store the id of that object as content of a reference element. For
+example:
+
+                      <field . . .>
+                                  <reference>5</reference>
+
+                      </field>
+
+Of course, the object being referred to must also be serialized, and will be another object element nested
+inside the root element. Array objects will be similar to the object element described above, except that an
+additional length attribute is used, and each element of the array will be stored as content to a value or
+reference element, depending on the component type. For example:
+
+           <object class=”[C” id=”8” length=”5”>
+                      <value>S</value>
+                      <value>m</value>
+                      <value>i</value>
+                      <value>t</value>
+                      <value>h</value>
+
+           </object>
+
+The Network Connection
+
+Java provides the java.net.Socket class to help implement a network connection between two programs.
+Initially, while testing your system, you can run the two programs on the same computer. However, when
+demonstrating your system to the TAs, you must show that it works over a network connecting two
+separate computers.
+
+The Deserializer
+
+Deserialization will be implemented in a Java class called Deserializer, and will be invoked using the
+method:
+
+          public Object deserialize(org.jdom.Document document)
+
+This method will deserialize an XML document passed in as parameter, returning the reconstituted object
+(and any objects it refers to). Use the facilities provided by JDOM to help with this, in particular the
+Document and SAXBuilder classes.
+
+The Visualizer
+This part of your system displays the deserialized objects to screen. You can use a text-based or graphical
+user interface for this. The Object Inspector you created in Assignment 2 may be helpful here. Be sure that
+this part of the system shows that the deserialized objects are properly recreated.
+
+Other Requirements
+
+You must demonstrate a working program to your TA during lab time shortly after the due date. Make
+certain you show that all requirements of the system have been fulfilled and implemented correctly. You
+must also use version control, unit testing, and refactoring throughout this assignment.
+
+Submit the following:
+
+1. An electronic copy of your source code, unit tests, your version control logs, and a record of your
+     refactorings (in a Word, PDF, or text file call refactorings). Use the Assignment 3 Dropbox Folder in
+     D2L to submit electronically.
+                 Advanced Programming Techniques
+
+                                Assignment 3 Grading
+
+Student:__________________________________________
+
+Functionality                                 2  ______
+
+Object Creation                               2  ______
+     Simple object
+     Object with references to other objects  2  ______
+     Object with array of primitives
+     Object with array of references          2  ______
+     Object using collection instance
+                                              2  ______
+Serialization to JDOM document
+     Simple object                            2  ______
+     Object with references to other objects
+     Object with array of primitives          2  ______
+     Object with array of references
+     Object using collection instance         2  ______
+
+Sending/Receiving of byte steam               2  ______
+
+Deserialization from JDOM document            2  ______
+     Simple object
+     Object with references to other objects  4  ______
+     Object with array of primitives
+     Object with array of references          2  ______
+     Object using collection instance
+                                              2  ______
+Object Visualization
+                                              2  ______
+
+                                              2  ______
+
+                                              2  ______
+
+                                              10 ______
+
+Other Requirements                            4  ______
+
+Version control (show log files)              4  ______
+Unit Tests
+Refactoring (described in refactorings file)  4  ______
+Design Quality
+                                              4  ______
+
+Total                                         60 ______  _____%
+
\ No newline at end of file
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..10d465c
--- /dev/null
+++ b/README.md
@@ -0,0 +1,8 @@
+# Object Inspector
+A simple serializer and deserializer for CPSC 501. See the [assignment specifications](Assignment3.pdf) for more details.
+
+### Process
+ - `Object Creator` to create arbitrary objects through text-based user input.
+ - These objects are sent to the `Serializer` and are serialized using the JDOM library.
+ - The resulting JDOM document are sent as a byte stream over the network using sockets, to be received by the `Deserializer`.
+ - The `Deserializer` deserialized objects are then passed to an `Object Inspector` to view the contents.
diff --git a/build.bat b/build.bat
new file mode 100644
index 0000000..33e6ce5
--- /dev/null
+++ b/build.bat
@@ -0,0 +1 @@
+javac object_creator/*.java
diff --git a/object_creator/ObjectCreator.java b/object_creator/ObjectCreator.java
new file mode 100644
index 0000000..84370c2
--- /dev/null
+++ b/object_creator/ObjectCreator.java
@@ -0,0 +1,14 @@
+package object_creator;
+
+import java.util.Scanner;
+
+public class ObjectCreator {
+    public static void main(String[] args) {
+        System.out.println(">> Hello, World!");
+        Scanner scanner = new Scanner(System.in);
+
+        System.out.println(">> Say something and I will repeat it to you.");
+        String s = scanner.next();
+        System.out.println(">> " + s);
+    }
+}
